// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.27.1
// 	protoc        v3.17.3
// source: GCU_FSM_VCI_v0.1.proto

package fsmvci
/*
import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//枪头故障状态枚举
type FaultEnum int32

const (
	FaultEnum_DefaultFault          FaultEnum = 0   //	缺省值
	FaultEnum_ShortCircuitFault     FaultEnum = 1   //	车辆输出短路故障
	FaultEnum_BMSCellOverVolt       FaultEnum = 2   //	主动防护，电池单体过压
	FaultEnum_BMSPackOverVolt       FaultEnum = 3   //	主动防护，电池包过压
	FaultEnum_BMSPackOverCurr       FaultEnum = 4   //	主动防护，过流
	FaultEnum_BMSCellOverTemp       FaultEnum = 5   //	主动防护，过温
	FaultEnum_BMSCellLowTemp        FaultEnum = 6   //	主动防护，低温
	FaultEnum_BMSThermalRunaway     FaultEnum = 7   //	主动防护，热失控
	FaultEnum_BMSRelayShortCrit     FaultEnum = 8   //	主动防护，车的继电器粘连
	FaultEnum_BMSDataUpdateAbnormal FaultEnum = 9   //	主动防护，数据异常
	FaultEnum_BMSOverCharge         FaultEnum = 10  //	主动防护，过充保护
	FaultEnum_BMSAuxPowerAbnormal   FaultEnum = 11  //	主动防护，辅助电源异常
	FaultEnum_BMSInnerCncterOpen    FaultEnum = 12  //	主动防护，继电器开路
	FaultEnum_ChgerAuxPowerAbnormal FaultEnum = 32  //	辅助电源异常
	FaultEnum_InsultVolAbnormal     FaultEnum = 33  //	绝缘检测电压异常
	FaultEnum_InsultTimeOut         FaultEnum = 34  //	绝缘检测超时
	FaultEnum_InsultWarn            FaultEnum = 35  //	绝缘检测告警
	FaultEnum_InsultAbnormal        FaultEnum = 36  //	绝缘检测异常
	FaultEnum_FSMOffline            FaultEnum = 37  //	消息中心离线
	FaultEnum_ElockAbnormal         FaultEnum = 38  //	电子锁异常
	FaultEnum_CC1VoltAbnormal       FaultEnum = 39  //	CC1电压异常
	FaultEnum_GunOutOverVolt        FaultEnum = 40  //	Gun输出过压
	FaultEnum_GunReserveConnect     FaultEnum = 41  //	枪头反接
	FaultEnum_FuseBreakFault        FaultEnum = 42  //	熔断器故障
	FaultEnum_ChargeAbnormal        FaultEnum = 43  //	充电机系统故障
	FaultEnum_ChgGunOverTemp        FaultEnum = 64  //	枪头过温
	FaultEnum_OutRlyFrontVolHigh    FaultEnum = 65  //	输出接触器前级电压高
	FaultEnum_OutRlyFrontVolLow     FaultEnum = 66  //	输出接触器前级电压低
	FaultEnum_BatVolHigh            FaultEnum = 67  //	电池电压大于充电机最大电压
	FaultEnum_BatVolLow             FaultEnum = 68  //	电池电压小于充电机最小电压
	FaultEnum_BMSReportVolAbnormal  FaultEnum = 69  //	启动充电前直流输出接触器外侧电压与通信报文电池电压相差＞±5%
	FaultEnum_BatAllowVolLow        FaultEnum = 70  //	BMS最高允许电压小于充电机最小输出电压
	FaultEnum_BMSProtoVerUnMatch    FaultEnum = 71  //	BMS通信协议版本不匹配
	FaultEnum_BMSCommFault          FaultEnum = 96  //	BMS 通信故障
	FaultEnum_BRMTimeout            FaultEnum = 97  //	BRM 报文接收超时
	FaultEnum_BRMAbnorma            FaultEnum = 98  //	BRM 报文数据项异常
	FaultEnum_BCPTimeOut            FaultEnum = 99  //	BCP 报文接收超时
	FaultEnum_BCPAbnormal           FaultEnum = 100 //	BCP 报文数据项异常
	FaultEnum_BROTimeout            FaultEnum = 101 //	BRO 报文（0x00）接收超时
	FaultEnum_BROAATimeout          FaultEnum = 102 //	BRO 报文（0xAA）接收超时
	FaultEnum_BSMTimeout            FaultEnum = 103 //	BSM 报文接收超时
	FaultEnum_BSMAbnormal           FaultEnum = 104 //	BSM 报文数据项异常
	FaultEnum_BCLTimeout            FaultEnum = 105 //	BCL 报文接收超时
	FaultEnum_BCSTimeOut            FaultEnum = 106 //	BCS 报文接收超时
	FaultEnum_PreChgFail            FaultEnum = 128 //	预充阶段调压失败
	FaultEnum_DisChgFail            FaultEnum = 129 //	泄放失败
	FaultEnum_GunStateAbnor         FaultEnum = 130 //	控制导引异常
	FaultEnum_GunTempWarn           FaultEnum = 131 //	枪头过温告警
	FaultEnum_ChgBSTStop            FaultEnum = 132 //	BMS 故障终止
)

// Enum value maps for FaultEnum.
var (
	FaultEnum_name = map[int32]string{
		0:   "DefaultFault",
		1:   "ShortCircuitFault",
		2:   "BMSCellOverVolt",
		3:   "BMSPackOverVolt",
		4:   "BMSPackOverCurr",
		5:   "BMSCellOverTemp",
		6:   "BMSCellLowTemp",
		7:   "BMSThermalRunaway",
		8:   "BMSRelayShortCrit",
		9:   "BMSDataUpdateAbnormal",
		10:  "BMSOverCharge",
		11:  "BMSAuxPowerAbnormal",
		12:  "BMSInnerCncterOpen",
		32:  "ChgerAuxPowerAbnormal",
		33:  "InsultVolAbnormal",
		34:  "InsultTimeOut",
		35:  "InsultWarn",
		36:  "InsultAbnormal",
		37:  "FSMOffline",
		38:  "ElockAbnormal",
		39:  "CC1VoltAbnormal",
		40:  "GunOutOverVolt",
		41:  "GunReserveConnect",
		42:  "FuseBreakFault",
		43:  "ChargeAbnormal",
		64:  "ChgGunOverTemp",
		65:  "OutRlyFrontVolHigh",
		66:  "OutRlyFrontVolLow",
		67:  "BatVolHigh",
		68:  "BatVolLow",
		69:  "BMSReportVolAbnormal",
		70:  "BatAllowVolLow",
		71:  "BMSProtoVerUnMatch",
		96:  "BMSCommFault",
		97:  "BRMTimeout",
		98:  "BRMAbnorma",
		99:  "BCPTimeOut",
		100: "BCPAbnormal",
		101: "BROTimeout",
		102: "BROAATimeout",
		103: "BSMTimeout",
		104: "BSMAbnormal",
		105: "BCLTimeout",
		106: "BCSTimeOut",
		128: "PreChgFail",
		129: "DisChgFail",
		130: "GunStateAbnor",
		131: "GunTempWarn",
		132: "ChgBSTStop",
	}
	FaultEnum_value = map[string]int32{
		"DefaultFault":          0,
		"ShortCircuitFault":     1,
		"BMSCellOverVolt":       2,
		"BMSPackOverVolt":       3,
		"BMSPackOverCurr":       4,
		"BMSCellOverTemp":       5,
		"BMSCellLowTemp":        6,
		"BMSThermalRunaway":     7,
		"BMSRelayShortCrit":     8,
		"BMSDataUpdateAbnormal": 9,
		"BMSOverCharge":         10,
		"BMSAuxPowerAbnormal":   11,
		"BMSInnerCncterOpen":    12,
		"ChgerAuxPowerAbnormal": 32,
		"InsultVolAbnormal":     33,
		"InsultTimeOut":         34,
		"InsultWarn":            35,
		"InsultAbnormal":        36,
		"FSMOffline":            37,
		"ElockAbnormal":         38,
		"CC1VoltAbnormal":       39,
		"GunOutOverVolt":        40,
		"GunReserveConnect":     41,
		"FuseBreakFault":        42,
		"ChargeAbnormal":        43,
		"ChgGunOverTemp":        64,
		"OutRlyFrontVolHigh":    65,
		"OutRlyFrontVolLow":     66,
		"BatVolHigh":            67,
		"BatVolLow":             68,
		"BMSReportVolAbnormal":  69,
		"BatAllowVolLow":        70,
		"BMSProtoVerUnMatch":    71,
		"BMSCommFault":          96,
		"BRMTimeout":            97,
		"BRMAbnorma":            98,
		"BCPTimeOut":            99,
		"BCPAbnormal":           100,
		"BROTimeout":            101,
		"BROAATimeout":          102,
		"BSMTimeout":            103,
		"BSMAbnormal":           104,
		"BCLTimeout":            105,
		"BCSTimeOut":            106,
		"PreChgFail":            128,
		"DisChgFail":            129,
		"GunStateAbnor":         130,
		"GunTempWarn":           131,
		"ChgBSTStop":            132,
	}
)

func (x FaultEnum) Enum() *FaultEnum {
	p := new(FaultEnum)
	*p = x
	return p
}

func (x FaultEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[0].Descriptor()
}

func (FaultEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[0]
}

func (x FaultEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultEnum.Descriptor instead.
func (FaultEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{0}
}

//终止原因枚举
type HaltReason int32

const (
	HaltReason_DefaultReason HaltReason = 0 //	缺省值
	HaltReason_NormalStop    HaltReason = 1 //  正常停机
	HaltReason_FaultStop     HaltReason = 2 //  故障停机
)

// Enum value maps for HaltReason.
var (
	HaltReason_name = map[int32]string{
		0: "DefaultReason",
		1: "NormalStop",
		2: "FaultStop",
	}
	HaltReason_value = map[string]int32{
		"DefaultReason": 0,
		"NormalStop":    1,
		"FaultStop":     2,
	}
)

func (x HaltReason) Enum() *HaltReason {
	p := new(HaltReason)
	*p = x
	return p
}

func (x HaltReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaltReason) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[1].Descriptor()
}

func (HaltReason) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[1]
}

func (x HaltReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaltReason.Descriptor instead.
func (HaltReason) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{1}
}

//故障状态枚举
type FaultState int32

const (
	FaultState_DefaultState   FaultState = 0 //  缺省值
	FaultState_NormalState    FaultState = 1 //  故障恢复
	FaultState_FaultSustained FaultState = 2 //  故障发生
)

// Enum value maps for FaultState.
var (
	FaultState_name = map[int32]string{
		0: "DefaultState",
		1: "NormalState",
		2: "FaultSustained",
	}
	FaultState_value = map[string]int32{
		"DefaultState":   0,
		"NormalState":    1,
		"FaultSustained": 2,
	}
)

func (x FaultState) Enum() *FaultState {
	p := new(FaultState)
	*p = x
	return p
}

func (x FaultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultState) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[2].Descriptor()
}

func (FaultState) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[2]
}

func (x FaultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultState.Descriptor instead.
func (FaultState) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{2}
}

//充电类型
type ChargingMode int32

const (
	ChargingMode_DefaultChargingMode ChargingMode = 0 //缺省值
	ChargingMode_VoltageStable       ChargingMode = 1 //恒压充电
	ChargingMode_CurrentStable       ChargingMode = 2 //恒流充电
)

// Enum value maps for ChargingMode.
var (
	ChargingMode_name = map[int32]string{
		0: "DefaultChargingMode",
		1: "VoltageStable",
		2: "CurrentStable",
	}
	ChargingMode_value = map[string]int32{
		"DefaultChargingMode": 0,
		"VoltageStable":       1,
		"CurrentStable":       2,
	}
)

func (x ChargingMode) Enum() *ChargingMode {
	p := new(ChargingMode)
	*p = x
	return p
}

func (x ChargingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[3].Descriptor()
}

func (ChargingMode) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[3]
}

func (x ChargingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingMode.Descriptor instead.
func (ChargingMode) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{3}
}

//枪类型枚举
type GunTypeEnum int32

const (
	GunTypeEnum_DefaultType GunTypeEnum = 0 //	缺省值
	GunTypeEnum_GBT11       GunTypeEnum = 1 //	新老兼容国标枪
	GunTypeEnum_GBT15       GunTypeEnum = 2 //	新国标枪
	GunTypeEnum_CCS         GunTypeEnum = 3 //	欧标枪
	GunTypeEnum_Chaoji      GunTypeEnum = 4 //	超级枪
	GunTypeEnum_Bow         GunTypeEnum = 5 //	充电弓
	GunTypeEnum_SCD         GunTypeEnum = 6 //	自动头
)

// Enum value maps for GunTypeEnum.
var (
	GunTypeEnum_name = map[int32]string{
		0: "DefaultType",
		1: "GBT11",
		2: "GBT15",
		3: "CCS",
		4: "Chaoji",
		5: "Bow",
		6: "SCD",
	}
	GunTypeEnum_value = map[string]int32{
		"DefaultType": 0,
		"GBT11":       1,
		"GBT15":       2,
		"CCS":         3,
		"Chaoji":      4,
		"Bow":         5,
		"SCD":         6,
	}
)

func (x GunTypeEnum) Enum() *GunTypeEnum {
	p := new(GunTypeEnum)
	*p = x
	return p
}

func (x GunTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GunTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[4].Descriptor()
}

func (GunTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[4]
}

func (x GunTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GunTypeEnum.Descriptor instead.
func (GunTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{4}
}

//BMS超时类型枚举
type BMSTimeoutEnum int32

const (
	BMSTimeoutEnum_DefaultTimeout BMSTimeoutEnum = 0 //  缺省值
	BMSTimeoutEnum_BHM            BMSTimeoutEnum = 1 //	超时报文
	BMSTimeoutEnum_BRM            BMSTimeoutEnum = 2 //	超时报文
	BMSTimeoutEnum_BCP            BMSTimeoutEnum = 3 //	超时报文
	BMSTimeoutEnum_BCS            BMSTimeoutEnum = 4 //	超时报文
	BMSTimeoutEnum_BCL            BMSTimeoutEnum = 5 //	超时报文
	BMSTimeoutEnum_BST            BMSTimeoutEnum = 6 //	超时报文
	BMSTimeoutEnum_BSD            BMSTimeoutEnum = 7 //	超时报文
)

// Enum value maps for BMSTimeoutEnum.
var (
	BMSTimeoutEnum_name = map[int32]string{
		0: "DefaultTimeout",
		1: "BHM",
		2: "BRM",
		3: "BCP",
		4: "BCS",
		5: "BCL",
		6: "BST",
		7: "BSD",
	}
	BMSTimeoutEnum_value = map[string]int32{
		"DefaultTimeout": 0,
		"BHM":            1,
		"BRM":            2,
		"BCP":            3,
		"BCS":            4,
		"BCL":            5,
		"BST":            6,
		"BSD":            7,
	}
)

func (x BMSTimeoutEnum) Enum() *BMSTimeoutEnum {
	p := new(BMSTimeoutEnum)
	*p = x
	return p
}

func (x BMSTimeoutEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSTimeoutEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[5].Descriptor()
}

func (BMSTimeoutEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[5]
}

func (x BMSTimeoutEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSTimeoutEnum.Descriptor instead.
func (BMSTimeoutEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{5}
}

//自检状态描述枚举
type SelfCheckType int32

const (
	SelfCheckType_DefaultCheck SelfCheckType = 0 //	缺省值
	SelfCheckType_Standby      SelfCheckType = 1 //	已完成，状态可用
	SelfCheckType_Check        SelfCheckType = 2 //	自检中，稍后上报
	SelfCheckType_Fault        SelfCheckType = 3 //	自检失败，自愈中
)

// Enum value maps for SelfCheckType.
var (
	SelfCheckType_name = map[int32]string{
		0: "DefaultCheck",
		1: "Standby",
		2: "Check",
		3: "Fault",
	}
	SelfCheckType_value = map[string]int32{
		"DefaultCheck": 0,
		"Standby":      1,
		"Check":        2,
		"Fault":        3,
	}
)

func (x SelfCheckType) Enum() *SelfCheckType {
	p := new(SelfCheckType)
	*p = x
	return p
}

func (x SelfCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_1_proto_enumTypes[6].Descriptor()
}

func (SelfCheckType) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_1_proto_enumTypes[6]
}

func (x SelfCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfCheckType.Descriptor instead.
func (SelfCheckType) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{6}
}

//用这个定义作为bool，可以区别发送方是否填值
type BoolEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolEnum) Reset() {
	*x = BoolEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolEnum) ProtoMessage() {}

func (x *BoolEnum) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolEnum.ProtoReflect.Descriptor instead.
func (*BoolEnum) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{0}
}

func (x *BoolEnum) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//用这个定义作为int32，可以区别发送方是否填值
type Int32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32Value) Reset() {
	*x = Int32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Value) ProtoMessage() {}

func (x *Int32Value) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Value.ProtoReflect.Descriptor instead.
func (*Int32Value) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{1}
}

func (x *Int32Value) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为uint32，可以区别发送方是否填值
type Uint32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint32Value) Reset() {
	*x = Uint32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Value) ProtoMessage() {}

func (x *Uint32Value) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Value.ProtoReflect.Descriptor instead.
func (*Uint32Value) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32Value) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为float，可以区别发送方是否填值
type FloatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatValue) Reset() {
	*x = FloatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatValue) ProtoMessage() {}

func (x *FloatValue) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatValue.ProtoReflect.Descriptor instead.
func (*FloatValue) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{3}
}

func (x *FloatValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为double，可以区别发送方是否填值
type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//秒级时间戳
type DateTimeShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint32 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"` //可记录至2106-2-7 14:28:15
}

func (x *DateTimeShort) Reset() {
	*x = DateTimeShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeShort) ProtoMessage() {}

func (x *DateTimeShort) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeShort.ProtoReflect.Descriptor instead.
func (*DateTimeShort) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{5}
}

func (x *DateTimeShort) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

//毫秒时间戳
type DateTimeLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint64 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"` //Unix标准时间戳
}

func (x *DateTimeLong) Reset() {
	*x = DateTimeLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeLong) ProtoMessage() {}

func (x *DateTimeLong) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeLong.ProtoReflect.Descriptor instead.
func (*DateTimeLong) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{6}
}

func (x *DateTimeLong) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

type EnableServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCIServer *BoolEnum `protobuf:"bytes,1,opt,name=VCIServer,proto3" json:"VCIServer,omitempty"` //	VCI模块状态，0表示不可用，1表示可用
	PMMServer *BoolEnum `protobuf:"bytes,2,opt,name=PMMServer,proto3" json:"PMMServer,omitempty"` //	PMM模块状态，0表示不可用，1表示可用
	DMCServer *BoolEnum `protobuf:"bytes,3,opt,name=DMCServer,proto3" json:"DMCServer,omitempty"` //	DMC模块状态，0表示不可用，1表示可用
	OHPServer *BoolEnum `protobuf:"bytes,4,opt,name=OHPServer,proto3" json:"OHPServer,omitempty"` //	OHP模块状态，0表示不可用，1表示可用
	LCRServer *BoolEnum `protobuf:"bytes,5,opt,name=LCRServer,proto3" json:"LCRServer,omitempty"` //	LCR模块状态，0表示不可用，1表示可用
}

func (x *EnableServer) Reset() {
	*x = EnableServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServer) ProtoMessage() {}

func (x *EnableServer) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServer.ProtoReflect.Descriptor instead.
func (*EnableServer) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{7}
}

func (x *EnableServer) GetVCIServer() *BoolEnum {
	if x != nil {
		return x.VCIServer
	}
	return nil
}

func (x *EnableServer) GetPMMServer() *BoolEnum {
	if x != nil {
		return x.PMMServer
	}
	return nil
}

func (x *EnableServer) GetDMCServer() *BoolEnum {
	if x != nil {
		return x.DMCServer
	}
	return nil
}

func (x *EnableServer) GetOHPServer() *BoolEnum {
	if x != nil {
		return x.OHPServer
	}
	return nil
}

func (x *EnableServer) GetLCRServer() *BoolEnum {
	if x != nil {
		return x.LCRServer
	}
	return nil
}

//VCI枪头配置信息
type VCIPram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GunAmount   *Uint32Value `protobuf:"bytes,1,opt,name=GunAmount,proto3" json:"GunAmount,omitempty"`                              //	枪头总计数
	ID          *Uint32Value `protobuf:"bytes,2,opt,name=ID,proto3" json:"ID,omitempty"`                                            //	当前描述枪头编号，与CAN总线编号一致(0~5)
	Type        GunTypeEnum  `protobuf:"varint,3,opt,name=Type,proto3,enum=gcu_fsm_vci.protobuf.GunTypeEnum" json:"Type,omitempty"` //	枪头类型
	LimitI      *FloatValue  `protobuf:"bytes,4,opt,name=LimitI,proto3" json:"LimitI,omitempty"`                                    //	枪头最大流点
	LimitV      *FloatValue  `protobuf:"bytes,5,opt,name=LimitV,proto3" json:"LimitV,omitempty"`                                    //	枪头最大电压
	MaxP        *FloatValue  `protobuf:"bytes,6,opt,name=MaxP,proto3" json:"MaxP,omitempty"`                                        //	系统最大功率
	AuxType     *BoolEnum    `protobuf:"bytes,7,opt,name=AuxType,proto3" json:"AuxType,omitempty"`                                  //	BMS辅源类型(12V/24V)，0表示12v，1表示24v
	ElockEnable *BoolEnum    `protobuf:"bytes,8,opt,name=ElockEnable,proto3" json:"ElockEnable,omitempty"`                          //	电子锁使能标志，0表示使能，1表示不使能
}

func (x *VCIPram) Reset() {
	*x = VCIPram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIPram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIPram) ProtoMessage() {}

func (x *VCIPram) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIPram.ProtoReflect.Descriptor instead.
func (*VCIPram) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{8}
}

func (x *VCIPram) GetGunAmount() *Uint32Value {
	if x != nil {
		return x.GunAmount
	}
	return nil
}

func (x *VCIPram) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIPram) GetType() GunTypeEnum {
	if x != nil {
		return x.Type
	}
	return GunTypeEnum_DefaultType
}

func (x *VCIPram) GetLimitI() *FloatValue {
	if x != nil {
		return x.LimitI
	}
	return nil
}

func (x *VCIPram) GetLimitV() *FloatValue {
	if x != nil {
		return x.LimitV
	}
	return nil
}

func (x *VCIPram) GetMaxP() *FloatValue {
	if x != nil {
		return x.MaxP
	}
	return nil
}

func (x *VCIPram) GetAuxType() *BoolEnum {
	if x != nil {
		return x.AuxType
	}
	return nil
}

func (x *VCIPram) GetElockEnable() *BoolEnum {
	if x != nil {
		return x.ElockEnable
	}
	return nil
}

//系统参数信息
type SysParameter struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysVolMax  *DoubleValue `protobuf:"bytes,1,opt,name=SysVolMax,proto3" json:"SysVolMax,omitempty"`   //	系统（模块）最大输出电压
	SysCurrMax *DoubleValue `protobuf:"bytes,2,opt,name=SysCurrMax,proto3" json:"SysCurrMax,omitempty"` //	系统最大输出电流
	SysVolVMin *DoubleValue `protobuf:"bytes,3,opt,name=SysVolVMin,proto3" json:"SysVolVMin,omitempty"` //	系统（模块）恒压下最小输出电压
	SysVolCMin *DoubleValue `protobuf:"bytes,4,opt,name=SysVolCMin,proto3" json:"SysVolCMin,omitempty"` //	系统（模块）恒流下最小输出电压
	SysCurrMin *DoubleValue `protobuf:"bytes,5,opt,name=SysCurrMin,proto3" json:"SysCurrMin,omitempty"` //	模块最小输出电流
}

func (x *SysParameter) Reset() {
	*x = SysParameter{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysParameter) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysParameter) ProtoMessage() {}

func (x *SysParameter) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysParameter.ProtoReflect.Descriptor instead.
func (*SysParameter) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{9}
}

func (x *SysParameter) GetSysVolMax() *DoubleValue {
	if x != nil {
		return x.SysVolMax
	}
	return nil
}

func (x *SysParameter) GetSysCurrMax() *DoubleValue {
	if x != nil {
		return x.SysCurrMax
	}
	return nil
}

func (x *SysParameter) GetSysVolVMin() *DoubleValue {
	if x != nil {
		return x.SysVolVMin
	}
	return nil
}

func (x *SysParameter) GetSysVolCMin() *DoubleValue {
	if x != nil {
		return x.SysVolCMin
	}
	return nil
}

func (x *SysParameter) GetSysCurrMin() *DoubleValue {
	if x != nil {
		return x.SysCurrMin
	}
	return nil
}

//VCI枪头链接阶段系统指令
type SysCtrlPluggedStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElockCmd  *BoolEnum `protobuf:"bytes,1,opt,name=ElockCmd,proto3" json:"ElockCmd,omitempty"`   //	电子指令(0表示解锁，1表示上锁)
	StartCmd  *BoolEnum `protobuf:"bytes,2,opt,name=StartCmd,proto3" json:"StartCmd,omitempty"`   //	开机指令(0表示关机，1表示开机)
	StartType *BoolEnum `protobuf:"bytes,3,opt,name=StartType,proto3" json:"StartType,omitempty"` //	开机类型(0表示正常开机，1表示骗取VIN开机)
}

func (x *SysCtrlPluggedStage) Reset() {
	*x = SysCtrlPluggedStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlPluggedStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlPluggedStage) ProtoMessage() {}

func (x *SysCtrlPluggedStage) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlPluggedStage.ProtoReflect.Descriptor instead.
func (*SysCtrlPluggedStage) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{10}
}

func (x *SysCtrlPluggedStage) GetElockCmd() *BoolEnum {
	if x != nil {
		return x.ElockCmd
	}
	return nil
}

func (x *SysCtrlPluggedStage) GetStartCmd() *BoolEnum {
	if x != nil {
		return x.StartCmd
	}
	return nil
}

func (x *SysCtrlPluggedStage) GetStartType() *BoolEnum {
	if x != nil {
		return x.StartType
	}
	return nil
}

//VCI枪头链接阶段系统指令
type SysCtrlChargingStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StartCmd *BoolEnum `protobuf:"bytes,1,opt,name=StartCmd,proto3" json:"StartCmd,omitempty"` //	关机指令(0表示不操作，1表示关机)
}

func (x *SysCtrlChargingStage) Reset() {
	*x = SysCtrlChargingStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlChargingStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlChargingStage) ProtoMessage() {}

func (x *SysCtrlChargingStage) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlChargingStage.ProtoReflect.Descriptor instead.
func (*SysCtrlChargingStage) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{11}
}

func (x *SysCtrlChargingStage) GetStartCmd() *BoolEnum {
	if x != nil {
		return x.StartCmd
	}
	return nil
}

//VCI枪头基础状态信息
type GunBaseStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID             *Uint32Value `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                         //	当前描述枪头编号，与CAN总线编号一致(0~5)
	LinkState      *BoolEnum    `protobuf:"bytes,2,opt,name=LinkState,proto3" json:"LinkState,omitempty"`           //	插枪状态，0表示空闲，1表示已插枪
	PositionStatus *BoolEnum    `protobuf:"bytes,3,opt,name=PositionStatus,proto3" json:"PositionStatus,omitempty"` //	在位/归位状态，0表示未归位，1表示已归位
}

func (x *GunBaseStatus) Reset() {
	*x = GunBaseStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunBaseStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunBaseStatus) ProtoMessage() {}

func (x *GunBaseStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunBaseStatus.ProtoReflect.Descriptor instead.
func (*GunBaseStatus) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{12}
}

func (x *GunBaseStatus) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *GunBaseStatus) GetLinkState() *BoolEnum {
	if x != nil {
		return x.LinkState
	}
	return nil
}

func (x *GunBaseStatus) GetPositionStatus() *BoolEnum {
	if x != nil {
		return x.PositionStatus
	}
	return nil
}

//VCI枪头链接阶段状态信息
type GunPluggedStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxPowerDrv *BoolEnum   `protobuf:"bytes,1,opt,name=AuxPowerDrv,proto3" json:"AuxPowerDrv,omitempty"` //	BMS辅助电源驱动
	AuxPowerFb  *BoolEnum   `protobuf:"bytes,2,opt,name=AuxPowerFb,proto3" json:"AuxPowerFb,omitempty"`   //	BMS辅助电源反馈
	ElockDrv    *BoolEnum   `protobuf:"bytes,3,opt,name=ElockDrv,proto3" json:"ElockDrv,omitempty"`       //	电子锁驱动
	ElockFb     *BoolEnum   `protobuf:"bytes,4,opt,name=ElockFb,proto3" json:"ElockFb,omitempty"`         //	电子锁反馈
	TPos        *Int32Value `protobuf:"bytes,5,opt,name=T_pos,json=TPos,proto3" json:"T_pos,omitempty"`   //	枪头正极温度
	TNeg        *Int32Value `protobuf:"bytes,6,opt,name=T_neg,json=TNeg,proto3" json:"T_neg,omitempty"`   //	枪头负极温度
}

func (x *GunPluggedStatus) Reset() {
	*x = GunPluggedStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunPluggedStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunPluggedStatus) ProtoMessage() {}

func (x *GunPluggedStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunPluggedStatus.ProtoReflect.Descriptor instead.
func (*GunPluggedStatus) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{13}
}

func (x *GunPluggedStatus) GetAuxPowerDrv() *BoolEnum {
	if x != nil {
		return x.AuxPowerDrv
	}
	return nil
}

func (x *GunPluggedStatus) GetAuxPowerFb() *BoolEnum {
	if x != nil {
		return x.AuxPowerFb
	}
	return nil
}

func (x *GunPluggedStatus) GetElockDrv() *BoolEnum {
	if x != nil {
		return x.ElockDrv
	}
	return nil
}

func (x *GunPluggedStatus) GetElockFb() *BoolEnum {
	if x != nil {
		return x.ElockFb
	}
	return nil
}

func (x *GunPluggedStatus) GetTPos() *Int32Value {
	if x != nil {
		return x.TPos
	}
	return nil
}

func (x *GunPluggedStatus) GetTNeg() *Int32Value {
	if x != nil {
		return x.TNeg
	}
	return nil
}

//BmsShakehands-握手阶段BMS信息
type BmsShakehands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BmsVolMaxAllowed *DoubleValue `protobuf:"bytes,1,opt,name=BmsVolMaxAllowed,proto3" json:"BmsVolMaxAllowed,omitempty"` //	最高允许充电总电压
	GBTProtoVersion  string       `protobuf:"bytes,2,opt,name=GBTProtoVersion,proto3" json:"GBTProtoVersion,omitempty"`   //	GBT27930协议版本号
}

func (x *BmsShakehands) Reset() {
	*x = BmsShakehands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsShakehands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsShakehands) ProtoMessage() {}

func (x *BmsShakehands) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsShakehands.ProtoReflect.Descriptor instead.
func (*BmsShakehands) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{14}
}

func (x *BmsShakehands) GetBmsVolMaxAllowed() *DoubleValue {
	if x != nil {
		return x.BmsVolMaxAllowed
	}
	return nil
}

func (x *BmsShakehands) GetGBTProtoVersion() string {
	if x != nil {
		return x.GBTProtoVersion
	}
	return ""
}

//BmsIdentify-辨识阶段BMS信息
type BmsIdentify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryType     *Int32Value  `protobuf:"bytes,1,opt,name=BatteryType,proto3" json:"BatteryType,omitempty"`         //	电池类型
	CapacityRated   *DoubleValue `protobuf:"bytes,2,opt,name=CapacityRated,proto3" json:"CapacityRated,omitempty"`     //	整车动力蓄电池系统额定容量（AH）
	VoltageRated    *DoubleValue `protobuf:"bytes,3,opt,name=VoltageRated,proto3" json:"VoltageRated,omitempty"`       //	整车动力蓄电池额定总电压
	BatteryVendor   string       `protobuf:"bytes,4,opt,name=BatteryVendor,proto3" json:"BatteryVendor,omitempty"`     //	电池生产厂商名称
	BatterySequence *Int32Value  `protobuf:"bytes,5,opt,name=BatterySequence,proto3" json:"BatterySequence,omitempty"` //	电池组序号
	ProduceDate     string       `protobuf:"bytes,6,opt,name=ProduceDate,proto3" json:"ProduceDate,omitempty"`         //	电池组生产日期
	ChargeCount     *Int32Value  `protobuf:"bytes,7,opt,name=ChargeCount,proto3" json:"ChargeCount,omitempty"`         //	电池组充电次数
	RightIdentifier *Int32Value  `protobuf:"bytes,8,opt,name=RightIdentifier,proto3" json:"RightIdentifier,omitempty"` //	电池组产权标识
	BmsVersion      string       `protobuf:"bytes,9,opt,name=BmsVersion,proto3" json:"BmsVersion,omitempty"`           //	BMS软件版本号
	BmsAndCarId     string       `protobuf:"bytes,10,opt,name=BmsAndCarId,proto3" json:"BmsAndCarId,omitempty"`        //	BMS和车辆辨识报文
	BmsVIN          string       `protobuf:"bytes,11,opt,name=BmsVIN,proto3" json:"BmsVIN,omitempty"`                  //	BMS和车辆VIN
}

func (x *BmsIdentify) Reset() {
	*x = BmsIdentify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsIdentify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsIdentify) ProtoMessage() {}

func (x *BmsIdentify) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsIdentify.ProtoReflect.Descriptor instead.
func (*BmsIdentify) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{15}
}

func (x *BmsIdentify) GetBatteryType() *Int32Value {
	if x != nil {
		return x.BatteryType
	}
	return nil
}

func (x *BmsIdentify) GetCapacityRated() *DoubleValue {
	if x != nil {
		return x.CapacityRated
	}
	return nil
}

func (x *BmsIdentify) GetVoltageRated() *DoubleValue {
	if x != nil {
		return x.VoltageRated
	}
	return nil
}

func (x *BmsIdentify) GetBatteryVendor() string {
	if x != nil {
		return x.BatteryVendor
	}
	return ""
}

func (x *BmsIdentify) GetBatterySequence() *Int32Value {
	if x != nil {
		return x.BatterySequence
	}
	return nil
}

func (x *BmsIdentify) GetProduceDate() string {
	if x != nil {
		return x.ProduceDate
	}
	return ""
}

func (x *BmsIdentify) GetChargeCount() *Int32Value {
	if x != nil {
		return x.ChargeCount
	}
	return nil
}

func (x *BmsIdentify) GetRightIdentifier() *Int32Value {
	if x != nil {
		return x.RightIdentifier
	}
	return nil
}

func (x *BmsIdentify) GetBmsVersion() string {
	if x != nil {
		return x.BmsVersion
	}
	return ""
}

func (x *BmsIdentify) GetBmsAndCarId() string {
	if x != nil {
		return x.BmsAndCarId
	}
	return ""
}

func (x *BmsIdentify) GetBmsVIN() string {
	if x != nil {
		return x.BmsVIN
	}
	return ""
}

//BmsConfig-参数配置阶段BMS信息
type BmsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIndAllowedMax *DoubleValue `protobuf:"bytes,1,opt,name=VIndAllowedMax,proto3" json:"VIndAllowedMax,omitempty"` //	单体动力蓄电池最高允许充电电压
	IAllowedMax    *DoubleValue `protobuf:"bytes,2,opt,name=IAllowedMax,proto3" json:"IAllowedMax,omitempty"`       //	最高允许充电电流
	EnergyRated    *DoubleValue `protobuf:"bytes,3,opt,name=EnergyRated,proto3" json:"EnergyRated,omitempty"`       //	动力蓄电池标称总能量
	VAllowedMax    *DoubleValue `protobuf:"bytes,4,opt,name=VAllowedMax,proto3" json:"VAllowedMax,omitempty"`       //	最高允许充电总电压
	TAllowedMax    *DoubleValue `protobuf:"bytes,5,opt,name=TAllowedMax,proto3" json:"TAllowedMax,omitempty"`       //	最高允许温度
	StartSoc       *DoubleValue `protobuf:"bytes,6,opt,name=StartSoc,proto3" json:"StartSoc,omitempty"`             //	整车动力蓄电池荷电状态（SOC）
	VCurrent       *DoubleValue `protobuf:"bytes,7,opt,name=VCurrent,proto3" json:"VCurrent,omitempty"`             //	整车动力蓄电池当前电池电压
	VCOutputMax    *DoubleValue `protobuf:"bytes,8,opt,name=VCOutputMax,proto3" json:"VCOutputMax,omitempty"`       //	充电机最高输出电压
	VCOutputMin    *DoubleValue `protobuf:"bytes,9,opt,name=VCOutputMin,proto3" json:"VCOutputMin,omitempty"`       //	充电机最低输出电压
	ICOutputMax    *DoubleValue `protobuf:"bytes,10,opt,name=ICOutputMax,proto3" json:"ICOutputMax,omitempty"`      //	充电机最大输出电流
	ICOutputMin    *DoubleValue `protobuf:"bytes,11,opt,name=ICOutputMin,proto3" json:"ICOutputMin,omitempty"`      //	充电机最小输出电流
}

func (x *BmsConfig) Reset() {
	*x = BmsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsConfig) ProtoMessage() {}

func (x *BmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsConfig.ProtoReflect.Descriptor instead.
func (*BmsConfig) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{16}
}

func (x *BmsConfig) GetVIndAllowedMax() *DoubleValue {
	if x != nil {
		return x.VIndAllowedMax
	}
	return nil
}

func (x *BmsConfig) GetIAllowedMax() *DoubleValue {
	if x != nil {
		return x.IAllowedMax
	}
	return nil
}

func (x *BmsConfig) GetEnergyRated() *DoubleValue {
	if x != nil {
		return x.EnergyRated
	}
	return nil
}

func (x *BmsConfig) GetVAllowedMax() *DoubleValue {
	if x != nil {
		return x.VAllowedMax
	}
	return nil
}

func (x *BmsConfig) GetTAllowedMax() *DoubleValue {
	if x != nil {
		return x.TAllowedMax
	}
	return nil
}

func (x *BmsConfig) GetStartSoc() *DoubleValue {
	if x != nil {
		return x.StartSoc
	}
	return nil
}

func (x *BmsConfig) GetVCurrent() *DoubleValue {
	if x != nil {
		return x.VCurrent
	}
	return nil
}

func (x *BmsConfig) GetVCOutputMax() *DoubleValue {
	if x != nil {
		return x.VCOutputMax
	}
	return nil
}

func (x *BmsConfig) GetVCOutputMin() *DoubleValue {
	if x != nil {
		return x.VCOutputMin
	}
	return nil
}

func (x *BmsConfig) GetICOutputMax() *DoubleValue {
	if x != nil {
		return x.ICOutputMax
	}
	return nil
}

func (x *BmsConfig) GetICOutputMin() *DoubleValue {
	if x != nil {
		return x.ICOutputMin
	}
	return nil
}

//BmsChargeFinish-充电结束阶段BMS信息
type BmsChargeFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndSoc             *DoubleValue `protobuf:"bytes,1,opt,name=EndSoc,proto3" json:"EndSoc,omitempty"`                          //	中止荷电状态SOC（%）
	VMinIndividal      *DoubleValue `protobuf:"bytes,2,opt,name=VMinIndividal,proto3" json:"VMinIndividal,omitempty"`            //	动力蓄电池单体最低电压
	VMaxIndividal      *DoubleValue `protobuf:"bytes,3,opt,name=VMaxIndividal,proto3" json:"VMaxIndividal,omitempty"`            //	动力蓄电池单体最高电压
	TemperatureMin     *DoubleValue `protobuf:"bytes,4,opt,name=TemperatureMin,proto3" json:"TemperatureMin,omitempty"`          //	动力蓄电池最低温度
	TemperatureMax     *DoubleValue `protobuf:"bytes,5,opt,name=TemperatureMax,proto3" json:"TemperatureMax,omitempty"`          //	动力蓄电池最高温度
	BmsStopReason      *Int32Value  `protobuf:"bytes,6,opt,name=BmsStopReason,proto3" json:"BmsStopReason,omitempty"`            //	BMS中止充电原因
	BmsFaultReason     *Int32Value  `protobuf:"bytes,7,opt,name=BmsFaultReason,proto3" json:"BmsFaultReason,omitempty"`          //	BMS中止充电故障原因
	BmsErrorReason     *Int32Value  `protobuf:"bytes,8,opt,name=BmsErrorReason,proto3" json:"BmsErrorReason,omitempty"`          //	BMS中止充电错误原因
	ChargerStopReason  *Int32Value  `protobuf:"bytes,9,opt,name=ChargerStopReason,proto3" json:"ChargerStopReason,omitempty"`    //	充电机中止充电原因
	ChargerFaultReason *Int32Value  `protobuf:"bytes,10,opt,name=ChargerFaultReason,proto3" json:"ChargerFaultReason,omitempty"` //	充电机中止充电故障原因
	ChargerErrorReason *Int32Value  `protobuf:"bytes,11,opt,name=ChargerErrorReason,proto3" json:"ChargerErrorReason,omitempty"` //	充电机中止充电错误原因
	BmsEFrame          *Int32Value  `protobuf:"bytes,12,opt,name=BmsEFrame,proto3" json:"BmsEFrame,omitempty"`                   //	BMS错误报文
	ChargerEFrame      *Int32Value  `protobuf:"bytes,13,opt,name=ChargerEFrame,proto3" json:"ChargerEFrame,omitempty"`           //	充电机错误报文
}

func (x *BmsChargeFinish) Reset() {
	*x = BmsChargeFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsChargeFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsChargeFinish) ProtoMessage() {}

func (x *BmsChargeFinish) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsChargeFinish.ProtoReflect.Descriptor instead.
func (*BmsChargeFinish) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{17}
}

func (x *BmsChargeFinish) GetEndSoc() *DoubleValue {
	if x != nil {
		return x.EndSoc
	}
	return nil
}

func (x *BmsChargeFinish) GetVMinIndividal() *DoubleValue {
	if x != nil {
		return x.VMinIndividal
	}
	return nil
}

func (x *BmsChargeFinish) GetVMaxIndividal() *DoubleValue {
	if x != nil {
		return x.VMaxIndividal
	}
	return nil
}

func (x *BmsChargeFinish) GetTemperatureMin() *DoubleValue {
	if x != nil {
		return x.TemperatureMin
	}
	return nil
}

func (x *BmsChargeFinish) GetTemperatureMax() *DoubleValue {
	if x != nil {
		return x.TemperatureMax
	}
	return nil
}

func (x *BmsChargeFinish) GetBmsStopReason() *Int32Value {
	if x != nil {
		return x.BmsStopReason
	}
	return nil
}

func (x *BmsChargeFinish) GetBmsFaultReason() *Int32Value {
	if x != nil {
		return x.BmsFaultReason
	}
	return nil
}

func (x *BmsChargeFinish) GetBmsErrorReason() *Int32Value {
	if x != nil {
		return x.BmsErrorReason
	}
	return nil
}

func (x *BmsChargeFinish) GetChargerStopReason() *Int32Value {
	if x != nil {
		return x.ChargerStopReason
	}
	return nil
}

func (x *BmsChargeFinish) GetChargerFaultReason() *Int32Value {
	if x != nil {
		return x.ChargerFaultReason
	}
	return nil
}

func (x *BmsChargeFinish) GetChargerErrorReason() *Int32Value {
	if x != nil {
		return x.ChargerErrorReason
	}
	return nil
}

func (x *BmsChargeFinish) GetBmsEFrame() *Int32Value {
	if x != nil {
		return x.BmsEFrame
	}
	return nil
}

func (x *BmsChargeFinish) GetChargerEFrame() *Int32Value {
	if x != nil {
		return x.ChargerEFrame
	}
	return nil
}

//BmsCharging-充电阶段BMS信息
type BmsCharging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VDemand         *DoubleValue `protobuf:"bytes,1,opt,name=VDemand,proto3" json:"VDemand,omitempty"`                                               //	需求电压
	IDemand         *DoubleValue `protobuf:"bytes,2,opt,name=IDemand,proto3" json:"IDemand,omitempty"`                                               //	需求电流
	CurrentSoc      *DoubleValue `protobuf:"bytes,3,opt,name=CurrentSoc,proto3" json:"CurrentSoc,omitempty"`                                         //	当前SOC
	RemainTime      *DoubleValue `protobuf:"bytes,4,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`                                         //	估算剩余充电时间(分钟)
	ChargeMode      ChargingMode `protobuf:"varint,5,opt,name=ChargeMode,proto3,enum=gcu_fsm_vci.protobuf.ChargingMode" json:"ChargeMode,omitempty"` //	充电模式(恒压充/恒流充)
	VMeasure        *DoubleValue `protobuf:"bytes,6,opt,name=VMeasure,proto3" json:"VMeasure,omitempty"`                                             //	充电电压测量值
	IMeasure        *DoubleValue `protobuf:"bytes,7,opt,name=IMeasure,proto3" json:"IMeasure,omitempty"`                                             //	充电电流测量值
	VIndMax         *DoubleValue `protobuf:"bytes,8,opt,name=VIndMax,proto3" json:"VIndMax,omitempty"`                                               //	单体电池最高电压
	VIndMaxCode     *Int32Value  `protobuf:"bytes,9,opt,name=VIndMaxCode,proto3" json:"VIndMaxCode,omitempty"`                                       //	单体电池最高电压所在编号
	VIndMin         *DoubleValue `protobuf:"bytes,10,opt,name=VIndMin,proto3" json:"VIndMin,omitempty"`                                              //	单体电池最低电压
	VIndMinCode     *Int32Value  `protobuf:"bytes,11,opt,name=VIndMinCode,proto3" json:"VIndMinCode,omitempty"`                                      //	单体电池最低电压所在编号
	TMax            *DoubleValue `protobuf:"bytes,12,opt,name=TMax,proto3" json:"TMax,omitempty"`                                                    //	电池最高温度
	TMaxCode        *Int32Value  `protobuf:"bytes,13,opt,name=TMaxCode,proto3" json:"TMaxCode,omitempty"`                                            //	电池最高温度检测点编号
	TMin            *DoubleValue `protobuf:"bytes,14,opt,name=TMin,proto3" json:"TMin,omitempty"`                                                    //	电池最低温度
	TMinCode        *Int32Value  `protobuf:"bytes,15,opt,name=TMinCode,proto3" json:"TMinCode,omitempty"`                                            //	电池最低温度检测点编号
	ChargeAllow     *BoolEnum    `protobuf:"bytes,16,opt,name=ChargeAllow,proto3" json:"ChargeAllow,omitempty"`                                      //	是否允许充电
	VIndHigh        *BoolEnum    `protobuf:"bytes,17,opt,name=VIndHigh,proto3" json:"VIndHigh,omitempty"`                                            //	单体动力蓄电池电压是否过高
	VIndLow         *BoolEnum    `protobuf:"bytes,18,opt,name=VIndLow,proto3" json:"VIndLow,omitempty"`                                              //	单体动力蓄电池电压是否过低
	SoHigh          *BoolEnum    `protobuf:"bytes,19,opt,name=SoHigh,proto3" json:"SoHigh,omitempty"`                                                //	整车动力蓄电池荷电状态SOC是否过高
	SocLow          *BoolEnum    `protobuf:"bytes,20,opt,name=SocLow,proto3" json:"SocLow,omitempty"`                                                //	整车动力蓄电池荷电状态SOC是否过低
	IHigh           *BoolEnum    `protobuf:"bytes,21,opt,name=IHigh,proto3" json:"IHigh,omitempty"`                                                  //	动力蓄电池充电是否过电流
	THigh           *BoolEnum    `protobuf:"bytes,22,opt,name=THigh,proto3" json:"THigh,omitempty"`                                                  //	动力蓄电池温度是否过高
	Insulation      *BoolEnum    `protobuf:"bytes,23,opt,name=Insulation,proto3" json:"Insulation,omitempty"`                                        //	动力蓄电池绝缘状态是否绝缘
	OutputConnector *BoolEnum    `protobuf:"bytes,24,opt,name=OutputConnector,proto3" json:"OutputConnector,omitempty"`                              //	动力蓄电池输出连接器连接状态是否连接
	VIndMaxGroupNum *Int32Value  `protobuf:"bytes,25,opt,name=VIndMaxGroupNum,proto3" json:"VIndMaxGroupNum,omitempty"`                              //	最高单体动力蓄电池电压所在组号
	HeatingMode     *Int32Value  `protobuf:"bytes,26,opt,name=HeatingMode,proto3" json:"HeatingMode,omitempty"`                                      //	加热模式0：正常模式，1：充电加热模式，2：加热模式，3：保留
}

func (x *BmsCharging) Reset() {
	*x = BmsCharging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsCharging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsCharging) ProtoMessage() {}

func (x *BmsCharging) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsCharging.ProtoReflect.Descriptor instead.
func (*BmsCharging) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{18}
}

func (x *BmsCharging) GetVDemand() *DoubleValue {
	if x != nil {
		return x.VDemand
	}
	return nil
}

func (x *BmsCharging) GetIDemand() *DoubleValue {
	if x != nil {
		return x.IDemand
	}
	return nil
}

func (x *BmsCharging) GetCurrentSoc() *DoubleValue {
	if x != nil {
		return x.CurrentSoc
	}
	return nil
}

func (x *BmsCharging) GetRemainTime() *DoubleValue {
	if x != nil {
		return x.RemainTime
	}
	return nil
}

func (x *BmsCharging) GetChargeMode() ChargingMode {
	if x != nil {
		return x.ChargeMode
	}
	return ChargingMode_DefaultChargingMode
}

func (x *BmsCharging) GetVMeasure() *DoubleValue {
	if x != nil {
		return x.VMeasure
	}
	return nil
}

func (x *BmsCharging) GetIMeasure() *DoubleValue {
	if x != nil {
		return x.IMeasure
	}
	return nil
}

func (x *BmsCharging) GetVIndMax() *DoubleValue {
	if x != nil {
		return x.VIndMax
	}
	return nil
}

func (x *BmsCharging) GetVIndMaxCode() *Int32Value {
	if x != nil {
		return x.VIndMaxCode
	}
	return nil
}

func (x *BmsCharging) GetVIndMin() *DoubleValue {
	if x != nil {
		return x.VIndMin
	}
	return nil
}

func (x *BmsCharging) GetVIndMinCode() *Int32Value {
	if x != nil {
		return x.VIndMinCode
	}
	return nil
}

func (x *BmsCharging) GetTMax() *DoubleValue {
	if x != nil {
		return x.TMax
	}
	return nil
}

func (x *BmsCharging) GetTMaxCode() *Int32Value {
	if x != nil {
		return x.TMaxCode
	}
	return nil
}

func (x *BmsCharging) GetTMin() *DoubleValue {
	if x != nil {
		return x.TMin
	}
	return nil
}

func (x *BmsCharging) GetTMinCode() *Int32Value {
	if x != nil {
		return x.TMinCode
	}
	return nil
}

func (x *BmsCharging) GetChargeAllow() *BoolEnum {
	if x != nil {
		return x.ChargeAllow
	}
	return nil
}

func (x *BmsCharging) GetVIndHigh() *BoolEnum {
	if x != nil {
		return x.VIndHigh
	}
	return nil
}

func (x *BmsCharging) GetVIndLow() *BoolEnum {
	if x != nil {
		return x.VIndLow
	}
	return nil
}

func (x *BmsCharging) GetSoHigh() *BoolEnum {
	if x != nil {
		return x.SoHigh
	}
	return nil
}

func (x *BmsCharging) GetSocLow() *BoolEnum {
	if x != nil {
		return x.SocLow
	}
	return nil
}

func (x *BmsCharging) GetIHigh() *BoolEnum {
	if x != nil {
		return x.IHigh
	}
	return nil
}

func (x *BmsCharging) GetTHigh() *BoolEnum {
	if x != nil {
		return x.THigh
	}
	return nil
}

func (x *BmsCharging) GetInsulation() *BoolEnum {
	if x != nil {
		return x.Insulation
	}
	return nil
}

func (x *BmsCharging) GetOutputConnector() *BoolEnum {
	if x != nil {
		return x.OutputConnector
	}
	return nil
}

func (x *BmsCharging) GetVIndMaxGroupNum() *Int32Value {
	if x != nil {
		return x.VIndMaxGroupNum
	}
	return nil
}

func (x *BmsCharging) GetHeatingMode() *Int32Value {
	if x != nil {
		return x.HeatingMode
	}
	return nil
}

// BMS重连事件
type BMSReConnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOutState   *Int32Value    `protobuf:"bytes,1,opt,name=TimeOutState,proto3" json:"TimeOutState,omitempty"`                                               //	超时事件(ACK 发生/NACK 未发生)
	BMSTimeoutType BMSTimeoutEnum `protobuf:"varint,2,opt,name=BMSTimeoutType,proto3,enum=gcu_fsm_vci.protobuf.BMSTimeoutEnum" json:"BMSTimeoutType,omitempty"` //	超时类型（BHM/BRM/BCP/BCS/BCL/BST/BSD）
	ReconnectCnt   *Int32Value    `protobuf:"bytes,3,opt,name=ReconnectCnt,proto3" json:"ReconnectCnt,omitempty"`                                               //	超时次数
	NextState      *Int32Value    `protobuf:"bytes,4,opt,name=NextState,proto3" json:"NextState,omitempty"`                                                     //	下一个重连状态
}

func (x *BMSReConnectEvent) Reset() {
	*x = BMSReConnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSReConnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSReConnectEvent) ProtoMessage() {}

func (x *BMSReConnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSReConnectEvent.ProtoReflect.Descriptor instead.
func (*BMSReConnectEvent) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{19}
}

func (x *BMSReConnectEvent) GetTimeOutState() *Int32Value {
	if x != nil {
		return x.TimeOutState
	}
	return nil
}

func (x *BMSReConnectEvent) GetBMSTimeoutType() BMSTimeoutEnum {
	if x != nil {
		return x.BMSTimeoutType
	}
	return BMSTimeoutEnum_DefaultTimeout
}

func (x *BMSReConnectEvent) GetReconnectCnt() *Int32Value {
	if x != nil {
		return x.ReconnectCnt
	}
	return nil
}

func (x *BMSReConnectEvent) GetNextState() *Int32Value {
	if x != nil {
		return x.NextState
	}
	return nil
}

//需求上传信息
type GunDesire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VDemand            *FloatValue `protobuf:"bytes,1,opt,name=VDemand,proto3" json:"VDemand,omitempty"`                       //	需求电压
	IDemand            *FloatValue `protobuf:"bytes,2,opt,name=IDemand,proto3" json:"IDemand,omitempty"`                       //	需求电流
	VPTPDemand         *FloatValue `protobuf:"bytes,3,opt,name=VPTPDemand,proto3" json:"VPTPDemand,omitempty"`                 //	模块PTP开机电压
	IPTPDemand         *FloatValue `protobuf:"bytes,4,opt,name=IPTPDemand,proto3" json:"IPTPDemand,omitempty"`                 //	模块PTP开机电流
	OutConnectorDemand *BoolEnum   `protobuf:"bytes,5,opt,name=OutConnectorDemand,proto3" json:"OutConnectorDemand,omitempty"` //	输出接触器期望状态（吸合/断开）
}

func (x *GunDesire) Reset() {
	*x = GunDesire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunDesire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunDesire) ProtoMessage() {}

func (x *GunDesire) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunDesire.ProtoReflect.Descriptor instead.
func (*GunDesire) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{20}
}

func (x *GunDesire) GetVDemand() *FloatValue {
	if x != nil {
		return x.VDemand
	}
	return nil
}

func (x *GunDesire) GetIDemand() *FloatValue {
	if x != nil {
		return x.IDemand
	}
	return nil
}

func (x *GunDesire) GetVPTPDemand() *FloatValue {
	if x != nil {
		return x.VPTPDemand
	}
	return nil
}

func (x *GunDesire) GetIPTPDemand() *FloatValue {
	if x != nil {
		return x.IPTPDemand
	}
	return nil
}

func (x *GunDesire) GetOutConnectorDemand() *BoolEnum {
	if x != nil {
		return x.OutConnectorDemand
	}
	return nil
}

//停机上传信息
type GunHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopState *BoolEnum  `protobuf:"bytes,1,opt,name=StopState,proto3" json:"StopState,omitempty"`                                      //	中止状态(ACK 中止，NACK未中止)
	HaltType  HaltReason `protobuf:"varint,2,opt,name=HaltType,proto3,enum=gcu_fsm_vci.protobuf.HaltReason" json:"HaltType,omitempty"`  //	终止原因
	Faultcode FaultEnum  `protobuf:"varint,3,opt,name=Faultcode,proto3,enum=gcu_fsm_vci.protobuf.FaultEnum" json:"Faultcode,omitempty"` //	故障码
}

func (x *GunHalt) Reset() {
	*x = GunHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunHalt) ProtoMessage() {}

func (x *GunHalt) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunHalt.ProtoReflect.Descriptor instead.
func (*GunHalt) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{21}
}

func (x *GunHalt) GetStopState() *BoolEnum {
	if x != nil {
		return x.StopState
	}
	return nil
}

func (x *GunHalt) GetHaltType() HaltReason {
	if x != nil {
		return x.HaltType
	}
	return HaltReason_DefaultReason
}

func (x *GunHalt) GetFaultcode() FaultEnum {
	if x != nil {
		return x.Faultcode
	}
	return FaultEnum_DefaultFault
}

//关注信息
type GunCared struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocaOK       *BoolEnum    `protobuf:"bytes,1,opt,name=AllocaOK,proto3" json:"AllocaOK,omitempty"`             //是否分配到模块
	OutConnectorFb *BoolEnum    `protobuf:"bytes,2,opt,name=OutConnectorFb,proto3" json:"OutConnectorFb,omitempty"` //输出接触器反馈状态（吸合/断开）
	MeterVol       *DoubleValue `protobuf:"bytes,3,opt,name=MeterVol,proto3" json:"MeterVol,omitempty"`             //电表电压
	MeterCurr      *DoubleValue `protobuf:"bytes,4,opt,name=MeterCurr,proto3" json:"MeterCurr,omitempty"`           //电表电流
	BatVol         *DoubleValue `protobuf:"bytes,5,opt,name=BatVol,proto3" json:"BatVol,omitempty"`                 //输出接触器后级电压
	ModVol         *DoubleValue `protobuf:"bytes,6,opt,name=ModVol,proto3" json:"ModVol,omitempty"`                 //输出接触器前级电压
}

func (x *GunCared) Reset() {
	*x = GunCared{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunCared) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunCared) ProtoMessage() {}

func (x *GunCared) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunCared.ProtoReflect.Descriptor instead.
func (*GunCared) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{22}
}

func (x *GunCared) GetAllocaOK() *BoolEnum {
	if x != nil {
		return x.AllocaOK
	}
	return nil
}

func (x *GunCared) GetOutConnectorFb() *BoolEnum {
	if x != nil {
		return x.OutConnectorFb
	}
	return nil
}

func (x *GunCared) GetMeterVol() *DoubleValue {
	if x != nil {
		return x.MeterVol
	}
	return nil
}

func (x *GunCared) GetMeterCurr() *DoubleValue {
	if x != nil {
		return x.MeterCurr
	}
	return nil
}

func (x *GunCared) GetBatVol() *DoubleValue {
	if x != nil {
		return x.BatVol
	}
	return nil
}

func (x *GunCared) GetModVol() *DoubleValue {
	if x != nil {
		return x.ModVol
	}
	return nil
}

//充电线程故障上报
type ChargingFaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultName     FaultEnum     `protobuf:"varint,1,opt,name=FaultName,proto3,enum=gcu_fsm_vci.protobuf.FaultEnum" json:"FaultName,omitempty"`  //	故障名称枚举值
	FaultType     FaultState    `protobuf:"varint,2,opt,name=FaultType,proto3,enum=gcu_fsm_vci.protobuf.FaultState" json:"FaultType,omitempty"` //	故障状态
	FaultTime     *DateTimeLong `protobuf:"bytes,3,opt,name=FaultTime,proto3" json:"FaultTime,omitempty"`                                       //	故障发生时间
	FaultDownTime *DateTimeLong `protobuf:"bytes,4,opt,name=FaultDownTime,proto3" json:"FaultDownTime,omitempty"`                               //	故障恢复时间
}

func (x *ChargingFaultState) Reset() {
	*x = ChargingFaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingFaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingFaultState) ProtoMessage() {}

func (x *ChargingFaultState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingFaultState.ProtoReflect.Descriptor instead.
func (*ChargingFaultState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{23}
}

func (x *ChargingFaultState) GetFaultName() FaultEnum {
	if x != nil {
		return x.FaultName
	}
	return FaultEnum_DefaultFault
}

func (x *ChargingFaultState) GetFaultType() FaultState {
	if x != nil {
		return x.FaultType
	}
	return FaultState_DefaultState
}

func (x *ChargingFaultState) GetFaultTime() *DateTimeLong {
	if x != nil {
		return x.FaultTime
	}
	return nil
}

func (x *ChargingFaultState) GetFaultDownTime() *DateTimeLong {
	if x != nil {
		return x.FaultDownTime
	}
	return nil
}

//插枪线程恢复数据
type PluggedRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *Uint32Value `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	当前描述枪头编号，与CAN总线编号一致(0~5)
	ChargerState *BoolEnum    `protobuf:"bytes,2,opt,name=ChargerState,proto3" json:"ChargerState,omitempty"` //	充电机状态（开机/关机）（father使用）
	IsVINStart   *BoolEnum    `protobuf:"bytes,3,opt,name=IsVINStart,proto3" json:"IsVINStart,omitempty"`     //	是否是VIN启机 （father使用）
}

func (x *PluggedRecover) Reset() {
	*x = PluggedRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PluggedRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PluggedRecover) ProtoMessage() {}

func (x *PluggedRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PluggedRecover.ProtoReflect.Descriptor instead.
func (*PluggedRecover) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{24}
}

func (x *PluggedRecover) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *PluggedRecover) GetChargerState() *BoolEnum {
	if x != nil {
		return x.ChargerState
	}
	return nil
}

func (x *PluggedRecover) GetIsVINStart() *BoolEnum {
	if x != nil {
		return x.IsVINStart
	}
	return nil
}

//充电线程恢复数据
type ChargingRecover struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            *Uint32Value `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                        //	当前描述枪头编号，与CAN总线编号一致(0~5)
	FaultState1   *Int32Value  `protobuf:"bytes,2,opt,name=FaultState1,proto3" json:"FaultState1,omitempty"`      //	故障列表1 与枪故障状态按位一一对应
	FaultState2   *Int32Value  `protobuf:"bytes,3,opt,name=FaultState2,proto3" json:"FaultState2,omitempty"`      //	故障列表2
	FaultState3   *Int32Value  `protobuf:"bytes,4,opt,name=FaultState3,proto3" json:"FaultState3,omitempty"`      //	故障列表3
	BMSCommState  *Int32Value  `protobuf:"bytes,5,opt,name=BMSCommState,proto3" json:"BMSCommState,omitempty"`    //	BMS交互状态
	BMSRecvState  *Int32Value  `protobuf:"bytes,6,opt,name=BMSRecvState,proto3" json:"BMSRecvState,omitempty"`    //	接收BMS报文状态
	BMSType       *Int32Value  `protobuf:"bytes,7,opt,name=BMSType,proto3" json:"BMSType,omitempty"`              //	BMS类型（实车/模拟器）
	BMSTimeoutCnt *Int32Value  `protobuf:"bytes,8,opt,name=BMSTimeoutCnt,proto3" json:"BMSTimeoutCnt,omitempty"`  //	BMS超时次数
	ElockState    *Int32Value  `protobuf:"bytes,9,opt,name=ElockState,proto3" json:"ElockState,omitempty"`        //	电子锁状态（开/关）
	AuxPowerState *Int32Value  `protobuf:"bytes,10,opt,name=AuxPowerState,proto3" json:"AuxPowerState,omitempty"` //	BMS辅源状态（开/关）
	BMSCurrMax    *DoubleValue `protobuf:"bytes,11,opt,name=BMSCurrMax,proto3" json:"BMSCurrMax,omitempty"`       //	BMS最大允许充电电流
	BMSVolMax     *DoubleValue `protobuf:"bytes,12,opt,name=BMSVolMax,proto3" json:"BMSVolMax,omitempty"`         //	BMS最大允许充电电压
	CellVolMax    *DoubleValue `protobuf:"bytes,13,opt,name=CellVolMax,proto3" json:"CellVolMax,omitempty"`       //	单体允许最大电压
	CellTempMax   *DoubleValue `protobuf:"bytes,14,opt,name=CellTempMax,proto3" json:"CellTempMax,omitempty"`     //	单体允许最大温度
	InsultState   *Int32Value  `protobuf:"bytes,15,opt,name=InsultState,proto3" json:"InsultState,omitempty"`     //	绝缘检测状态
	InsultResult  *Int32Value  `protobuf:"bytes,16,opt,name=InsultResult,proto3" json:"InsultResult,omitempty"`   //	绝缘检测结果（Pass/Warn/Fail）
	InsultVol     *DoubleValue `protobuf:"bytes,17,opt,name=InsultVol,proto3" json:"InsultVol,omitempty"`         //	绝缘检测电压
}

func (x *ChargingRecover) Reset() {
	*x = ChargingRecover{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargingRecover) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargingRecover) ProtoMessage() {}

func (x *ChargingRecover) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargingRecover.ProtoReflect.Descriptor instead.
func (*ChargingRecover) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{25}
}

func (x *ChargingRecover) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *ChargingRecover) GetFaultState1() *Int32Value {
	if x != nil {
		return x.FaultState1
	}
	return nil
}

func (x *ChargingRecover) GetFaultState2() *Int32Value {
	if x != nil {
		return x.FaultState2
	}
	return nil
}

func (x *ChargingRecover) GetFaultState3() *Int32Value {
	if x != nil {
		return x.FaultState3
	}
	return nil
}

func (x *ChargingRecover) GetBMSCommState() *Int32Value {
	if x != nil {
		return x.BMSCommState
	}
	return nil
}

func (x *ChargingRecover) GetBMSRecvState() *Int32Value {
	if x != nil {
		return x.BMSRecvState
	}
	return nil
}

func (x *ChargingRecover) GetBMSType() *Int32Value {
	if x != nil {
		return x.BMSType
	}
	return nil
}

func (x *ChargingRecover) GetBMSTimeoutCnt() *Int32Value {
	if x != nil {
		return x.BMSTimeoutCnt
	}
	return nil
}

func (x *ChargingRecover) GetElockState() *Int32Value {
	if x != nil {
		return x.ElockState
	}
	return nil
}

func (x *ChargingRecover) GetAuxPowerState() *Int32Value {
	if x != nil {
		return x.AuxPowerState
	}
	return nil
}

func (x *ChargingRecover) GetBMSCurrMax() *DoubleValue {
	if x != nil {
		return x.BMSCurrMax
	}
	return nil
}

func (x *ChargingRecover) GetBMSVolMax() *DoubleValue {
	if x != nil {
		return x.BMSVolMax
	}
	return nil
}

func (x *ChargingRecover) GetCellVolMax() *DoubleValue {
	if x != nil {
		return x.CellVolMax
	}
	return nil
}

func (x *ChargingRecover) GetCellTempMax() *DoubleValue {
	if x != nil {
		return x.CellTempMax
	}
	return nil
}

func (x *ChargingRecover) GetInsultState() *Int32Value {
	if x != nil {
		return x.InsultState
	}
	return nil
}

func (x *ChargingRecover) GetInsultResult() *Int32Value {
	if x != nil {
		return x.InsultResult
	}
	return nil
}

func (x *ChargingRecover) GetInsultVol() *DoubleValue {
	if x != nil {
		return x.InsultVol
	}
	return nil
}

//VCI主线程注册信息帧(0x00)
type VehicleChargingInterfaceLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleChargingProtoVersion string        `protobuf:"bytes,1,opt,name=VehicleChargingProtoVersion,proto3" json:"VehicleChargingProtoVersion,omitempty"`            //	车桩交互协议版本号
	VehicleChargingVendor       string        `protobuf:"bytes,2,opt,name=VehicleChargingVendor,proto3" json:"VehicleChargingVendor,omitempty"`                        //	车桩交互模块版本号
	SelfCheckRul                SelfCheckType `protobuf:"varint,3,opt,name=SelfCheckRul,proto3,enum=gcu_fsm_vci.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"` //	车桩交互模块自检状态
}

func (x *VehicleChargingInterfaceLogin) Reset() {
	*x = VehicleChargingInterfaceLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleChargingInterfaceLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleChargingInterfaceLogin) ProtoMessage() {}

func (x *VehicleChargingInterfaceLogin) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleChargingInterfaceLogin.ProtoReflect.Descriptor instead.
func (*VehicleChargingInterfaceLogin) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{26}
}

func (x *VehicleChargingInterfaceLogin) GetVehicleChargingProtoVersion() string {
	if x != nil {
		return x.VehicleChargingProtoVersion
	}
	return ""
}

func (x *VehicleChargingInterfaceLogin) GetVehicleChargingVendor() string {
	if x != nil {
		return x.VehicleChargingVendor
	}
	return ""
}

func (x *VehicleChargingInterfaceLogin) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

//VCI主线程注册信息帧.响应(0x80)
type VehicleChargingInterfaceLoginAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VehicleChargingProtoVersion string             `protobuf:"bytes,1,opt,name=VehicleChargingProtoVersion,proto3" json:"VehicleChargingProtoVersion,omitempty"`            //	车桩交互协议版本号
	MainStateMachineVendor      string             `protobuf:"bytes,2,opt,name=MainStateMachineVendor,proto3" json:"MainStateMachineVendor,omitempty"`                      //	主状态机模块版本号
	SelfCheckRul                SelfCheckType      `protobuf:"varint,3,opt,name=SelfCheckRul,proto3,enum=gcu_fsm_vci.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"` //	主状态机模块自检状态
	EnableServerList            *EnableServer      `protobuf:"bytes,4,opt,name=EnableServerList,proto3" json:"EnableServerList,omitempty"`                                  //	主状态机可用服务列表
	VCIPramList                 []*VCIPram         `protobuf:"bytes,5,rep,name=VCIPramList,proto3" json:"VCIPramList,omitempty"`                                            //	车桩交互模块当前配置
	SysParameterList            *SysParameter      `protobuf:"bytes,6,opt,name=SysParameterList,proto3" json:"SysParameterList,omitempty"`                                  //	系统参数配置
	PluggedList                 []*PluggedRecover  `protobuf:"bytes,7,rep,name=PluggedList,proto3" json:"PluggedList,omitempty"`                                            //	插枪线程恢复数据
	ChargingList                []*ChargingRecover `protobuf:"bytes,8,rep,name=ChargingList,proto3" json:"ChargingList,omitempty"`                                          //	充电线程恢复数据
}

func (x *VehicleChargingInterfaceLoginAns) Reset() {
	*x = VehicleChargingInterfaceLoginAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VehicleChargingInterfaceLoginAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VehicleChargingInterfaceLoginAns) ProtoMessage() {}

func (x *VehicleChargingInterfaceLoginAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VehicleChargingInterfaceLoginAns.ProtoReflect.Descriptor instead.
func (*VehicleChargingInterfaceLoginAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{27}
}

func (x *VehicleChargingInterfaceLoginAns) GetVehicleChargingProtoVersion() string {
	if x != nil {
		return x.VehicleChargingProtoVersion
	}
	return ""
}

func (x *VehicleChargingInterfaceLoginAns) GetMainStateMachineVendor() string {
	if x != nil {
		return x.MainStateMachineVendor
	}
	return ""
}

func (x *VehicleChargingInterfaceLoginAns) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

func (x *VehicleChargingInterfaceLoginAns) GetEnableServerList() *EnableServer {
	if x != nil {
		return x.EnableServerList
	}
	return nil
}

func (x *VehicleChargingInterfaceLoginAns) GetVCIPramList() []*VCIPram {
	if x != nil {
		return x.VCIPramList
	}
	return nil
}

func (x *VehicleChargingInterfaceLoginAns) GetSysParameterList() *SysParameter {
	if x != nil {
		return x.SysParameterList
	}
	return nil
}

func (x *VehicleChargingInterfaceLoginAns) GetPluggedList() []*PluggedRecover {
	if x != nil {
		return x.PluggedList
	}
	return nil
}

func (x *VehicleChargingInterfaceLoginAns) GetChargingList() []*ChargingRecover {
	if x != nil {
		return x.ChargingList
	}
	return nil
}

//VCI主线程心跳周期信息帧(0x02)
type VCImainHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr *Uint32Value     `protobuf:"bytes,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"` //	心跳计数
	GunBaseList  []*GunBaseStatus `protobuf:"bytes,2,rep,name=GunBaseList,proto3" json:"GunBaseList,omitempty"`   //	枪头基础状态信息队列
	CurrentTime  *DateTimeLong    `protobuf:"bytes,3,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`   //	心跳时间戳
	Interval     *Uint32Value     `protobuf:"bytes,4,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	心跳信息间隔（毫秒）
}

func (x *VCImainHeartbeatReq) Reset() {
	*x = VCImainHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCImainHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCImainHeartbeatReq) ProtoMessage() {}

func (x *VCImainHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCImainHeartbeatReq.ProtoReflect.Descriptor instead.
func (*VCImainHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{28}
}

func (x *VCImainHeartbeatReq) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCImainHeartbeatReq) GetGunBaseList() []*GunBaseStatus {
	if x != nil {
		return x.GunBaseList
	}
	return nil
}

func (x *VCImainHeartbeatReq) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCImainHeartbeatReq) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//VCI主线程心跳周期信息帧.响应(0x82)
type VCImainHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr     *Uint32Value  `protobuf:"bytes,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`         //	心跳计数
	VCIPramList      []*VCIPram    `protobuf:"bytes,2,rep,name=VCIPramList,proto3" json:"VCIPramList,omitempty"`           //	车桩交互模块更新配置
	SysParameterList *SysParameter `protobuf:"bytes,3,opt,name=SysParameterList,proto3" json:"SysParameterList,omitempty"` //	系统参数更新配置
	CurrentTime      *DateTimeLong `protobuf:"bytes,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`           //	心跳时间戳
	Interval         *Uint32Value  `protobuf:"bytes,5,opt,name=Interval,proto3" json:"Interval,omitempty"`                 //	心跳信息间隔（毫秒）
}

func (x *VCImainHeartbeatAns) Reset() {
	*x = VCImainHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[29]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCImainHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCImainHeartbeatAns) ProtoMessage() {}

func (x *VCImainHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[29]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCImainHeartbeatAns.ProtoReflect.Descriptor instead.
func (*VCImainHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{29}
}

func (x *VCImainHeartbeatAns) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCImainHeartbeatAns) GetVCIPramList() []*VCIPram {
	if x != nil {
		return x.VCIPramList
	}
	return nil
}

func (x *VCImainHeartbeatAns) GetSysParameterList() *SysParameter {
	if x != nil {
		return x.SysParameterList
	}
	return nil
}

func (x *VCImainHeartbeatAns) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCImainHeartbeatAns) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//插枪线程心跳周期信息帧(0x04)
type VCIPluggedHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *Uint32Value      `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	当前描述枪头编号，与CAN总线编号一致(0~5)
	HeartbeatCtr *Uint32Value      `protobuf:"bytes,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"` //	心跳计数
	GunStatus    *GunPluggedStatus `protobuf:"bytes,3,opt,name=GunStatus,proto3" json:"GunStatus,omitempty"`       //	枪头链接阶段状态信息
	CurrentTime  *DateTimeLong     `protobuf:"bytes,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`   //	心跳时间戳
	Interval     *Uint32Value      `protobuf:"bytes,5,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	心跳信息间隔（毫秒）
}

func (x *VCIPluggedHeartbeatReq) Reset() {
	*x = VCIPluggedHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[30]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIPluggedHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIPluggedHeartbeatReq) ProtoMessage() {}

func (x *VCIPluggedHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[30]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIPluggedHeartbeatReq.ProtoReflect.Descriptor instead.
func (*VCIPluggedHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{30}
}

func (x *VCIPluggedHeartbeatReq) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIPluggedHeartbeatReq) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCIPluggedHeartbeatReq) GetGunStatus() *GunPluggedStatus {
	if x != nil {
		return x.GunStatus
	}
	return nil
}

func (x *VCIPluggedHeartbeatReq) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCIPluggedHeartbeatReq) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//插枪线程心跳周期信息帧.响应(0x84)
type VCIPluggedHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *Uint32Value         `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	当前描述枪头编号，与CAN总线编号一致(0~5)
	HeartbeatCtr *Uint32Value         `protobuf:"bytes,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"` //	心跳计数
	VCIPramList  *VCIPram             `protobuf:"bytes,3,opt,name=VCIPramList,proto3" json:"VCIPramList,omitempty"`   //	车桩交互模块更新配置
	SysCtrl      *SysCtrlPluggedStage `protobuf:"bytes,4,opt,name=SysCtrl,proto3" json:"SysCtrl,omitempty"`           //	枪头链接阶段控制命令
	CurrentTime  *DateTimeLong        `protobuf:"bytes,5,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`   //	心跳时间戳
	Interval     *Uint32Value         `protobuf:"bytes,6,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	心跳信息间隔（毫秒）
}

func (x *VCIPluggedHeartbeatAns) Reset() {
	*x = VCIPluggedHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[31]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIPluggedHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIPluggedHeartbeatAns) ProtoMessage() {}

func (x *VCIPluggedHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[31]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIPluggedHeartbeatAns.ProtoReflect.Descriptor instead.
func (*VCIPluggedHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{31}
}

func (x *VCIPluggedHeartbeatAns) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIPluggedHeartbeatAns) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCIPluggedHeartbeatAns) GetVCIPramList() *VCIPram {
	if x != nil {
		return x.VCIPramList
	}
	return nil
}

func (x *VCIPluggedHeartbeatAns) GetSysCtrl() *SysCtrlPluggedStage {
	if x != nil {
		return x.SysCtrl
	}
	return nil
}

func (x *VCIPluggedHeartbeatAns) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCIPluggedHeartbeatAns) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//充电线程心跳周期信息帧(0x06)
type VCIChargingHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 *Uint32Value          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                                  //	当前描述枪头编号，与CAN总线编号一致(0~5)
	HeartbeatCtr       *Uint32Value          `protobuf:"bytes,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`              //	心跳计数
	GunStatus0         *BmsShakehands        `protobuf:"bytes,3,opt,name=GunStatus0,proto3" json:"GunStatus0,omitempty"`                  //	枪头充电阶段状态信息
	GunStatus1         *BmsIdentify          `protobuf:"bytes,4,opt,name=GunStatus1,proto3" json:"GunStatus1,omitempty"`                  //	枪头充电阶段状态信息
	GunStatus2         *BmsConfig            `protobuf:"bytes,5,opt,name=GunStatus2,proto3" json:"GunStatus2,omitempty"`                  //	枪头充电阶段状态信息
	GunStatus3         *BmsCharging          `protobuf:"bytes,6,opt,name=GunStatus3,proto3" json:"GunStatus3,omitempty"`                  //	枪头充电阶段状态信息
	GunStatus4         *BmsChargeFinish      `protobuf:"bytes,7,opt,name=GunStatus4,proto3" json:"GunStatus4,omitempty"`                  //	枪头充电阶段状态信息
	ReConnect          *BMSReConnectEvent    `protobuf:"bytes,8,opt,name=ReConnect,proto3" json:"ReConnect,omitempty"`                    //	BMS重连事件
	FaultList          []*ChargingFaultState `protobuf:"bytes,9,rep,name=FaultList,proto3" json:"FaultList,omitempty"`                    //	故障列表
	ChargingRecoverMsg *ChargingRecover      `protobuf:"bytes,10,opt,name=ChargingRecoverMsg,proto3" json:"ChargingRecoverMsg,omitempty"` //	恢复消息体
	CurrentTime        *DateTimeLong         `protobuf:"bytes,11,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`               //	心跳时间戳
	Interval           *Uint32Value          `protobuf:"bytes,12,opt,name=Interval,proto3" json:"Interval,omitempty"`                     //	心跳信息间隔（毫秒）
}

func (x *VCIChargingHeartbeatReq) Reset() {
	*x = VCIChargingHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[32]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargingHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargingHeartbeatReq) ProtoMessage() {}

func (x *VCIChargingHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[32]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargingHeartbeatReq.ProtoReflect.Descriptor instead.
func (*VCIChargingHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{32}
}

func (x *VCIChargingHeartbeatReq) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetGunStatus0() *BmsShakehands {
	if x != nil {
		return x.GunStatus0
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetGunStatus1() *BmsIdentify {
	if x != nil {
		return x.GunStatus1
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetGunStatus2() *BmsConfig {
	if x != nil {
		return x.GunStatus2
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetGunStatus3() *BmsCharging {
	if x != nil {
		return x.GunStatus3
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetGunStatus4() *BmsChargeFinish {
	if x != nil {
		return x.GunStatus4
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetReConnect() *BMSReConnectEvent {
	if x != nil {
		return x.ReConnect
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetFaultList() []*ChargingFaultState {
	if x != nil {
		return x.FaultList
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetChargingRecoverMsg() *ChargingRecover {
	if x != nil {
		return x.ChargingRecoverMsg
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCIChargingHeartbeatReq) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//充电线程心跳周期信息帧.响应(0x86)
type VCIChargingHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *Uint32Value  `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	当前描述枪头编号，与CAN总线编号一致(0~5)
	HeartbeatCtr *Uint32Value  `protobuf:"bytes,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"` //	心跳计数
	GunCaredMsg  *GunCared     `protobuf:"bytes,3,opt,name=GunCaredMsg,proto3" json:"GunCaredMsg,omitempty"`   //	枪头充电阶段关注状态
	CurrentTime  *DateTimeLong `protobuf:"bytes,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`   //	心跳时间戳
	Interval     *Uint32Value  `protobuf:"bytes,5,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	心跳信息间隔（毫秒）
}

func (x *VCIChargingHeartbeatAns) Reset() {
	*x = VCIChargingHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[33]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargingHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargingHeartbeatAns) ProtoMessage() {}

func (x *VCIChargingHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[33]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargingHeartbeatAns.ProtoReflect.Descriptor instead.
func (*VCIChargingHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{33}
}

func (x *VCIChargingHeartbeatAns) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIChargingHeartbeatAns) GetHeartbeatCtr() *Uint32Value {
	if x != nil {
		return x.HeartbeatCtr
	}
	return nil
}

func (x *VCIChargingHeartbeatAns) GetGunCaredMsg() *GunCared {
	if x != nil {
		return x.GunCaredMsg
	}
	return nil
}

func (x *VCIChargingHeartbeatAns) GetCurrentTime() *DateTimeLong {
	if x != nil {
		return x.CurrentTime
	}
	return nil
}

func (x *VCIChargingHeartbeatAns) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//充电线程realtimepush
//充电线程突发上传信息帧(0x08)
type VCIChargingRTpush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           *Uint32Value          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	当前描述枪头编号，与CAN总线编号一致(0~5)
	RTpushCtr    *Uint32Value          `protobuf:"bytes,2,opt,name=RTpushCtr,proto3" json:"RTpushCtr,omitempty"`       //	推送计数
	GunDesireMsg *GunDesire            `protobuf:"bytes,3,opt,name=GunDesireMsg,proto3" json:"GunDesireMsg,omitempty"` //	枪头充电阶段状态信息
	GunHaltMsg   *GunHalt              `protobuf:"bytes,4,opt,name=GunHaltMsg,proto3" json:"GunHaltMsg,omitempty"`     //	枪头充电阶段状态信息
	ReConnect    *BMSReConnectEvent    `protobuf:"bytes,5,opt,name=ReConnect,proto3" json:"ReConnect,omitempty"`       //	BMS重连事件
	FaultList    []*ChargingFaultState `protobuf:"bytes,6,rep,name=FaultList,proto3" json:"FaultList,omitempty"`       //	故障列表
	Interval     *Uint32Value          `protobuf:"bytes,7,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	反馈超时预期（毫秒）
}

func (x *VCIChargingRTpush) Reset() {
	*x = VCIChargingRTpush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[34]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargingRTpush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargingRTpush) ProtoMessage() {}

func (x *VCIChargingRTpush) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[34]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargingRTpush.ProtoReflect.Descriptor instead.
func (*VCIChargingRTpush) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{34}
}

func (x *VCIChargingRTpush) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIChargingRTpush) GetRTpushCtr() *Uint32Value {
	if x != nil {
		return x.RTpushCtr
	}
	return nil
}

func (x *VCIChargingRTpush) GetGunDesireMsg() *GunDesire {
	if x != nil {
		return x.GunDesireMsg
	}
	return nil
}

func (x *VCIChargingRTpush) GetGunHaltMsg() *GunHalt {
	if x != nil {
		return x.GunHaltMsg
	}
	return nil
}

func (x *VCIChargingRTpush) GetReConnect() *BMSReConnectEvent {
	if x != nil {
		return x.ReConnect
	}
	return nil
}

func (x *VCIChargingRTpush) GetFaultList() []*ChargingFaultState {
	if x != nil {
		return x.FaultList
	}
	return nil
}

func (x *VCIChargingRTpush) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

//充电线程realtimepull
//充电线程突发接收信息帧(0x88)
type VCIChargingRTpull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        *Uint32Value          `protobuf:"bytes,1,opt,name=ID,proto3" json:"ID,omitempty"`               //	当前描述枪头编号，与CAN总线编号一致(0~5)
	RTpullCtr *Uint32Value          `protobuf:"bytes,2,opt,name=RTpullCtr,proto3" json:"RTpullCtr,omitempty"` //	推送计数
	SysCtrl   *SysCtrlChargingStage `protobuf:"bytes,3,opt,name=SysCtrl,proto3" json:"SysCtrl,omitempty"`     //	枪头充电阶段控制命令
	FaultList []*ChargingFaultState `protobuf:"bytes,4,rep,name=FaultList,proto3" json:"FaultList,omitempty"` //	故障列表
	Interval  *Uint32Value          `protobuf:"bytes,5,opt,name=Interval,proto3" json:"Interval,omitempty"`   //	反馈超时预期（毫秒）
}

func (x *VCIChargingRTpull) Reset() {
	*x = VCIChargingRTpull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[35]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargingRTpull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargingRTpull) ProtoMessage() {}

func (x *VCIChargingRTpull) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_1_proto_msgTypes[35]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargingRTpull.ProtoReflect.Descriptor instead.
func (*VCIChargingRTpull) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP(), []int{35}
}

func (x *VCIChargingRTpull) GetID() *Uint32Value {
	if x != nil {
		return x.ID
	}
	return nil
}

func (x *VCIChargingRTpull) GetRTpullCtr() *Uint32Value {
	if x != nil {
		return x.RTpullCtr
	}
	return nil
}

func (x *VCIChargingRTpull) GetSysCtrl() *SysCtrlChargingStage {
	if x != nil {
		return x.SysCtrl
	}
	return nil
}

func (x *VCIChargingRTpull) GetFaultList() []*ChargingFaultState {
	if x != nil {
		return x.FaultList
	}
	return nil
}

func (x *VCIChargingRTpull) GetInterval() *Uint32Value {
	if x != nil {
		return x.Interval
	}
	return nil
}

var File_GCU_FSM_VCI_v0_1_proto protoreflect.FileDescriptor

var file_GCU_FSM_VCI_v0_1_proto_rawDesc = []byte{
	0x0a, 0x16, 0x47, 0x43, 0x55, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x56, 0x43, 0x49, 0x5f, 0x76, 0x30,
	0x2e, 0x31, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0x20,
	0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x22, 0x22, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14,
	0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x6c, 0x6f,
	0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a,
	0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61, 0x6c,
	0x75, 0x65, 0x22, 0x23, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x68,
	0x6f, 0x72, 0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc4, 0x02, 0x0a, 0x0c,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09,
	0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x50, 0x4d,
	0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x50,
	0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x44, 0x4d, 0x43, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x44, 0x4d, 0x43,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x4f, 0x48, 0x50, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x4f, 0x48, 0x50, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x43, 0x52, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x4c, 0x43, 0x52, 0x53, 0x65, 0x72, 0x76,
	0x65, 0x72, 0x22, 0xda, 0x03, 0x0a, 0x07, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x12, 0x3f,
	0x0a, 0x09, 0x47, 0x75, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x47, 0x75, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12,
	0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x04, 0x54, 0x79, 0x70, 0x65, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x49, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x49, 0x12, 0x38, 0x0a, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x56, 0x12, 0x34, 0x0a,
	0x04, 0x4d, 0x61, 0x78, 0x50, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x4d,
	0x61, 0x78, 0x50, 0x12, 0x38, 0x0a, 0x07, 0x41, 0x75, 0x78, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x41, 0x75, 0x78, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a,
	0x0b, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0b, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x22,
	0xdb, 0x02, 0x0a, 0x0c, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x12, 0x3f, 0x0a, 0x09, 0x53, 0x79, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x53, 0x79, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61,
	0x78, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x78, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x43, 0x75, 0x72,
	0x72, 0x4d, 0x61, 0x78, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x56, 0x6f, 0x6c, 0x56, 0x4d,
	0x69, 0x6e, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x53, 0x79, 0x73,
	0x56, 0x6f, 0x6c, 0x56, 0x4d, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x56, 0x6f,
	0x6c, 0x43, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a,
	0x53, 0x79, 0x73, 0x56, 0x6f, 0x6c, 0x43, 0x4d, 0x69, 0x6e, 0x12, 0x41, 0x0a, 0x0a, 0x53, 0x79,
	0x73, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x53, 0x79, 0x73, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x69, 0x6e, 0x22, 0xcb, 0x01,
	0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x3c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x52, 0x0a, 0x14, 0x53,
	0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x67, 0x65, 0x12, 0x3a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x22,
	0xc8, 0x01, 0x0a, 0x0d, 0x47, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x3c, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42,
	0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x46, 0x0a, 0x0e, 0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x22, 0xf8, 0x02, 0x0a, 0x10, 0x47,
	0x75, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12,
	0x40, 0x0a, 0x0b, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72, 0x76, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x44, 0x72,
	0x76, 0x12, 0x3e, 0x0a, 0x0a, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46, 0x62, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x46,
	0x62, 0x12, 0x3a, 0x0a, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x76, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x76, 0x12, 0x38, 0x0a,
	0x07, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x62, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07,
	0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x46, 0x62, 0x12, 0x35, 0x0a, 0x05, 0x54, 0x5f, 0x70, 0x6f, 0x73,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x50, 0x6f, 0x73, 0x12, 0x35,
	0x0a, 0x05, 0x54, 0x5f, 0x6e, 0x65, 0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x04, 0x54, 0x4e, 0x65, 0x67, 0x22, 0x88, 0x01, 0x0a, 0x0d, 0x42, 0x6d, 0x73, 0x53, 0x68, 0x61,
	0x6b, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x4d, 0x0a, 0x10, 0x42, 0x6d, 0x73, 0x56, 0x6f,
	0x6c, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x10, 0x42, 0x6d, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x42, 0x54, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x47, 0x42, 0x54, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0xdf, 0x04, 0x0a, 0x0b, 0x42, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x42, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79,
	0x54, 0x79, 0x70, 0x65, 0x12, 0x47, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x45, 0x0a,
	0x0c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56,
	0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0f, 0x42, 0x61,
	0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65,
	0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63,
	0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x42, 0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x4a, 0x0a, 0x0f,
	0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64,
	0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6d, 0x73, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x42, 0x6d,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6d, 0x73, 0x41,
	0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x42,
	0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x6d,
	0x73, 0x56, 0x49, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x6d, 0x73, 0x56,
	0x49, 0x4e, 0x22, 0xfc, 0x05, 0x0a, 0x09, 0x42, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67,
	0x12, 0x49, 0x0a, 0x0e, 0x56, 0x49, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x56, 0x49, 0x6e,
	0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x0b, 0x49,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0b, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x12, 0x43, 0x0a, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x43, 0x0a, 0x0b, 0x56, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x56,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x0b, 0x54, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x54, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12,
	0x3d, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x3d,
	0x0a, 0x08, 0x56, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x56, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x43, 0x0a,
	0x0b, 0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d,
	0x61, 0x78, 0x12, 0x43, 0x0a, 0x0b, 0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69,
	0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x56, 0x43, 0x4f, 0x75,
	0x74, 0x70, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x43, 0x0a, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x0b,
	0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69,
	0x6e, 0x22, 0xcc, 0x07, 0x0a, 0x0f, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46,
	0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x39, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x53, 0x6f, 0x63, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x53, 0x6f, 0x63,
	0x12, 0x47, 0x0a, 0x0d, 0x56, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x61,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x56, 0x4d, 0x69, 0x6e,
	0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x12, 0x47, 0x0a, 0x0d, 0x56, 0x4d, 0x61,
	0x78, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x0d, 0x56, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64,
	0x61, 0x6c, 0x12, 0x49, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x54,
	0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x12, 0x49, 0x0a,
	0x0e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72,
	0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x46, 0x0a, 0x0d, 0x42, 0x6d, 0x73, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x42, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x48, 0x0a, 0x0e, 0x42, 0x6d, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x42, 0x6d, 0x73, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0e, 0x42, 0x6d,
	0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0e, 0x42, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x4e, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53,
	0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x50, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72,
	0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x3e, 0x0a, 0x09, 0x42, 0x6d, 0x73, 0x45,
	0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x42,
	0x6d, 0x73, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65,
	0x22, 0xe9, 0x0c, 0x0a, 0x0b, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x12, 0x3b, 0x0a, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3b, 0x0a,
	0x07, 0x49, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x07, 0x49, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x41, 0x0a,
	0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x56, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x56, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x4d, 0x65, 0x61, 0x73, 0x75,
	0x72, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12,
	0x42, 0x0a, 0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x3b, 0x0a, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62,
	0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e,
	0x12, 0x42, 0x0a, 0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x4d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x4d, 0x61, 0x78, 0x12, 0x3c, 0x0a, 0x08, 0x54,
	0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x08, 0x54, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x35, 0x0a, 0x04, 0x54, 0x4d, 0x69,
	0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x04, 0x54, 0x4d, 0x69, 0x6e,
	0x12, 0x3c, 0x0a, 0x08, 0x54, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x54, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x40,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77,
	0x12, 0x3a, 0x0a, 0x08, 0x56, 0x49, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x56, 0x49, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x38, 0x0a, 0x07,
	0x56, 0x49, 0x6e, 0x64, 0x4c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x07, 0x56,
	0x49, 0x6e, 0x64, 0x4c, 0x6f, 0x77, 0x12, 0x36, 0x0a, 0x06, 0x53, 0x6f, 0x48, 0x69, 0x67, 0x68,
	0x18, 0x13, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06, 0x53, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x12, 0x36,
	0x0a, 0x06, 0x53, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x06,
	0x53, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x12, 0x34, 0x0a, 0x05, 0x49, 0x48, 0x69, 0x67, 0x68, 0x18,
	0x15, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x49, 0x48, 0x69, 0x67, 0x68, 0x12, 0x34, 0x0a, 0x05,
	0x54, 0x48, 0x69, 0x67, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x05, 0x54, 0x48, 0x69,
	0x67, 0x68, 0x12, 0x3e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x18, 0x17, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f,
	0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69,
	0x6f, 0x6e, 0x12, 0x48, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0f, 0x4f, 0x75, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x4a, 0x0a, 0x0f,
	0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18,
	0x19, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74,
	0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0f, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78,
	0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x42, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x74,
	0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xad, 0x02, 0x0a,
	0x11, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65,
	0x6e, 0x74, 0x12, 0x44, 0x0a, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c,
	0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x3e, 0x0a, 0x09,
	0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd7, 0x02, 0x0a,
	0x09, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12, 0x3a, 0x0a, 0x07, 0x56, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x56,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x3a, 0x0a, 0x07, 0x49, 0x44, 0x65, 0x6d, 0x61, 0x6e,
	0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x07, 0x49, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x40, 0x0a, 0x0a, 0x49, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x46, 0x6c, 0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x49, 0x50, 0x54, 0x50,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x4e, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x12, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x22, 0xc4, 0x01, 0x0a, 0x07, 0x47, 0x75, 0x6e, 0x48, 0x61,
	0x6c, 0x74, 0x12, 0x3c, 0x0a, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f,
	0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x53, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3c, 0x0a, 0x08, 0x48, 0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x48, 0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x3d,
	0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22, 0x84, 0x03,
	0x0a, 0x08, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x12, 0x3a, 0x0a, 0x08, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x41, 0x6c,
	0x6c, 0x6f, 0x63, 0x61, 0x4f, 0x4b, 0x12, 0x46, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x62, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x62, 0x12, 0x3d,
	0x0a, 0x08, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x08, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x12, 0x3f, 0x0a,
	0x09, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x12, 0x39,
	0x0a, 0x06, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x06, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x12, 0x39, 0x0a, 0x06, 0x4d, 0x6f, 0x64,
	0x56, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x06, 0x4d, 0x6f,
	0x64, 0x56, 0x6f, 0x6c, 0x22, 0x9f, 0x02, 0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x3e, 0x0a, 0x09, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x09, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x52, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x48, 0x0a, 0x0d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f,
	0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xc7, 0x01, 0x0a, 0x0e, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e,
	0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0c,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x12, 0x3e, 0x0a, 0x0a, 0x49, 0x73, 0x56, 0x49, 0x4e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6f, 0x6f, 0x6c,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x49, 0x73, 0x56, 0x49, 0x4e, 0x53, 0x74, 0x61, 0x72, 0x74,
	0x22, 0x81, 0x09, 0x0a, 0x0f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63,
	0x6f, 0x76, 0x65, 0x72, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x42, 0x0a, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x31, 0x12, 0x42, 0x0a, 0x0b, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12,
	0x42, 0x0a, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x33, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x33, 0x12, 0x44, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x42, 0x4d, 0x53,
	0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a, 0x0c, 0x42, 0x4d, 0x53,
	0x52, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75,
	0x65, 0x52, 0x0c, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x3a, 0x0a, 0x07, 0x42, 0x4d, 0x53, 0x54, 0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x07, 0x42, 0x4d, 0x53, 0x54, 0x79, 0x70, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x42,
	0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x43, 0x6e, 0x74, 0x12, 0x40, 0x0a, 0x0a, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x45, 0x6c, 0x6f, 0x63, 0x6b,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x46, 0x0a, 0x0d, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0d,
	0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x41, 0x0a,
	0x0a, 0x42, 0x4d, 0x53, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x42, 0x4d, 0x53, 0x43, 0x75, 0x72, 0x72, 0x4d, 0x61, 0x78,
	0x12, 0x3f, 0x0a, 0x09, 0x42, 0x4d, 0x53, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x0c, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c,
	0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x42, 0x4d, 0x53, 0x56, 0x6f, 0x6c, 0x4d, 0x61,
	0x78, 0x12, 0x41, 0x0a, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18,
	0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f, 0x75,
	0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0a, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f,
	0x6c, 0x4d, 0x61, 0x78, 0x12, 0x43, 0x0a, 0x0b, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x61, 0x78, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0b, 0x43, 0x65,
	0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x42, 0x0a, 0x0b, 0x49, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x52, 0x0b, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x44, 0x0a,
	0x0c, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x10, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x49, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x12, 0x3f, 0x0a, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c,
	0x18, 0x11, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x6f,
	0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x49, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x56, 0x6f, 0x6c, 0x22, 0xe0, 0x01, 0x0a, 0x1d, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x66, 0x61, 0x63,
	0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x40, 0x0a, 0x1b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c,
	0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x1b, 0x56, 0x65, 0x68,
	0x69, 0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x34, 0x0a, 0x15, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x6e, 0x64, 0x6f,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x15, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x47,
	0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x22, 0xd9, 0x04, 0x0a, 0x20, 0x56, 0x65, 0x68, 0x69,
	0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x66, 0x61, 0x63, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6e, 0x73, 0x12, 0x40, 0x0a, 0x1b,
	0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x50,
	0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x1b, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36,
	0x0a, 0x16, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69,
	0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16,
	0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65,
	0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x47, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70,
	0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x12,
	0x4e, 0x0a, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x3f, 0x0a, 0x0b, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x50,
	0x72, 0x61, 0x6d, 0x52, 0x0b, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x4e, 0x0a, 0x10, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x10,
	0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x12, 0x46, 0x0a, 0x0b, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x18,
	0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x65, 0x64, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0b, 0x50, 0x6c, 0x75,
	0x67, 0x67, 0x65, 0x64, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x49, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65,
	0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xa8, 0x02, 0x0a, 0x13, 0x56, 0x43, 0x49, 0x6d, 0x61, 0x69, 0x6e, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x45, 0x0a, 0x0c, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43,
	0x74, 0x72, 0x12, 0x45, 0x0a, 0x0b, 0x47, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x75, 0x6e, 0x42, 0x61, 0x73, 0x65, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x0b, 0x47, 0x75,
	0x6e, 0x42, 0x61, 0x73, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f,
	0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xf2,
	0x02, 0x0a, 0x13, 0x56, 0x43, 0x49, 0x6d, 0x61, 0x69, 0x6e, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x3f, 0x0a,
	0x0b, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61,
	0x6d, 0x52, 0x0b, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4e,
	0x0a, 0x10, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x10, 0x53, 0x79,
	0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x44,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0xdd, 0x02, 0x0a, 0x16, 0x56, 0x43, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x31,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x44, 0x0a, 0x09, 0x47, 0x75, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x52, 0x09, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x44,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0x9d, 0x03, 0x0a, 0x16, 0x56, 0x43, 0x49, 0x50, 0x6c, 0x75, 0x67, 0x67,
	0x65, 0x64, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x12, 0x31,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74,
	0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x3f, 0x0a, 0x0b, 0x56, 0x43, 0x49, 0x50,
	0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x50, 0x72, 0x61, 0x6d, 0x52, 0x0b, 0x56, 0x43,
	0x49, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x07, 0x53, 0x79, 0x73,
	0x43, 0x74, 0x72, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x50, 0x6c, 0x75, 0x67, 0x67, 0x65, 0x64,
	0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x12, 0x44,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65, 0x54,
	0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72,
	0x76, 0x61, 0x6c, 0x22, 0xd1, 0x06, 0x0a, 0x17, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12,
	0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02,
	0x49, 0x44, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43,
	0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x0c, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x43, 0x0a, 0x0a, 0x47, 0x75, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d, 0x73, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x6e,
	0x64, 0x73, 0x52, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x30, 0x12, 0x41,
	0x0a, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x31, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d, 0x73, 0x49, 0x64, 0x65,
	0x6e, 0x74, 0x69, 0x66, 0x79, 0x52, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x31, 0x12, 0x3f, 0x0a, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x32, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d, 0x73,
	0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x32, 0x12, 0x41, 0x0a, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x33,
	0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x75, 0x73, 0x33, 0x12, 0x45, 0x0a, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74,
	0x75, 0x73, 0x34, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68,
	0x52, 0x0a, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x34, 0x12, 0x45, 0x0a, 0x09,
	0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x55, 0x0a, 0x12, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d, 0x73,
	0x67, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x52, 0x12,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x63, 0x6f, 0x76, 0x65, 0x72, 0x4d,
	0x73, 0x67, 0x12, 0x44, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44,
	0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xda, 0x02, 0x0a, 0x17, 0x56, 0x43, 0x49, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74,
	0x41, 0x6e, 0x73, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c,
	0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x45, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x40, 0x0a,
	0x0b, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x1e, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72,
	0x65, 0x64, 0x52, 0x0b, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x12,
	0x44, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x44, 0x61, 0x74, 0x65,
	0x54, 0x69, 0x6d, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61,
	0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55,
	0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x22, 0xd9, 0x03, 0x0a, 0x11, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x54, 0x70, 0x75, 0x73, 0x68, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69,
	0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3f, 0x0a,
	0x09, 0x52, 0x54, 0x70, 0x75, 0x73, 0x68, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61,
	0x6c, 0x75, 0x65, 0x52, 0x09, 0x52, 0x54, 0x70, 0x75, 0x73, 0x68, 0x43, 0x74, 0x72, 0x12, 0x43,
	0x0a, 0x0c, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x44,
	0x65, 0x73, 0x69, 0x72, 0x65, 0x52, 0x0c, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x4d, 0x73, 0x67, 0x12, 0x3d, 0x0a, 0x0a, 0x47, 0x75, 0x6e, 0x48, 0x61, 0x6c, 0x74, 0x4d, 0x73,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1d, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x75, 0x6e, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x0a, 0x47, 0x75, 0x6e, 0x48, 0x61, 0x6c, 0x74, 0x4d,
	0x73, 0x67, 0x12, 0x45, 0x0a, 0x09, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53,
	0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x46, 0x0a, 0x09, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33,
	0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c,
	0x22, 0xd4, 0x02, 0x0a, 0x11, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x31, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32,
	0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x02, 0x49, 0x44, 0x12, 0x3f, 0x0a, 0x09, 0x52, 0x54, 0x70,
	0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52,
	0x09, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x12, 0x44, 0x0a, 0x07, 0x53, 0x79,
	0x73, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x2a, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x07, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c,
	0x12, 0x46, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x28, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x3d, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2a, 0xd4, 0x07, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74,
	0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x4f, 0x76,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x50,
	0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x10, 0x04, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70,
	0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x77,
	0x54, 0x65, 0x6d, 0x70, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x54, 0x68, 0x65,
	0x72, 0x6d, 0x61, 0x6c, 0x52, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x79, 0x10, 0x07, 0x12, 0x15, 0x0a,
	0x11, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x72,
	0x69, 0x74, 0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4d, 0x53, 0x44, 0x61, 0x74, 0x61, 0x55,
	0x70, 0x64, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x09, 0x12,
	0x11, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x10, 0x0a, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4d, 0x53, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x4d, 0x53, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6e, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65,
	0x6e, 0x10, 0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x68, 0x67, 0x65, 0x72, 0x41, 0x75, 0x78, 0x50,
	0x6f, 0x77, 0x65, 0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x20, 0x12, 0x15,
	0x0a, 0x11, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a,
	0x46, 0x53, 0x4d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d,
	0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x26, 0x12,
	0x13, 0x0a, 0x0f, 0x43, 0x43, 0x31, 0x56, 0x6f, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d,
	0x61, 0x6c, 0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x4f, 0x76,
	0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x29, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x75, 0x73, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x67, 0x47, 0x75,
	0x6e, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x4f,
	0x75, 0x74, 0x52, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x41, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x52, 0x6c, 0x79, 0x46, 0x72, 0x6f,
	0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x42, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61,
	0x74, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61,
	0x74, 0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4d, 0x53,
	0x52, 0x65, 0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x45, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x56,
	0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x46, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x55, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x47, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x43, 0x6f, 0x6d, 0x6d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x60, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x61, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x4d, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x10,
	0x62, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10,
	0x63, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x43, 0x50, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x64, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x41, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x66, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x10, 0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x53, 0x4d, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x68, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x4c, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x69, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x53, 0x54, 0x69, 0x6d, 0x65,
	0x4f, 0x75, 0x74, 0x10, 0x6a, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x43, 0x68, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x80, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x43, 0x68, 0x67,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x81, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x75, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10, 0x82, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x47,
	0x75, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x83, 0x01, 0x12, 0x0f, 0x0a,
	0x0a, 0x43, 0x68, 0x67, 0x42, 0x53, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x84, 0x01, 0x2a, 0x3e,
	0x0a, 0x0a, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x11, 0x0a, 0x0d,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12,
	0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x01, 0x12,
	0x0d, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x02, 0x2a, 0x43,
	0x0a, 0x0a, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12, 0x0f,
	0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x01, 0x12,
	0x12, 0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61, 0x69, 0x6e, 0x65,
	0x64, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10, 0x01, 0x12,
	0x11, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0b, 0x47, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x42, 0x54, 0x31, 0x31, 0x10, 0x01, 0x12, 0x09, 0x0a,
	0x05, 0x47, 0x42, 0x54, 0x31, 0x35, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x43, 0x43, 0x53, 0x10,
	0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6f, 0x6a, 0x69, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x42, 0x6f, 0x77, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x43, 0x44, 0x10, 0x06, 0x2a,
	0x63, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x4d, 0x10, 0x01, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x50, 0x10, 0x03,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x53, 0x10, 0x04, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x4c,
	0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x54, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x53, 0x44, 0x10, 0x07, 0x2a, 0x44, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x10, 0x01, 0x12, 0x09, 0x0a, 0x05, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x02, 0x12,
	0x09, 0x0a, 0x05, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x66, 0x73, 0x6d, 0x76, 0x63, 0x69, 0x62, 0x06, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GCU_FSM_VCI_v0_1_proto_rawDescOnce sync.Once
	file_GCU_FSM_VCI_v0_1_proto_rawDescData = file_GCU_FSM_VCI_v0_1_proto_rawDesc
)

func file_GCU_FSM_VCI_v0_1_proto_rawDescGZIP() []byte {
	file_GCU_FSM_VCI_v0_1_proto_rawDescOnce.Do(func() {
		file_GCU_FSM_VCI_v0_1_proto_rawDescData = protoimpl.X.CompressGZIP(file_GCU_FSM_VCI_v0_1_proto_rawDescData)
	})
	return file_GCU_FSM_VCI_v0_1_proto_rawDescData
}

var file_GCU_FSM_VCI_v0_1_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_GCU_FSM_VCI_v0_1_proto_msgTypes = make([]protoimpl.MessageInfo, 36)
var file_GCU_FSM_VCI_v0_1_proto_goTypes = []interface{}{
	(FaultEnum)(0),                           // 0: gcu_fsm_vci.protobuf.FaultEnum
	(HaltReason)(0),                          // 1: gcu_fsm_vci.protobuf.HaltReason
	(FaultState)(0),                          // 2: gcu_fsm_vci.protobuf.FaultState
	(ChargingMode)(0),                        // 3: gcu_fsm_vci.protobuf.ChargingMode
	(GunTypeEnum)(0),                         // 4: gcu_fsm_vci.protobuf.GunTypeEnum
	(BMSTimeoutEnum)(0),                      // 5: gcu_fsm_vci.protobuf.BMSTimeoutEnum
	(SelfCheckType)(0),                       // 6: gcu_fsm_vci.protobuf.SelfCheckType
	(*BoolEnum)(nil),                         // 7: gcu_fsm_vci.protobuf.BoolEnum
	(*Int32Value)(nil),                       // 8: gcu_fsm_vci.protobuf.Int32Value
	(*Uint32Value)(nil),                      // 9: gcu_fsm_vci.protobuf.Uint32Value
	(*FloatValue)(nil),                       // 10: gcu_fsm_vci.protobuf.FloatValue
	(*DoubleValue)(nil),                      // 11: gcu_fsm_vci.protobuf.DoubleValue
	(*DateTimeShort)(nil),                    // 12: gcu_fsm_vci.protobuf.DateTimeShort
	(*DateTimeLong)(nil),                     // 13: gcu_fsm_vci.protobuf.DateTimeLong
	(*EnableServer)(nil),                     // 14: gcu_fsm_vci.protobuf.EnableServer
	(*VCIPram)(nil),                          // 15: gcu_fsm_vci.protobuf.VCIPram
	(*SysParameter)(nil),                     // 16: gcu_fsm_vci.protobuf.SysParameter
	(*SysCtrlPluggedStage)(nil),              // 17: gcu_fsm_vci.protobuf.SysCtrlPluggedStage
	(*SysCtrlChargingStage)(nil),             // 18: gcu_fsm_vci.protobuf.SysCtrlChargingStage
	(*GunBaseStatus)(nil),                    // 19: gcu_fsm_vci.protobuf.GunBaseStatus
	(*GunPluggedStatus)(nil),                 // 20: gcu_fsm_vci.protobuf.GunPluggedStatus
	(*BmsShakehands)(nil),                    // 21: gcu_fsm_vci.protobuf.BmsShakehands
	(*BmsIdentify)(nil),                      // 22: gcu_fsm_vci.protobuf.BmsIdentify
	(*BmsConfig)(nil),                        // 23: gcu_fsm_vci.protobuf.BmsConfig
	(*BmsChargeFinish)(nil),                  // 24: gcu_fsm_vci.protobuf.BmsChargeFinish
	(*BmsCharging)(nil),                      // 25: gcu_fsm_vci.protobuf.BmsCharging
	(*BMSReConnectEvent)(nil),                // 26: gcu_fsm_vci.protobuf.BMSReConnectEvent
	(*GunDesire)(nil),                        // 27: gcu_fsm_vci.protobuf.GunDesire
	(*GunHalt)(nil),                          // 28: gcu_fsm_vci.protobuf.GunHalt
	(*GunCared)(nil),                         // 29: gcu_fsm_vci.protobuf.GunCared
	(*ChargingFaultState)(nil),               // 30: gcu_fsm_vci.protobuf.ChargingFaultState
	(*PluggedRecover)(nil),                   // 31: gcu_fsm_vci.protobuf.PluggedRecover
	(*ChargingRecover)(nil),                  // 32: gcu_fsm_vci.protobuf.ChargingRecover
	(*VehicleChargingInterfaceLogin)(nil),    // 33: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLogin
	(*VehicleChargingInterfaceLoginAns)(nil), // 34: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns
	(*VCImainHeartbeatReq)(nil),              // 35: gcu_fsm_vci.protobuf.VCImainHeartbeatReq
	(*VCImainHeartbeatAns)(nil),              // 36: gcu_fsm_vci.protobuf.VCImainHeartbeatAns
	(*VCIPluggedHeartbeatReq)(nil),           // 37: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq
	(*VCIPluggedHeartbeatAns)(nil),           // 38: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns
	(*VCIChargingHeartbeatReq)(nil),          // 39: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq
	(*VCIChargingHeartbeatAns)(nil),          // 40: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns
	(*VCIChargingRTpush)(nil),                // 41: gcu_fsm_vci.protobuf.VCIChargingRTpush
	(*VCIChargingRTpull)(nil),                // 42: gcu_fsm_vci.protobuf.VCIChargingRTpull
}
var file_GCU_FSM_VCI_v0_1_proto_depIdxs = []int32{
	7,   // 0: gcu_fsm_vci.protobuf.EnableServer.VCIServer:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 1: gcu_fsm_vci.protobuf.EnableServer.PMMServer:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 2: gcu_fsm_vci.protobuf.EnableServer.DMCServer:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 3: gcu_fsm_vci.protobuf.EnableServer.OHPServer:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 4: gcu_fsm_vci.protobuf.EnableServer.LCRServer:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	9,   // 5: gcu_fsm_vci.protobuf.VCIPram.GunAmount:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 6: gcu_fsm_vci.protobuf.VCIPram.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	4,   // 7: gcu_fsm_vci.protobuf.VCIPram.Type:type_name -> gcu_fsm_vci.protobuf.GunTypeEnum
	10,  // 8: gcu_fsm_vci.protobuf.VCIPram.LimitI:type_name -> gcu_fsm_vci.protobuf.FloatValue
	10,  // 9: gcu_fsm_vci.protobuf.VCIPram.LimitV:type_name -> gcu_fsm_vci.protobuf.FloatValue
	10,  // 10: gcu_fsm_vci.protobuf.VCIPram.MaxP:type_name -> gcu_fsm_vci.protobuf.FloatValue
	7,   // 11: gcu_fsm_vci.protobuf.VCIPram.AuxType:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 12: gcu_fsm_vci.protobuf.VCIPram.ElockEnable:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	11,  // 13: gcu_fsm_vci.protobuf.SysParameter.SysVolMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 14: gcu_fsm_vci.protobuf.SysParameter.SysCurrMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 15: gcu_fsm_vci.protobuf.SysParameter.SysVolVMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 16: gcu_fsm_vci.protobuf.SysParameter.SysVolCMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 17: gcu_fsm_vci.protobuf.SysParameter.SysCurrMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	7,   // 18: gcu_fsm_vci.protobuf.SysCtrlPluggedStage.ElockCmd:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 19: gcu_fsm_vci.protobuf.SysCtrlPluggedStage.StartCmd:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 20: gcu_fsm_vci.protobuf.SysCtrlPluggedStage.StartType:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 21: gcu_fsm_vci.protobuf.SysCtrlChargingStage.StartCmd:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	9,   // 22: gcu_fsm_vci.protobuf.GunBaseStatus.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	7,   // 23: gcu_fsm_vci.protobuf.GunBaseStatus.LinkState:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 24: gcu_fsm_vci.protobuf.GunBaseStatus.PositionStatus:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 25: gcu_fsm_vci.protobuf.GunPluggedStatus.AuxPowerDrv:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 26: gcu_fsm_vci.protobuf.GunPluggedStatus.AuxPowerFb:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 27: gcu_fsm_vci.protobuf.GunPluggedStatus.ElockDrv:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 28: gcu_fsm_vci.protobuf.GunPluggedStatus.ElockFb:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	8,   // 29: gcu_fsm_vci.protobuf.GunPluggedStatus.T_pos:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 30: gcu_fsm_vci.protobuf.GunPluggedStatus.T_neg:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 31: gcu_fsm_vci.protobuf.BmsShakehands.BmsVolMaxAllowed:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 32: gcu_fsm_vci.protobuf.BmsIdentify.BatteryType:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 33: gcu_fsm_vci.protobuf.BmsIdentify.CapacityRated:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 34: gcu_fsm_vci.protobuf.BmsIdentify.VoltageRated:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 35: gcu_fsm_vci.protobuf.BmsIdentify.BatterySequence:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 36: gcu_fsm_vci.protobuf.BmsIdentify.ChargeCount:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 37: gcu_fsm_vci.protobuf.BmsIdentify.RightIdentifier:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 38: gcu_fsm_vci.protobuf.BmsConfig.VIndAllowedMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 39: gcu_fsm_vci.protobuf.BmsConfig.IAllowedMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 40: gcu_fsm_vci.protobuf.BmsConfig.EnergyRated:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 41: gcu_fsm_vci.protobuf.BmsConfig.VAllowedMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 42: gcu_fsm_vci.protobuf.BmsConfig.TAllowedMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 43: gcu_fsm_vci.protobuf.BmsConfig.StartSoc:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 44: gcu_fsm_vci.protobuf.BmsConfig.VCurrent:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 45: gcu_fsm_vci.protobuf.BmsConfig.VCOutputMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 46: gcu_fsm_vci.protobuf.BmsConfig.VCOutputMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 47: gcu_fsm_vci.protobuf.BmsConfig.ICOutputMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 48: gcu_fsm_vci.protobuf.BmsConfig.ICOutputMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 49: gcu_fsm_vci.protobuf.BmsChargeFinish.EndSoc:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 50: gcu_fsm_vci.protobuf.BmsChargeFinish.VMinIndividal:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 51: gcu_fsm_vci.protobuf.BmsChargeFinish.VMaxIndividal:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 52: gcu_fsm_vci.protobuf.BmsChargeFinish.TemperatureMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 53: gcu_fsm_vci.protobuf.BmsChargeFinish.TemperatureMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 54: gcu_fsm_vci.protobuf.BmsChargeFinish.BmsStopReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 55: gcu_fsm_vci.protobuf.BmsChargeFinish.BmsFaultReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 56: gcu_fsm_vci.protobuf.BmsChargeFinish.BmsErrorReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 57: gcu_fsm_vci.protobuf.BmsChargeFinish.ChargerStopReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 58: gcu_fsm_vci.protobuf.BmsChargeFinish.ChargerFaultReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 59: gcu_fsm_vci.protobuf.BmsChargeFinish.ChargerErrorReason:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 60: gcu_fsm_vci.protobuf.BmsChargeFinish.BmsEFrame:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 61: gcu_fsm_vci.protobuf.BmsChargeFinish.ChargerEFrame:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 62: gcu_fsm_vci.protobuf.BmsCharging.VDemand:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 63: gcu_fsm_vci.protobuf.BmsCharging.IDemand:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 64: gcu_fsm_vci.protobuf.BmsCharging.CurrentSoc:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 65: gcu_fsm_vci.protobuf.BmsCharging.RemainTime:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	3,   // 66: gcu_fsm_vci.protobuf.BmsCharging.ChargeMode:type_name -> gcu_fsm_vci.protobuf.ChargingMode
	11,  // 67: gcu_fsm_vci.protobuf.BmsCharging.VMeasure:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 68: gcu_fsm_vci.protobuf.BmsCharging.IMeasure:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 69: gcu_fsm_vci.protobuf.BmsCharging.VIndMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 70: gcu_fsm_vci.protobuf.BmsCharging.VIndMaxCode:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 71: gcu_fsm_vci.protobuf.BmsCharging.VIndMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 72: gcu_fsm_vci.protobuf.BmsCharging.VIndMinCode:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 73: gcu_fsm_vci.protobuf.BmsCharging.TMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 74: gcu_fsm_vci.protobuf.BmsCharging.TMaxCode:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 75: gcu_fsm_vci.protobuf.BmsCharging.TMin:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 76: gcu_fsm_vci.protobuf.BmsCharging.TMinCode:type_name -> gcu_fsm_vci.protobuf.Int32Value
	7,   // 77: gcu_fsm_vci.protobuf.BmsCharging.ChargeAllow:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 78: gcu_fsm_vci.protobuf.BmsCharging.VIndHigh:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 79: gcu_fsm_vci.protobuf.BmsCharging.VIndLow:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 80: gcu_fsm_vci.protobuf.BmsCharging.SoHigh:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 81: gcu_fsm_vci.protobuf.BmsCharging.SocLow:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 82: gcu_fsm_vci.protobuf.BmsCharging.IHigh:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 83: gcu_fsm_vci.protobuf.BmsCharging.THigh:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 84: gcu_fsm_vci.protobuf.BmsCharging.Insulation:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 85: gcu_fsm_vci.protobuf.BmsCharging.OutputConnector:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	8,   // 86: gcu_fsm_vci.protobuf.BmsCharging.VIndMaxGroupNum:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 87: gcu_fsm_vci.protobuf.BmsCharging.HeatingMode:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 88: gcu_fsm_vci.protobuf.BMSReConnectEvent.TimeOutState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	5,   // 89: gcu_fsm_vci.protobuf.BMSReConnectEvent.BMSTimeoutType:type_name -> gcu_fsm_vci.protobuf.BMSTimeoutEnum
	8,   // 90: gcu_fsm_vci.protobuf.BMSReConnectEvent.ReconnectCnt:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 91: gcu_fsm_vci.protobuf.BMSReConnectEvent.NextState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	10,  // 92: gcu_fsm_vci.protobuf.GunDesire.VDemand:type_name -> gcu_fsm_vci.protobuf.FloatValue
	10,  // 93: gcu_fsm_vci.protobuf.GunDesire.IDemand:type_name -> gcu_fsm_vci.protobuf.FloatValue
	10,  // 94: gcu_fsm_vci.protobuf.GunDesire.VPTPDemand:type_name -> gcu_fsm_vci.protobuf.FloatValue
	10,  // 95: gcu_fsm_vci.protobuf.GunDesire.IPTPDemand:type_name -> gcu_fsm_vci.protobuf.FloatValue
	7,   // 96: gcu_fsm_vci.protobuf.GunDesire.OutConnectorDemand:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 97: gcu_fsm_vci.protobuf.GunHalt.StopState:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	1,   // 98: gcu_fsm_vci.protobuf.GunHalt.HaltType:type_name -> gcu_fsm_vci.protobuf.HaltReason
	0,   // 99: gcu_fsm_vci.protobuf.GunHalt.Faultcode:type_name -> gcu_fsm_vci.protobuf.FaultEnum
	7,   // 100: gcu_fsm_vci.protobuf.GunCared.AllocaOK:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 101: gcu_fsm_vci.protobuf.GunCared.OutConnectorFb:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	11,  // 102: gcu_fsm_vci.protobuf.GunCared.MeterVol:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 103: gcu_fsm_vci.protobuf.GunCared.MeterCurr:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 104: gcu_fsm_vci.protobuf.GunCared.BatVol:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 105: gcu_fsm_vci.protobuf.GunCared.ModVol:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	0,   // 106: gcu_fsm_vci.protobuf.ChargingFaultState.FaultName:type_name -> gcu_fsm_vci.protobuf.FaultEnum
	2,   // 107: gcu_fsm_vci.protobuf.ChargingFaultState.FaultType:type_name -> gcu_fsm_vci.protobuf.FaultState
	13,  // 108: gcu_fsm_vci.protobuf.ChargingFaultState.FaultTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	13,  // 109: gcu_fsm_vci.protobuf.ChargingFaultState.FaultDownTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 110: gcu_fsm_vci.protobuf.PluggedRecover.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	7,   // 111: gcu_fsm_vci.protobuf.PluggedRecover.ChargerState:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	7,   // 112: gcu_fsm_vci.protobuf.PluggedRecover.IsVINStart:type_name -> gcu_fsm_vci.protobuf.BoolEnum
	9,   // 113: gcu_fsm_vci.protobuf.ChargingRecover.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	8,   // 114: gcu_fsm_vci.protobuf.ChargingRecover.FaultState1:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 115: gcu_fsm_vci.protobuf.ChargingRecover.FaultState2:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 116: gcu_fsm_vci.protobuf.ChargingRecover.FaultState3:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 117: gcu_fsm_vci.protobuf.ChargingRecover.BMSCommState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 118: gcu_fsm_vci.protobuf.ChargingRecover.BMSRecvState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 119: gcu_fsm_vci.protobuf.ChargingRecover.BMSType:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 120: gcu_fsm_vci.protobuf.ChargingRecover.BMSTimeoutCnt:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 121: gcu_fsm_vci.protobuf.ChargingRecover.ElockState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 122: gcu_fsm_vci.protobuf.ChargingRecover.AuxPowerState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 123: gcu_fsm_vci.protobuf.ChargingRecover.BMSCurrMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 124: gcu_fsm_vci.protobuf.ChargingRecover.BMSVolMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 125: gcu_fsm_vci.protobuf.ChargingRecover.CellVolMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	11,  // 126: gcu_fsm_vci.protobuf.ChargingRecover.CellTempMax:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	8,   // 127: gcu_fsm_vci.protobuf.ChargingRecover.InsultState:type_name -> gcu_fsm_vci.protobuf.Int32Value
	8,   // 128: gcu_fsm_vci.protobuf.ChargingRecover.InsultResult:type_name -> gcu_fsm_vci.protobuf.Int32Value
	11,  // 129: gcu_fsm_vci.protobuf.ChargingRecover.InsultVol:type_name -> gcu_fsm_vci.protobuf.DoubleValue
	6,   // 130: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLogin.SelfCheckRul:type_name -> gcu_fsm_vci.protobuf.SelfCheckType
	6,   // 131: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.SelfCheckRul:type_name -> gcu_fsm_vci.protobuf.SelfCheckType
	14,  // 132: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.EnableServerList:type_name -> gcu_fsm_vci.protobuf.EnableServer
	15,  // 133: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.VCIPramList:type_name -> gcu_fsm_vci.protobuf.VCIPram
	16,  // 134: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.SysParameterList:type_name -> gcu_fsm_vci.protobuf.SysParameter
	31,  // 135: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.PluggedList:type_name -> gcu_fsm_vci.protobuf.PluggedRecover
	32,  // 136: gcu_fsm_vci.protobuf.VehicleChargingInterfaceLoginAns.ChargingList:type_name -> gcu_fsm_vci.protobuf.ChargingRecover
	9,   // 137: gcu_fsm_vci.protobuf.VCImainHeartbeatReq.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	19,  // 138: gcu_fsm_vci.protobuf.VCImainHeartbeatReq.GunBaseList:type_name -> gcu_fsm_vci.protobuf.GunBaseStatus
	13,  // 139: gcu_fsm_vci.protobuf.VCImainHeartbeatReq.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 140: gcu_fsm_vci.protobuf.VCImainHeartbeatReq.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 141: gcu_fsm_vci.protobuf.VCImainHeartbeatAns.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	15,  // 142: gcu_fsm_vci.protobuf.VCImainHeartbeatAns.VCIPramList:type_name -> gcu_fsm_vci.protobuf.VCIPram
	16,  // 143: gcu_fsm_vci.protobuf.VCImainHeartbeatAns.SysParameterList:type_name -> gcu_fsm_vci.protobuf.SysParameter
	13,  // 144: gcu_fsm_vci.protobuf.VCImainHeartbeatAns.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 145: gcu_fsm_vci.protobuf.VCImainHeartbeatAns.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 146: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 147: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	20,  // 148: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq.GunStatus:type_name -> gcu_fsm_vci.protobuf.GunPluggedStatus
	13,  // 149: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 150: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatReq.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 151: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 152: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	15,  // 153: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.VCIPramList:type_name -> gcu_fsm_vci.protobuf.VCIPram
	17,  // 154: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.SysCtrl:type_name -> gcu_fsm_vci.protobuf.SysCtrlPluggedStage
	13,  // 155: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 156: gcu_fsm_vci.protobuf.VCIPluggedHeartbeatAns.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 157: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 158: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	21,  // 159: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.GunStatus0:type_name -> gcu_fsm_vci.protobuf.BmsShakehands
	22,  // 160: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.GunStatus1:type_name -> gcu_fsm_vci.protobuf.BmsIdentify
	23,  // 161: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.GunStatus2:type_name -> gcu_fsm_vci.protobuf.BmsConfig
	25,  // 162: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.GunStatus3:type_name -> gcu_fsm_vci.protobuf.BmsCharging
	24,  // 163: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.GunStatus4:type_name -> gcu_fsm_vci.protobuf.BmsChargeFinish
	26,  // 164: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.ReConnect:type_name -> gcu_fsm_vci.protobuf.BMSReConnectEvent
	30,  // 165: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.FaultList:type_name -> gcu_fsm_vci.protobuf.ChargingFaultState
	32,  // 166: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.ChargingRecoverMsg:type_name -> gcu_fsm_vci.protobuf.ChargingRecover
	13,  // 167: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 168: gcu_fsm_vci.protobuf.VCIChargingHeartbeatReq.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 169: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 170: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns.HeartbeatCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	29,  // 171: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns.GunCaredMsg:type_name -> gcu_fsm_vci.protobuf.GunCared
	13,  // 172: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns.CurrentTime:type_name -> gcu_fsm_vci.protobuf.DateTimeLong
	9,   // 173: gcu_fsm_vci.protobuf.VCIChargingHeartbeatAns.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 174: gcu_fsm_vci.protobuf.VCIChargingRTpush.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 175: gcu_fsm_vci.protobuf.VCIChargingRTpush.RTpushCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	27,  // 176: gcu_fsm_vci.protobuf.VCIChargingRTpush.GunDesireMsg:type_name -> gcu_fsm_vci.protobuf.GunDesire
	28,  // 177: gcu_fsm_vci.protobuf.VCIChargingRTpush.GunHaltMsg:type_name -> gcu_fsm_vci.protobuf.GunHalt
	26,  // 178: gcu_fsm_vci.protobuf.VCIChargingRTpush.ReConnect:type_name -> gcu_fsm_vci.protobuf.BMSReConnectEvent
	30,  // 179: gcu_fsm_vci.protobuf.VCIChargingRTpush.FaultList:type_name -> gcu_fsm_vci.protobuf.ChargingFaultState
	9,   // 180: gcu_fsm_vci.protobuf.VCIChargingRTpush.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 181: gcu_fsm_vci.protobuf.VCIChargingRTpull.ID:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	9,   // 182: gcu_fsm_vci.protobuf.VCIChargingRTpull.RTpullCtr:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	18,  // 183: gcu_fsm_vci.protobuf.VCIChargingRTpull.SysCtrl:type_name -> gcu_fsm_vci.protobuf.SysCtrlChargingStage
	30,  // 184: gcu_fsm_vci.protobuf.VCIChargingRTpull.FaultList:type_name -> gcu_fsm_vci.protobuf.ChargingFaultState
	9,   // 185: gcu_fsm_vci.protobuf.VCIChargingRTpull.Interval:type_name -> gcu_fsm_vci.protobuf.Uint32Value
	186, // [186:186] is the sub-list for method output_type
	186, // [186:186] is the sub-list for method input_type
	186, // [186:186] is the sub-list for extension type_name
	186, // [186:186] is the sub-list for extension extendee
	0,   // [0:186] is the sub-list for field type_name
}

func init() { file_GCU_FSM_VCI_v0_1_proto_init() }
func file_GCU_FSM_VCI_v0_1_proto_init() {
	if File_GCU_FSM_VCI_v0_1_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIPram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysParameter); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlPluggedStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlChargingStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunBaseStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunPluggedStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsShakehands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsIdentify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsChargeFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsCharging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSReConnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunDesire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunCared); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingFaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PluggedRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargingRecover); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleChargingInterfaceLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VehicleChargingInterfaceLoginAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCImainHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[29].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCImainHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[30].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIPluggedHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[31].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIPluggedHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[32].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargingHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[33].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargingHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[34].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargingRTpush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_1_proto_msgTypes[35].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargingRTpull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GCU_FSM_VCI_v0_1_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   36,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GCU_FSM_VCI_v0_1_proto_goTypes,
		DependencyIndexes: file_GCU_FSM_VCI_v0_1_proto_depIdxs,
		EnumInfos:         file_GCU_FSM_VCI_v0_1_proto_enumTypes,
		MessageInfos:      file_GCU_FSM_VCI_v0_1_proto_msgTypes,
	}.Build()
	File_GCU_FSM_VCI_v0_1_proto = out.File
	file_GCU_FSM_VCI_v0_1_proto_rawDesc = nil
	file_GCU_FSM_VCI_v0_1_proto_goTypes = nil
	file_GCU_FSM_VCI_v0_1_proto_depIdxs = nil
}
*/