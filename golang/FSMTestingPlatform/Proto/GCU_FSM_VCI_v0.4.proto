syntax = "proto3";
package gcu_fsm_vci.protobuf;
//20210901 V0.3
option go_package = "./protoc/fsmvci";

// 全局命名规定："电流"使用 current , 而 "当前" 使用 now 或 present

//本协议专用枚举及消息单体

//枪头故障状态枚举
enum FaultEnum {
    DefaultFault = 0x00;            //    缺省值
    ShortCircuitFault = 0x01;       //    车辆输出短路故障
    BMSCellVolOver = 0x02;          //    主动防护，电池单体过压
    BMSPackVolOver = 0x03;          //    主动防护，电池包过压
    BMSPackCurrentOver = 0x04;      //    主动防护，过流
    BMSCellTempOver = 0x05;         //    主动防护，过温
    BMSCellTempUnder = 0x06;        //    主动防护，低温
    BMSTempOutControl = 0x07;       //    主动防护，热失控
    BMSRelayAdhesion = 0x08;        //    主动防护，车的继电器粘连
    BMSDataUpdateAbnormal = 0x09;   //    主动防护，数据异常
    BMSOverCharge = 0x0a;           //    主动防护，过充保护
    BMSAuxPowerAbnormal = 0x0b;     //    主动防护，辅助电源异常
    BMSInnerRelayOpenCircuit = 0x0c;//    主动防护，继电器开路

	AuxPowerAbnormal = 0x20;        //	  辅助电源异常
	InsultVolAbnormal = 0x21;		//	  绝缘检测电压异常
	InsultTimeOut = 0x22;			//	  绝缘检测超时
	InsultWarn = 0x23;				//	  绝缘检测告警
	InsultAbnormal = 0x24;			//	  绝缘检测异常
	FSMOffline = 0x25;				//	  消息中心离线
	ElockAbnormal = 0x26;			//	  电子锁异常
	CC1VoltAbnormal = 0x27;			//	  CC1电压异常
	GunOutOverVolt = 0x28;			//	  Gun输出过压
	GunReserveConnect = 0x29;		//	  枪头反接
	FuseBreakFault = 0x2a;			//	  熔断器故障
	ChargeAbnormal = 0x2b;			//	  充电机系统故障
	
	ChgGunOverTemp = 0x40;			//	  枪头过温
	OutRlyFrontVolHigh = 0x41;		//	  输出接触器前级电压高
	OutRlyFrontVolLow = 0x42;		//	  输出接触器前级电压低
	BatVolHigh = 0x43;				//	  电池电压大于充电机最大电压
	BatVolLow = 0x44;				//	  电池电压小于充电机最小电压
	BMSReportVolAbnormal = 0x45;	//	  启动充电前直流输出接触器外侧电压与通信报文电池电压相差＞±5%
	BatAllowVolLow = 0x46;			//	  BMS最高允许电压小于充电机最小输出电压
	OutOverCurr = 0x47;				//	  输出过流
	
	BMSProtoVerUnMatch = 0x60;		//	  BMS通信协议版本不匹配
	BRMTimeout = 0x61;				//	  BRM 报文接收超时
	BRMAbnorma = 0x62;				//	  BRM 报文数据项异常
	BCPTimeout = 0x63;				//	  BCP 报文接收超时
	BCPAbnormal = 0x64;				//	  BCP 报文数据项异常
	BROTimeout = 0x65;				//	  BRO 报文（0x00）接收超时
	BROAATimeout = 0x66;			//	  BRO 报文（0xAA）接收超时
	BSMTimeout = 0x67;				//	  BSM 报文接收超时
	BSMAbnormal = 0x68;				//	  BSM 报文数据项异常
	BCLTimeout = 0x69;				//	  BCL 报文接收超时
	BCSTimeout = 0x6a;				//	  BCS 报文接收超时
	BSMCellVolLow = 0x6b;			//	  BSM报文中单体动力蓄电池电压过低
	BSMSOCHigh = 0x6c;				//	  BSM报文中SOC过高
	BSMSOCLow = 0x6d;				//	  BSM报文中SOC过低
	BSMPackOverCurr = 0x6e;			//	  BSM报文中充电过流
	BSMBatTempHigh = 0x6f;			//	  BSM报文中动力蓄电池温度过高
	BSMInsultAbnor = 0x70;			//	  BSM报文中动力蓄电池绝缘状态异常
	BSMContactorAbnor = 0x71;		//	  BSM报文中连接器连接状态异常
	BSTTimeout = 0x72;				//	  BST报文接收超时
	BSTMeetSOC = 0x73;				//	  BST报达到SOC目标值
	BSTMeetVol = 0x74;				//	  BST报达到总电压设定值
	BSTMeetCellVol = 0x75;			//	  BST报达到单体电压设定值
	BSTInsultFault = 0x76;			//	  BST报BMS绝缘故障
	BSTOutConnectOverTemp = 0x77;	//	  BST报BMS输出连接器过温故障
	BSTOutConnectAbnor = 0x78;		//	  BST报BMS元件、输出连接器
	BSTChgConnectAbnor = 0x79;		//	  BST报BMS充电连接器故障
	BSTBatOverTemp = 0x7a;			//	  BST报BMS电池组温度过高故障
	BSTHighVolRelayFault = 0x7b;	//	  BST报BMS高压继电器故障
	BSTCC2Fault = 0x7c;				//	  BST报BMS检测点2电压检测故障
	BSTOtherFault = 0x7d;			//	  BST报BMS其他故障
	BSTOverCurr = 0x7e;				//	  BST报BMS电流过大
	BSTVolAbno = 0x7f;				//	  BST报BMS电压异常
	
	BSTCellVolHigh = 0x80;			//	  BST报BSM报文中单体动力蓄电池电压过高
	BSTNull = 0x81;					//	  BST填充为0
	BSDTimeout = 0x82;				//	  BSD报文超时
	BSMCurrDiff = 0x83;				//	  输出电流与BCS报文电流不匹配
	BSMVolDiff = 0x84;				//	  输出电压与BCS报文电压不匹配
	BMSDemandCurrHigh = 0x85;		//	  车辆需求电流大于最高允许电流
	BMSDemandVolHigh = 0x86;		//	  车辆需求电流大于最高允许电压
	
	PreChgFail = 0x90;				//	  预充阶段调压失败
	DisChgFail = 0x91;				//	  泄放失败
	GunStateAbnor = 0x92;			//	  控制导引异常
	GunTempWarn = 0x93;				//	  枪头过温告警
	ChgBSTStop = 0x94;				//	  BMS 故障终止
	NoActiveCurr = 0x95;			//	  无有效电流
	SOCFull = 0x96;					//	  SOC满中止
	ChgForbidTimeOut = 0x97;		//	  禁止充电超时
}

//终止原因枚举
enum HaltReason {
	DefaultReason = 0x00;			//    缺省值
	NormalStop = 0x01;				//    正常停机
	FaultStop = 0x02;				//    故障停机
}

//故障状态枚举
enum FaultState {
    DefaultState = 0x00;            //    缺省值
    NormalState = 0x01;             //    故障恢复
    FaultSustained = 0x02;          //    故障发生
}

//充电类型
enum ChargingMode {
	DefaultChargingMode = 0x00;		//	  缺省值
	VoltageStable = 0x01;			//	  恒压充电
	CurrentStable = 0x02;			//	  恒流充电
}

//枪类型枚举
enum GunTypeEnum {
    DefaultType = 0x00;             //    缺省值
    GBT11 = 0x01;                   //    新老兼容国标枪
    GBT15 = 0x02;                   //    新国标枪
    CCS = 0x03;                     //    欧标枪
    Chaoji = 0x04;                  //    超级枪
    Bow = 0x05;                     //    充电弓
    SCD = 0x06;                     //    自动头
}

//BMS超时类型枚举
enum BMSTimeoutEnum {
	DefaultTimeout = 0x00;			//    缺省值
	BHM = 0x01;						//    超时报文
	BRM = 0x02;						//	  超时报文
	BCP = 0x03;						//	  超时报文
	BCS = 0x04;						//	  超时报文
	BCL = 0x05;						//	  超时报文
	BST = 0x06;						//	  超时报文
	BSD = 0x07;						//	  超时报文
}

//自检状态描述枚举
enum SelfCheckState {
	DefaultCheck = 0x00;			//	  缺省值
	Standby = 0x1;					//	  已完成，状态可用
	Checking = 0x2;					//	  自检中，稍后上报
	CheckFault = 0x3;               //	  自检失败，自愈中
}

//可用服务列表
message EnableServer {
    bool VCIServer = 1;             //    VCI模块状态，0表示不可用，1表示可用
    bool PMMServer = 2;             //    PMM模块状态，0表示不可用，1表示可用
    bool DMCServer = 3;             //    DMC模块状态，0表示不可用，1表示可用
    bool OHPServer = 4;             //    OHP模块状态，0表示不可用，1表示可用
    bool LCRServer = 5;             //    LCR模块状态，0表示不可用，1表示可用
}

//VCI枪头配置信息
message VCIGunPrameters {
    uint32 gunAmount = 1;           //    枪头总计数
    uint32 gunID = 2;               //    当前描述枪头编号，与CAN总线编号一致(0~5)
    GunTypeEnum gunType = 3;        //    枪头类型
    float currentLimited = 4;       //    枪头最大流点
    float voltageLimited = 5;       //    枪头最大电压
    float powerMax = 6;             //    系统最大功率
    bool auxType = 7;               //    BMS辅源类型(12V/24V)，0表示12v，1表示24v
    bool eLockEnable = 8;           //    电子锁使能标志，0表示使能，1表示不使能
}

//系统参数信息
message VCISysParameters
{
    float sysVolMax = 1;            //    系统（模块）最大输出电压
    float sysCurMax = 2;            //    系统最大输出电流
    float sysConstVolMinVol = 3;    //    系统（模块）恒压下最小输出电压
    float sysConstCurMinVol = 4;    //    系统（模块）恒流下最小输出电压
    float sysCurMin = 5;            //    模块最小输出电流
}

//VCI枪头连接阶段系统指令
message SysCtrlConnectStage
{
    bool elockCmd = 1;              //    电子指令(0表示解锁，1表示上锁)
    bool startCmd = 2;              //    开机指令(0表示关机，1表示开机)
    bool startType = 3;             //    开机类型(0表示正常开机，1表示骗取VIN开机)
}

//VCI枪头充电阶段系统指令
message SysCtrlCharging
{
    bool StopCmd = 1;               //    关机指令(0表示不操作，1表示关机)
}

//VCI枪头基础状态信息
message GunBasicState {
    uint32 gunID = 1;               //    当前描述枪头编号，与CAN总线编号一致(0~5)
    bool LinkState = 2;             //    插枪状态，0表示空闲，1表示已插枪
    bool positionedState = 3;       //    在位/归位状态，0表示未归位，1表示已归位
}

//VCI枪头连接阶段状态信息
message GunConnectState {
    bool auxDriver = 1;             //    BMS辅助电源驱动
    bool auxFeedback = 2;           //    BMS辅助电源反馈
    bool eLockDriver = 3;           //    电子锁驱动
    bool eLockFeedback = 4;         //    电子锁反馈
    int32 tempPositive = 5;         //    枪头正极温度
    int32 tempNegative = 6;         //    枪头负极温度
}

//BmsShakehands-握手阶段BMS信息
message BMSHandShake {
    double bmsVolMaxAllowed = 1;    //    最高允许充电总电压
    string GBTProtoVersion = 2;     //    GBT27930协议版本号 
}

//BmsIdentify-辨识阶段BMS信息
message BMSVerification {
    uint32 batteryType = 1;         //    电池类型
    uint32 batterySN = 2;           //    电池组序号
    int32  batterChargeCnt = 3;     //    电池组充电次数
    uint32 propertyRight = 4;       //    电池组产权标识
    float capacityRated = 5;        //    整车动力蓄电池系统额定容量（AH）
    float voltageRated = 6;         //    整车动力蓄电池额定总电压
    string batProductor = 7;        //    电池生产厂商名称
    string batProduceDate = 8;      //    电池组生产日期
    string bmsVersion = 9;          //    BMS软件版本号
    string bmsVIN = 10;             //    BMS和车辆VIN
    uint32 chargerVerifyResult = 11; //   充电机辨识结果
    uint32 chargerNo = 12;          //    充电桩编号
    string chargerArea = 13;        //    充电机所在区域
}

//BmsConfig-参数配置阶段BMS信息
message BMSConfig {
    float monoVolMaxAllowed = 1;    //    单体动力蓄电池最高允许充电电压
    float curAllowedMax = 2;        //    最高允许充电电流
    float totalNominalEnergy = 3;   //    动力蓄电池标称总能量 
    float volAllowedMax = 4;        //    最高允许充电总电压
    float tempAllowedMax = 5;       //    最高允许温度
    float startSOC = 6;             //    整车动力蓄电池荷电状态（SOC）
    float volBatNow = 7;            //    整车动力蓄电池当前电池电压
    float volChargerMax = 8;        //    充电机最高输出电压
    float volChargerMin = 9;        //    充电机最低输出电压
    float curChargerMax = 10;       //    充电机最大输出电流
    float curChargerMin = 11;       //    充电机最小输出电流
    uint32 bmsReady = 12;           //    BMS就绪状态
    uint32 chargerReady = 13;       //    充电机就绪状态
}

//BmsChargeFinish-充电结束阶段BMS信息
message BMSChargingEnd {
    float endSOC = 1;               //    中止荷电状态SOC（%） 
    float monoBatVolMin = 2;        //    动力蓄电池单体最低电压
    float monoBatVolMax = 3;        //    动力蓄电池单体最高电压 
    float batTempMin = 4;           //    动力蓄电池最低温度
    float batTempMax = 5;           //    动力蓄电池最高温度
    uint32 bmsStopReason = 6;       //    BMS中止充电原因  
    uint32 bmsFaultReason = 7;      //    BMS中止充电故障原因  
    uint32 bmsErrorReason = 8;      //    BMS中止充电错误原因  
    uint32 chargerStopReason = 9;   //    充电机中止充电原因  
    uint32 chargerFaultReason = 10; //    充电机中止充电故障原因  
    uint32 chargerErrorReason = 11; //    充电机中止充电错误原因  
}

//BmsCharging-充电阶段BMS信息
message BMSCharging {
    float volDemand = 1;            //    需求电压 
    float curDemand = 2;            //    需求电流
    ChargingMode chargeMode = 3;    //    充电模式(恒压充/恒流充)
    float volMeasured = 4;          //    充电电压测量值
    float curMeasured = 5;          //    充电电流测量值
    float monoBatVolMax = 6;        //    单体电池最高电压
    uint32 monoBatVolMaxCode = 7;   //    单体电池最高电压所在编号
    float socNow = 8;               //    当前SOC 
    uint32 timeRemain = 9;          //    估算剩余充电时间(分钟)
    float monoBatVolMin = 10;       //    单体电池最低电压
    uint32 monoBatVolMinCode = 11;  //    单体电池最低电压所在编号
    float tempMax = 12;             //    电池最高温度
    uint32 volMaxGroupNum = 13;     //    最高单体动力蓄电池电压所在组号
    uint32 tempMaxCode = 14;        //    电池最高温度检测点编号
    float tempMin = 15;             //    电池最低温度
    uint32 tempMinCode = 16;        //    电池最低温度检测点编号
    bool monoBatVolOver = 17;       //    单体动力蓄电池电压是否过高
    bool monoBatVolUnder = 18;      //    单体动力蓄电池电压是否过低
    bool socOver = 19;              //    整车动力蓄电池荷电状态SOC是否过高
    bool socUnder = 20;             //    整车动力蓄电池荷电状态SOC是否过低
    bool batCurOver = 21;           //    动力蓄电池充电是否过电流
    bool batTempOver = 22;          //    动力蓄电池温度是否过高
    bool insulationAbnormal = 23;   //    动力蓄电池绝缘状态是否绝缘
    bool outConnectedAbnormal = 24; //    动力蓄电池输出连接器连接状态是否连接
    bool BMSAllowchg = 25;          //    BMS是否允许充电
    bool chargerAllowchg = 26;      //    充电机是否允许充电
    uint32 HeatingMode = 27;        //    加热模式0：正常模式，1：充电加热模式，2：加热模式，3：保留
    uint32 totalChgTime = 30;       //    充电总时间(分钟)
}
//BMS 超时阶段报文
message BMSTimeout {
  uint32 bmsErrorFrame = 1;         //    BMS错误报文 
  uint32 chargerErrorFrame = 2;     //    充电机错误报文
}

// BMS重连事件
message BMSReConnectEvent {
    int32 timeOutState = 1;         //    超时事件(ACK 发生/NACK 未发生)
    BMSTimeoutEnum bmsTimeoutType = 2;//    超时类型（BHM/BRM/BCP/BCS/BCL/BST/BSD）
    int32 reconnectCnt = 3;         //    超时次数
    int32 nextState = 4;            //    下一个重连状态
}

//需求上传信息
message GunApplyInfo {
    float voltageApplied = 1;       //    需求电压 
    float currentApplied = 2;       //    需求电流
    float voltagePTP = 3;           //    模块PTP开机电压 
    float currentPTP = 4;           //    模块PTP开机电流
    bool connectorApplied = 5;      //    输出接触器期望状态（吸合/断开）
}

//停机上传信息
message GunHalt {
    bool stopState = 1;             //    中止状态(ACK 中止，NACK未中止)
    HaltReason haltType = 2;        //    终止原因
    FaultEnum faultcode = 3;        //    中止码 
}

//关注信息
message GunCaredInfo {
    bool  allocaOK = 1;             //    是否分配到模块 
    bool  outConnectorFb = 2;       //    输出接触器反馈状态（吸合/断开）
    float meterVoltage = 3;         //    电表电压 
    float meterCurrent = 4;         //    电表电流
    float batVoltage = 5;           //    输出接触器后级电压 
    float modVoltage = 6;           //    输出接触器前级电压
}

//充电线程故障上报
message ChargerFaultState {
    FaultEnum faultType = 1;        //    故障名称枚举值
    FaultState faultState = 2;      //    故障状态
    int64 faultRaiseTime = 3;       //    故障发生时间
    int64 faultDownTime = 4;        //    故障恢复时间
}

//充电线程恢复数据
message ChargerRevive {
    uint32 chargerID = 1;           //    当前描述枪头编号，与CAN总线编号一致(0~5)
    bool  isCharging = 18;          //    充电机状态（开机/关机）（Daniel 1004）
    bool  isVINStart = 19;          //    是否是VIN启机 （Daniel 1004）
    int32 faultState1 = 2;          //    故障列表1 与枪故障状态按位一一对应
    int32 faultState2 = 3;          //    故障列表2
    int32 faultState3 = 4;          //    故障列表3
    
    int32 bmsCommState = 5;         //    BMS交互状态
    int32 bmsRecvState = 6;         //    接收BMS报文状态
    int32 bmsType = 7;              //    BMS类型（实车/模拟器）
    int32 bmsTimeoutCnt = 8;        //    BMS超时次数
    
    int32 elockState = 9;           //    电子锁状态（开/关）
    int32 auxPowerState = 10;       //    BMS辅源状态（开/关）
    
    float bmsCurrentMax = 11;       //    BMS最大允许充电电流
    float bmsVoltageMax = 12;       //    BMS最大允许充电电压
    float cellVoltageMax = 13;      //    单体允许最大电压
    float cellTempMax = 14;         //    单体允许最大温度
    
    int32 insultState = 15;         //    绝缘检测状态
    int32 insultResult = 16;        //    绝缘检测结果（Pass/Warn/Fail）
    float insultVoltage = 17;       //    绝缘检测电压
}

//Main线程通讯帧

//VCI主线程注册信息帧(0x00)
message VCIManagerRegisterInfo {
    string protocolVer = 1;         //    车桩交互协议版本号
    string editionNumber = 2;       //    车桩交互模块版本号
    SelfCheckState selfCheckResult = 3;//    车桩交互模块自检状态
}

//VCI主线程注册信息帧.响应(0x80)
message VCIManagerRegisterReponse {
    string reProtocolVer = 1;       //    车桩交互协议版本号
    string reFSMEditionNumber = 2;  //    主状态机模块版本号
    uint32 reVCIGunPrametersListLong = 3;
    uint32 reVCISysParameterListLong = 4;
    uint32 reChargerReviveListLong = 5;
    SelfCheckState reSelfCheckResult = 6;   //    主状态机模块自检状态
    EnableServer reEnableServer = 7;        //    主状态机可用服务列表
    repeated VCIGunPrameters reVCIGunPrametersList = 8;     //    车桩交互模块当前配置
    repeated VCISysParameters reVCISysParameterList = 9;    //    系统参数配置
    repeated ChargerRevive reChargerReviveList = 10;        //   充电线程复活数据
}

//VCI主线程心跳周期信息帧(0x02)
message VCIManagerHeartBeatInfo {
    uint32 heartBeatCnt = 1;        //    心跳计数
    uint64 timeNow = 2;             //    心跳时间戳
    uint32 heartBeatPeriod = 3;     //    心跳信息间隔（毫秒）
    uint32 gunBasicStateListLong = 4;
    uint32 connectStateListLong = 5;
    repeated GunBasicState gunBasicStateList = 6;   //    枪头基础状态信息队列
    repeated GunConnectState ConnectStateList = 7;  //    枪头链接阶段控制命令 (repeat 消息 Daniel1004)

}

//VCI主线程心跳周期信息帧.响应(0x82)
message VCIManagerHeartBeatReponse {
    uint32 reHeartbeatCnt = 1;      //    心跳计数
    uint64 reTimeNow = 2;           //    心跳时间戳
    uint32 reHeartBeatPeriod = 3;   //    心跳信息间隔（毫秒）
    uint32 reVCIGunPrametersListLong = 4;
    uint32 reVCISysParametersListLong = 5;
    uint32 reSysCtrlStateLong = 6;
    repeated VCIGunPrameters reVCIGunParametersList = 7;    //    车桩交互模块更新配置
    repeated VCISysParameters reVCISysParametersList =8;    //    系统参数更新配置
    repeated SysCtrlConnectStage reSysCtrlState = 9;        //    枪头链接阶段控制命令（repeat 消息 Daniel1004）

}
//充电线程(charging)通讯帧

//充电线程心跳周期信息帧(0x06)
message VCIChargingHeartBeatInfo {
    uint32 chargingID = 1;          //    当前描述枪头编号，与CAN总线编号一致(0~5)
    uint32 heartbeatCnt = 2;        //    心跳计数
    uint64 timeNow = 12;            //    心跳时间戳
    uint32 heartBeatPeriod = 13;    //    心跳信息间隔（毫秒）
    uint32 faultListLong = 14;
    BMSHandShake gunHandShake = 3;  //    枪头充电阶段状态信息
    BMSVerification gunVerifier = 4;//    枪头充电阶段状态信息
    BMSConfig gunBMSconfig = 5;     //    枪头充电阶段状态信息
    BMSCharging gunCharging = 6;
    BMSTimeout  gunTimeout = 7;     //    枪头充电阶段状态信息
    BMSChargingEnd gunChargingEnd = 8;
    BMSReConnectEvent reConnect = 9;//    BMS重连事件
    ChargerRevive chargingReviveMsg = 11;//    恢复消息体
    repeated ChargerFaultState faultList = 10;//    故障列表

}

//充电线程心跳周期信息帧.响应(0x86)
message VCIChargingHeartBeatResponse {
    uint32 reChargingID = 1;        //    当前描述枪头编号，与CAN总线编号一致(0~5)
    uint32 reHeartBeatCnt = 2;      //    心跳计数
    uint64 reTimeNow = 3;           //    心跳时间戳
    uint32 reHeartBeatPeriod = 4;   //    心跳信息间隔（毫秒）
    GunCaredInfo reGunCaredMsg = 5; //    枪头充电阶段关注状态
}
//充电线程realtimepush
//充电线程突发上传信息帧(0x08)
message VCIChargerRTInfo {
    uint32 chargerID = 1;           //    当前描述枪头编号，与CAN总线编号一致(0~5)
    uint32 pushCnt = 2;             //    推送计数
    uint32 rtPeriod = 7;            //    反馈超时预期（毫秒）
    uint32 faultListLong = 8;
    GunApplyInfo applyMsg = 3;      //    枪头充电阶段状态信息
    GunCaredInfo haltMsg = 4;       //    枪头充电阶段状态信息
    BMSReConnectEvent connectEvent = 5;//    BMS重连事件
    repeated ChargerFaultState faultList = 6;//    故障列表
}

//充电线程realtimepull
//充电线程突发接收信息帧(0x88)
message VCIChargerRTRsponse {
    uint32 echoChargerID = 1;       //    当前描述枪头编号，与CAN总线编号一致(0~5)
    uint32 echoPushCnt = 2;         //    推送计数
    uint32 echoRtPeriod = 3;        //    反馈超时预期（毫秒）
    uint32 echoFaultListLong = 4;    //    故障列表的长度
    SysCtrlCharging echoSysCtrl = 5;//    枪头充电阶段控制命令
    repeated ChargerFaultState echoFaultList = 6;//    故障列表
}
