// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.10.0
// source: GCU_FSM_OHP_v0.2.proto

package fsmohp

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//PMM故障告警类型枚举
type PMMFaultStopEnum int32

const (
	PMMFaultStopEnum_DefaultPMMFault PMMFaultStopEnum = 0 //	缺省值
	//监控加工的故障
	PMMFaultStopEnum_HvdcStartFail PMMFaultStopEnum = 1 //	充电模块开机超时 *
	PMMFaultStopEnum_HvdcGroupFail PMMFaultStopEnum = 2 //	模块响应配组失败 *
	PMMFaultStopEnum_HvdcOffline   PMMFaultStopEnum = 3 //	模块离线 *
	//40帧故障告警状态
	PMMFaultStopEnum_OutOverVolt       PMMFaultStopEnum = 16 //	输出过压 *
	PMMFaultStopEnum_OverTemp          PMMFaultStopEnum = 17 //	过温 *
	PMMFaultStopEnum_FanFault          PMMFaultStopEnum = 18 //	风扇故障 *
	PMMFaultStopEnum_EEPROMFault       PMMFaultStopEnum = 19 //	模块EEPROM故障（校准失败）
	PMMFaultStopEnum_CANErr            PMMFaultStopEnum = 20 //	模块CAN错误状态
	PMMFaultStopEnum_ACLowVolt         PMMFaultStopEnum = 21 //	模块交流欠压告警 *
	PMMFaultStopEnum_ACLackPhase       PMMFaultStopEnum = 22 //	模块交流缺相告警 *
	PMMFaultStopEnum_SerUnblncdCurr    PMMFaultStopEnum = 23 //	模块严重不均流 *
	PMMFaultStopEnum_IDRepeat          PMMFaultStopEnum = 24 //	模块ID重复 *
	PMMFaultStopEnum_ACOverVolt        PMMFaultStopEnum = 25 //	模块交流过压 *
	PMMFaultStopEnum_PFCProtect        PMMFaultStopEnum = 26 //	模块PFC保护 *
	PMMFaultStopEnum_SlightUnblncdCurr PMMFaultStopEnum = 27 //	模块轻微不均流
	PMMFaultStopEnum_DischgAlarm       PMMFaultStopEnum = 28 //	模块放电电路故障 *
	PMMFaultStopEnum_SCFault           PMMFaultStopEnum = 29 //	模块短路锁死告警 *
	PMMFaultStopEnum_InnerComAlarm     PMMFaultStopEnum = 30 //	模块内部通信异常告警
	//43帧故障告警状态
	PMMFaultStopEnum_ElectGridAbnor   PMMFaultStopEnum = 32 //	电网异常检测预告警
	PMMFaultStopEnum_ModRelayFault    PMMFaultStopEnum = 33 //	模块继电器故障（安规故障）
	PMMFaultStopEnum_OutCaplifeWarn   PMMFaultStopEnum = 34 //	输出电解电容寿命预告警 *
	PMMFaultStopEnum_ACCut            PMMFaultStopEnum = 35 //	ACCUT输入掉电告警 *
	PMMFaultStopEnum_DCOCP            PMMFaultStopEnum = 36 //	DCOCP
	PMMFaultStopEnum_BoardcorrectFail PMMFaultStopEnum = 37 //	单板校准失败
	PMMFaultStopEnum_DiodeTempWarn    PMMFaultStopEnum = 38 //	DC 二极管散热器温度预告警
	PMMFaultStopEnum_MOSTempWarn      PMMFaultStopEnum = 39 //	DC MOS管散热器温度预告警
	PMMFaultStopEnum_PFCTempWarn      PMMFaultStopEnum = 40 //	PFC散热器温度预告警
)

// Enum value maps for PMMFaultStopEnum.
var (
	PMMFaultStopEnum_name = map[int32]string{
		0:  "DefaultPMMFault",
		1:  "HvdcStartFail",
		2:  "HvdcGroupFail",
		3:  "HvdcOffline",
		16: "OutOverVolt",
		17: "OverTemp",
		18: "FanFault",
		19: "EEPROMFault",
		20: "CANErr",
		21: "ACLowVolt",
		22: "ACLackPhase",
		23: "SerUnblncdCurr",
		24: "IDRepeat",
		25: "ACOverVolt",
		26: "PFCProtect",
		27: "SlightUnblncdCurr",
		28: "DischgAlarm",
		29: "SCFault",
		30: "InnerComAlarm",
		32: "ElectGridAbnor",
		33: "ModRelayFault",
		34: "OutCaplifeWarn",
		35: "ACCut",
		36: "DCOCP",
		37: "BoardcorrectFail",
		38: "DiodeTempWarn",
		39: "MOSTempWarn",
		40: "PFCTempWarn",
	}
	PMMFaultStopEnum_value = map[string]int32{
		"DefaultPMMFault":   0,
		"HvdcStartFail":     1,
		"HvdcGroupFail":     2,
		"HvdcOffline":       3,
		"OutOverVolt":       16,
		"OverTemp":          17,
		"FanFault":          18,
		"EEPROMFault":       19,
		"CANErr":            20,
		"ACLowVolt":         21,
		"ACLackPhase":       22,
		"SerUnblncdCurr":    23,
		"IDRepeat":          24,
		"ACOverVolt":        25,
		"PFCProtect":        26,
		"SlightUnblncdCurr": 27,
		"DischgAlarm":       28,
		"SCFault":           29,
		"InnerComAlarm":     30,
		"ElectGridAbnor":    32,
		"ModRelayFault":     33,
		"OutCaplifeWarn":    34,
		"ACCut":             35,
		"DCOCP":             36,
		"BoardcorrectFail":  37,
		"DiodeTempWarn":     38,
		"MOSTempWarn":       39,
		"PFCTempWarn":       40,
	}
)

func (x PMMFaultStopEnum) Enum() *PMMFaultStopEnum {
	p := new(PMMFaultStopEnum)
	*p = x
	return p
}

func (x PMMFaultStopEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PMMFaultStopEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[0].Descriptor()
}

func (PMMFaultStopEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[0]
}

func (x PMMFaultStopEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PMMFaultStopEnum.Descriptor instead.
func (PMMFaultStopEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{0}
}

//VCI故障状态枚举
type VCIFaultStopEnum int32

const (
	VCIFaultStopEnum_DefaultVCIFault       VCIFaultStopEnum = 0   //	缺省值
	VCIFaultStopEnum_ShortCircuitFault     VCIFaultStopEnum = 1   //	车辆输出短路故障
	VCIFaultStopEnum_BMSCellOverVolt       VCIFaultStopEnum = 2   //	主动防护，电池单体过压
	VCIFaultStopEnum_BMSPackOverVolt       VCIFaultStopEnum = 3   //	主动防护，电池包过压
	VCIFaultStopEnum_BMSPackOverCurr       VCIFaultStopEnum = 4   //	主动防护，过流
	VCIFaultStopEnum_BMSCellOverTemp       VCIFaultStopEnum = 5   //	主动防护，过温
	VCIFaultStopEnum_BMSCellLowTemp        VCIFaultStopEnum = 6   //	主动防护，低温
	VCIFaultStopEnum_BMSThermalRunaway     VCIFaultStopEnum = 7   //	主动防护，热失控
	VCIFaultStopEnum_BMSRelayShortCrit     VCIFaultStopEnum = 8   //	主动防护，车的继电器粘连
	VCIFaultStopEnum_BMSDataUpdateAbnormal VCIFaultStopEnum = 9   //	主动防护，数据异常
	VCIFaultStopEnum_BMSOverCharge         VCIFaultStopEnum = 10  //	主动防护，过充保护
	VCIFaultStopEnum_BMSAuxPowerAbnormal   VCIFaultStopEnum = 11  //	主动防护，辅助电源异常
	VCIFaultStopEnum_BMSInnerCncterOpen    VCIFaultStopEnum = 12  //	主动防护，继电器开路
	VCIFaultStopEnum_ChgerAuxPowerAbnormal VCIFaultStopEnum = 32  //	辅助电源异常
	VCIFaultStopEnum_InsultVolAbnormal     VCIFaultStopEnum = 33  //	绝缘检测电压异常
	VCIFaultStopEnum_InsultTimeOut         VCIFaultStopEnum = 34  //	绝缘检测超时
	VCIFaultStopEnum_InsultWarn            VCIFaultStopEnum = 35  //	绝缘检测告警
	VCIFaultStopEnum_InsultAbnormal        VCIFaultStopEnum = 36  //	绝缘检测异常
	VCIFaultStopEnum_FSMOffline            VCIFaultStopEnum = 37  //	消息中心离线
	VCIFaultStopEnum_ElockAbnormal         VCIFaultStopEnum = 38  //	电子锁异常
	VCIFaultStopEnum_CC1VoltAbnormal       VCIFaultStopEnum = 39  //	CC1电压异常
	VCIFaultStopEnum_GunOutOverVolt        VCIFaultStopEnum = 40  //	Gun输出过压
	VCIFaultStopEnum_GunReserveConnect     VCIFaultStopEnum = 41  //	枪头反接
	VCIFaultStopEnum_FuseBreakFault        VCIFaultStopEnum = 42  //	熔断器故障
	VCIFaultStopEnum_ChargeAbnormal        VCIFaultStopEnum = 43  //	充电机系统故障
	VCIFaultStopEnum_ChgGunOverTemp        VCIFaultStopEnum = 64  //	枪头过温
	VCIFaultStopEnum_OutRlyFrontVolHigh    VCIFaultStopEnum = 65  //	输出接触器前级电压高
	VCIFaultStopEnum_OutRlyFrontVolLow     VCIFaultStopEnum = 66  //	输出接触器前级电压低
	VCIFaultStopEnum_BatVolHigh            VCIFaultStopEnum = 67  //	电池电压大于充电机最大电压
	VCIFaultStopEnum_BatVolLow             VCIFaultStopEnum = 68  //	电池电压小于充电机最小电压
	VCIFaultStopEnum_BMSReportVolAbnormal  VCIFaultStopEnum = 69  //	启动充电前直流输出接触器外侧电压与通信报文电池电压相差＞±5%
	VCIFaultStopEnum_BatAllowVolLow        VCIFaultStopEnum = 70  //	BMS最高允许电压小于充电机最小输出电压
	VCIFaultStopEnum_OutOverCurr           VCIFaultStopEnum = 71  //	输出过流
	VCIFaultStopEnum_BMSProtoVerUnMatch    VCIFaultStopEnum = 96  //	BMS通信协议版本不匹配
	VCIFaultStopEnum_BRMTimeout            VCIFaultStopEnum = 97  //	BRM 报文接收超时
	VCIFaultStopEnum_BRMAbnorma            VCIFaultStopEnum = 98  //	BRM 报文数据项异常
	VCIFaultStopEnum_BCPTimeout            VCIFaultStopEnum = 99  //	BCP 报文接收超时
	VCIFaultStopEnum_BCPAbnormal           VCIFaultStopEnum = 100 //	BCP 报文数据项异常
	VCIFaultStopEnum_BROTimeout            VCIFaultStopEnum = 101 //	BRO 报文（0x00）接收超时
	VCIFaultStopEnum_BROAATimeout          VCIFaultStopEnum = 102 //	BRO 报文（0xAA）接收超时
	VCIFaultStopEnum_BSMTimeout            VCIFaultStopEnum = 103 //	BSM 报文接收超时
	VCIFaultStopEnum_BSMAbnormal           VCIFaultStopEnum = 104 //	BSM 报文数据项异常
	VCIFaultStopEnum_BCLTimeout            VCIFaultStopEnum = 105 //	BCL 报文接收超时
	VCIFaultStopEnum_BCSTimeout            VCIFaultStopEnum = 106 //	BCS 报文接收超时
	VCIFaultStopEnum_BSMCellVolLow         VCIFaultStopEnum = 107 //	BSM报文中单体动力蓄电池电压过低
	VCIFaultStopEnum_BSMSOCHigh            VCIFaultStopEnum = 108 //	BSM报文中SOC过高
	VCIFaultStopEnum_BSMSOCLow             VCIFaultStopEnum = 109 //	BSM报文中SOC过低
	VCIFaultStopEnum_BSMPackOverCurr       VCIFaultStopEnum = 110 //	BSM报文中充电过流
	VCIFaultStopEnum_BSMBatTempHigh        VCIFaultStopEnum = 111 //	BSM报文中动力蓄电池温度过高
	VCIFaultStopEnum_BSMInsultAbnor        VCIFaultStopEnum = 112 //	BSM报文中动力蓄电池绝缘状态异常
	VCIFaultStopEnum_BSMContactorAbnor     VCIFaultStopEnum = 113 //	BSM报文中连接器连接状态异常
	VCIFaultStopEnum_BSTTimeout            VCIFaultStopEnum = 114 //	BST报文接收超时
	VCIFaultStopEnum_BSTMeetSOC            VCIFaultStopEnum = 115 //	BST报达到SOC目标值
	VCIFaultStopEnum_BSTMeetVol            VCIFaultStopEnum = 116 //	BST报达到总电压设定值
	VCIFaultStopEnum_BSTMeetCellVol        VCIFaultStopEnum = 117 //	BST报达到单体电压设定值
	VCIFaultStopEnum_BSTInsultFault        VCIFaultStopEnum = 118 //	BST报BMS绝缘故障
	VCIFaultStopEnum_BSTOutConnectOverTemp VCIFaultStopEnum = 119 //	BST报BMS输出连接器过温故障
	VCIFaultStopEnum_BSTOutConnectAbnor    VCIFaultStopEnum = 120 //	BST报BMS元件、输出连接器
	VCIFaultStopEnum_BSTChgConnectAbnor    VCIFaultStopEnum = 121 //	BST报BMS充电连接器故障
	VCIFaultStopEnum_BSTBatOverTemp        VCIFaultStopEnum = 122 //	BST报BMS电池组温度过高故障
	VCIFaultStopEnum_BSTHighVolRelayFault  VCIFaultStopEnum = 123 //	BST报BMS高压继电器故障
	VCIFaultStopEnum_BSTCC2Fault           VCIFaultStopEnum = 124 //	BST报BMS检测点2电压检测故障
	VCIFaultStopEnum_BSTOtherFault         VCIFaultStopEnum = 125 //	BST报BMS其他故障
	VCIFaultStopEnum_BSTOverCurr           VCIFaultStopEnum = 126 //	BST报BMS电流过大
	VCIFaultStopEnum_BSTVolAbno            VCIFaultStopEnum = 127 //	BST报BMS电压异常
	VCIFaultStopEnum_BSTCellVolHigh        VCIFaultStopEnum = 128 //	BST报BSM报文中单体动力蓄电池电压过高
	VCIFaultStopEnum_BSTNull               VCIFaultStopEnum = 129 //	BST填充为0
	VCIFaultStopEnum_BSDTimeout            VCIFaultStopEnum = 130 //	BSD报文超时
	VCIFaultStopEnum_BSMCurrDiff           VCIFaultStopEnum = 131 //	输出电流与BCS报文电流不匹配
	VCIFaultStopEnum_BSMVolDiff            VCIFaultStopEnum = 132 //	输出电压与BCS报文电压不匹配
	VCIFaultStopEnum_BMSDemandCurrHigh     VCIFaultStopEnum = 133 //	车辆需求电流大于最高允许电流
	VCIFaultStopEnum_BMSDemandVolHigh      VCIFaultStopEnum = 134 //	车辆需求电流大于最高允许电压
	VCIFaultStopEnum_PreChgFail            VCIFaultStopEnum = 144 //	预充阶段调压失败
	VCIFaultStopEnum_DisChgFail            VCIFaultStopEnum = 145 //	泄放失败
	VCIFaultStopEnum_GunStateAbnor         VCIFaultStopEnum = 146 //	控制导引异常
	VCIFaultStopEnum_GunTempWarn           VCIFaultStopEnum = 147 //	枪头过温告警
	VCIFaultStopEnum_ChgBSTStop            VCIFaultStopEnum = 148 //	BMS 故障终止
	VCIFaultStopEnum_NoActiveCurr          VCIFaultStopEnum = 149 //	无有效电流
	VCIFaultStopEnum_SOCFull               VCIFaultStopEnum = 150 //	SOC满中止
	VCIFaultStopEnum_ChgForbidTimeOut      VCIFaultStopEnum = 151 //	禁止充电超时
)

// Enum value maps for VCIFaultStopEnum.
var (
	VCIFaultStopEnum_name = map[int32]string{
		0:   "DefaultVCIFault",
		1:   "ShortCircuitFault",
		2:   "BMSCellOverVolt",
		3:   "BMSPackOverVolt",
		4:   "BMSPackOverCurr",
		5:   "BMSCellOverTemp",
		6:   "BMSCellLowTemp",
		7:   "BMSThermalRunaway",
		8:   "BMSRelayShortCrit",
		9:   "BMSDataUpdateAbnormal",
		10:  "BMSOverCharge",
		11:  "BMSAuxPowerAbnormal",
		12:  "BMSInnerCncterOpen",
		32:  "ChgerAuxPowerAbnormal",
		33:  "InsultVolAbnormal",
		34:  "InsultTimeOut",
		35:  "InsultWarn",
		36:  "InsultAbnormal",
		37:  "FSMOffline",
		38:  "ElockAbnormal",
		39:  "CC1VoltAbnormal",
		40:  "GunOutOverVolt",
		41:  "GunReserveConnect",
		42:  "FuseBreakFault",
		43:  "ChargeAbnormal",
		64:  "ChgGunOverTemp",
		65:  "OutRlyFrontVolHigh",
		66:  "OutRlyFrontVolLow",
		67:  "BatVolHigh",
		68:  "BatVolLow",
		69:  "BMSReportVolAbnormal",
		70:  "BatAllowVolLow",
		71:  "OutOverCurr",
		96:  "BMSProtoVerUnMatch",
		97:  "BRMTimeout",
		98:  "BRMAbnorma",
		99:  "BCPTimeout",
		100: "BCPAbnormal",
		101: "BROTimeout",
		102: "BROAATimeout",
		103: "BSMTimeout",
		104: "BSMAbnormal",
		105: "BCLTimeout",
		106: "BCSTimeout",
		107: "BSMCellVolLow",
		108: "BSMSOCHigh",
		109: "BSMSOCLow",
		110: "BSMPackOverCurr",
		111: "BSMBatTempHigh",
		112: "BSMInsultAbnor",
		113: "BSMContactorAbnor",
		114: "BSTTimeout",
		115: "BSTMeetSOC",
		116: "BSTMeetVol",
		117: "BSTMeetCellVol",
		118: "BSTInsultFault",
		119: "BSTOutConnectOverTemp",
		120: "BSTOutConnectAbnor",
		121: "BSTChgConnectAbnor",
		122: "BSTBatOverTemp",
		123: "BSTHighVolRelayFault",
		124: "BSTCC2Fault",
		125: "BSTOtherFault",
		126: "BSTOverCurr",
		127: "BSTVolAbno",
		128: "BSTCellVolHigh",
		129: "BSTNull",
		130: "BSDTimeout",
		131: "BSMCurrDiff",
		132: "BSMVolDiff",
		133: "BMSDemandCurrHigh",
		134: "BMSDemandVolHigh",
		144: "PreChgFail",
		145: "DisChgFail",
		146: "GunStateAbnor",
		147: "GunTempWarn",
		148: "ChgBSTStop",
		149: "NoActiveCurr",
		150: "SOCFull",
		151: "ChgForbidTimeOut",
	}
	VCIFaultStopEnum_value = map[string]int32{
		"DefaultVCIFault":       0,
		"ShortCircuitFault":     1,
		"BMSCellOverVolt":       2,
		"BMSPackOverVolt":       3,
		"BMSPackOverCurr":       4,
		"BMSCellOverTemp":       5,
		"BMSCellLowTemp":        6,
		"BMSThermalRunaway":     7,
		"BMSRelayShortCrit":     8,
		"BMSDataUpdateAbnormal": 9,
		"BMSOverCharge":         10,
		"BMSAuxPowerAbnormal":   11,
		"BMSInnerCncterOpen":    12,
		"ChgerAuxPowerAbnormal": 32,
		"InsultVolAbnormal":     33,
		"InsultTimeOut":         34,
		"InsultWarn":            35,
		"InsultAbnormal":        36,
		"FSMOffline":            37,
		"ElockAbnormal":         38,
		"CC1VoltAbnormal":       39,
		"GunOutOverVolt":        40,
		"GunReserveConnect":     41,
		"FuseBreakFault":        42,
		"ChargeAbnormal":        43,
		"ChgGunOverTemp":        64,
		"OutRlyFrontVolHigh":    65,
		"OutRlyFrontVolLow":     66,
		"BatVolHigh":            67,
		"BatVolLow":             68,
		"BMSReportVolAbnormal":  69,
		"BatAllowVolLow":        70,
		"OutOverCurr":           71,
		"BMSProtoVerUnMatch":    96,
		"BRMTimeout":            97,
		"BRMAbnorma":            98,
		"BCPTimeout":            99,
		"BCPAbnormal":           100,
		"BROTimeout":            101,
		"BROAATimeout":          102,
		"BSMTimeout":            103,
		"BSMAbnormal":           104,
		"BCLTimeout":            105,
		"BCSTimeout":            106,
		"BSMCellVolLow":         107,
		"BSMSOCHigh":            108,
		"BSMSOCLow":             109,
		"BSMPackOverCurr":       110,
		"BSMBatTempHigh":        111,
		"BSMInsultAbnor":        112,
		"BSMContactorAbnor":     113,
		"BSTTimeout":            114,
		"BSTMeetSOC":            115,
		"BSTMeetVol":            116,
		"BSTMeetCellVol":        117,
		"BSTInsultFault":        118,
		"BSTOutConnectOverTemp": 119,
		"BSTOutConnectAbnor":    120,
		"BSTChgConnectAbnor":    121,
		"BSTBatOverTemp":        122,
		"BSTHighVolRelayFault":  123,
		"BSTCC2Fault":           124,
		"BSTOtherFault":         125,
		"BSTOverCurr":           126,
		"BSTVolAbno":            127,
		"BSTCellVolHigh":        128,
		"BSTNull":               129,
		"BSDTimeout":            130,
		"BSMCurrDiff":           131,
		"BSMVolDiff":            132,
		"BMSDemandCurrHigh":     133,
		"BMSDemandVolHigh":      134,
		"PreChgFail":            144,
		"DisChgFail":            145,
		"GunStateAbnor":         146,
		"GunTempWarn":           147,
		"ChgBSTStop":            148,
		"NoActiveCurr":          149,
		"SOCFull":               150,
		"ChgForbidTimeOut":      151,
	}
)

func (x VCIFaultStopEnum) Enum() *VCIFaultStopEnum {
	p := new(VCIFaultStopEnum)
	*p = x
	return p
}

func (x VCIFaultStopEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (VCIFaultStopEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[1].Descriptor()
}

func (VCIFaultStopEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[1]
}

func (x VCIFaultStopEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use VCIFaultStopEnum.Descriptor instead.
func (VCIFaultStopEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{1}
}

//充电类型
type ChargingMode int32

const (
	ChargingMode_DefaultChargingMode ChargingMode = 0 //	缺省值
	ChargingMode_VoltageStable       ChargingMode = 1 //	恒压充电
	ChargingMode_CurrentStable       ChargingMode = 2 //	恒流充电
)

// Enum value maps for ChargingMode.
var (
	ChargingMode_name = map[int32]string{
		0: "DefaultChargingMode",
		1: "VoltageStable",
		2: "CurrentStable",
	}
	ChargingMode_value = map[string]int32{
		"DefaultChargingMode": 0,
		"VoltageStable":       1,
		"CurrentStable":       2,
	}
)

func (x ChargingMode) Enum() *ChargingMode {
	p := new(ChargingMode)
	*p = x
	return p
}

func (x ChargingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[2].Descriptor()
}

func (ChargingMode) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[2]
}

func (x ChargingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingMode.Descriptor instead.
func (ChargingMode) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{2}
}

//BMS超时类型枚举
type BMSTimeoutEnum int32

const (
	BMSTimeoutEnum_DefaultTimeout BMSTimeoutEnum = 0 //  缺省值
	BMSTimeoutEnum_BHM            BMSTimeoutEnum = 1 //	超时报文
	BMSTimeoutEnum_BRM            BMSTimeoutEnum = 2 //	超时报文
	BMSTimeoutEnum_BCP            BMSTimeoutEnum = 3 //	超时报文
	BMSTimeoutEnum_BCS            BMSTimeoutEnum = 4 //	超时报文
	BMSTimeoutEnum_BCL            BMSTimeoutEnum = 5 //	超时报文
	BMSTimeoutEnum_BST            BMSTimeoutEnum = 6 //	超时报文
	BMSTimeoutEnum_BSD            BMSTimeoutEnum = 7 //	超时报文
)

// Enum value maps for BMSTimeoutEnum.
var (
	BMSTimeoutEnum_name = map[int32]string{
		0: "DefaultTimeout",
		1: "BHM",
		2: "BRM",
		3: "BCP",
		4: "BCS",
		5: "BCL",
		6: "BST",
		7: "BSD",
	}
	BMSTimeoutEnum_value = map[string]int32{
		"DefaultTimeout": 0,
		"BHM":            1,
		"BRM":            2,
		"BCP":            3,
		"BCS":            4,
		"BCL":            5,
		"BST":            6,
		"BSD":            7,
	}
)

func (x BMSTimeoutEnum) Enum() *BMSTimeoutEnum {
	p := new(BMSTimeoutEnum)
	*p = x
	return p
}

func (x BMSTimeoutEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSTimeoutEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[3].Descriptor()
}

func (BMSTimeoutEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[3]
}

func (x BMSTimeoutEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSTimeoutEnum.Descriptor instead.
func (BMSTimeoutEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{3}
}

//接触器状态枚举
type ContactorStateEnum int32

const (
	ContactorStateEnum_ContactorUnKown   ContactorStateEnum = 0 //	未自检，未知状态缺省值
	ContactorStateEnum_DriveFailure      ContactorStateEnum = 1 //	故障，驱动失效
	ContactorStateEnum_ContactorAdhesion ContactorStateEnum = 2 //	故障，触点粘连
	ContactorStateEnum_ContactorStandby  ContactorStateEnum = 3 //	可抢占，阵列接触器专用
	ContactorStateEnum_ContactorLocked   ContactorStateEnum = 4 //	已被抢占，不可操作
	ContactorStateEnum_ContactorReady    ContactorStateEnum = 5 //	已被抢占，可操作，未吸合
	ContactorStateEnum_ContactorCharging ContactorStateEnum = 6 //	已被抢占，可操作，已吸合
	ContactorStateEnum_Aggregation       ContactorStateEnum = 7 //	汇聚模式，主接触器专用
)

// Enum value maps for ContactorStateEnum.
var (
	ContactorStateEnum_name = map[int32]string{
		0: "ContactorUnKown",
		1: "DriveFailure",
		2: "ContactorAdhesion",
		3: "ContactorStandby",
		4: "ContactorLocked",
		5: "ContactorReady",
		6: "ContactorCharging",
		7: "Aggregation",
	}
	ContactorStateEnum_value = map[string]int32{
		"ContactorUnKown":   0,
		"DriveFailure":      1,
		"ContactorAdhesion": 2,
		"ContactorStandby":  3,
		"ContactorLocked":   4,
		"ContactorReady":    5,
		"ContactorCharging": 6,
		"Aggregation":       7,
	}
)

func (x ContactorStateEnum) Enum() *ContactorStateEnum {
	p := new(ContactorStateEnum)
	*p = x
	return p
}

func (x ContactorStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactorStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[4].Descriptor()
}

func (ContactorStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[4]
}

func (x ContactorStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactorStateEnum.Descriptor instead.
func (ContactorStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{4}
}

//自检状态描述枚举
type SelfCheckType int32

const (
	SelfCheckType_DefaultCheck SelfCheckType = 0 //	缺省值
	SelfCheckType_Standby      SelfCheckType = 1 //	已完成，状态可用
	SelfCheckType_Checking     SelfCheckType = 2 //	自检中，稍后上报
	SelfCheckType_CheckFault   SelfCheckType = 3 //	自检失败，自愈中
)

// Enum value maps for SelfCheckType.
var (
	SelfCheckType_name = map[int32]string{
		0: "DefaultCheck",
		1: "Standby",
		2: "Checking",
		3: "CheckFault",
	}
	SelfCheckType_value = map[string]int32{
		"DefaultCheck": 0,
		"Standby":      1,
		"Checking":     2,
		"CheckFault":   3,
	}
)

func (x SelfCheckType) Enum() *SelfCheckType {
	p := new(SelfCheckType)
	*p = x
	return p
}

func (x SelfCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[5].Descriptor()
}

func (SelfCheckType) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[5]
}

func (x SelfCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfCheckType.Descriptor instead.
func (SelfCheckType) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{5}
}

//订单类型枚举
type OrderTypeEnum int32

const (
	OrderTypeEnum_DefaultOrderType    OrderTypeEnum = 0 //	未知状态缺省值，非法
	OrderTypeEnum_LocalFreeOrder      OrderTypeEnum = 1 //	本地不计费订单
	OrderTypeEnum_LocalChargeOrder    OrderTypeEnum = 2 //	本地计费订单
	OrderTypeEnum_CloudPlatformOrder  OrderTypeEnum = 3 //	订单云参与鉴权或直接发起订单
	OrderTypeEnum_DevicePlatformOrder OrderTypeEnum = 4 //	设备管理云参与鉴权或直接发起订单
	OrderTypeEnum_SpecialVehicleOrder OrderTypeEnum = 5 //	特殊车辆直接发起订单
	OrderTypeEnum_VINPrimingOrder     OrderTypeEnum = 6 //	VIN预启动订单
)

// Enum value maps for OrderTypeEnum.
var (
	OrderTypeEnum_name = map[int32]string{
		0: "DefaultOrderType",
		1: "LocalFreeOrder",
		2: "LocalChargeOrder",
		3: "CloudPlatformOrder",
		4: "DevicePlatformOrder",
		5: "SpecialVehicleOrder",
		6: "VINPrimingOrder",
	}
	OrderTypeEnum_value = map[string]int32{
		"DefaultOrderType":    0,
		"LocalFreeOrder":      1,
		"LocalChargeOrder":    2,
		"CloudPlatformOrder":  3,
		"DevicePlatformOrder": 4,
		"SpecialVehicleOrder": 5,
		"VINPrimingOrder":     6,
	}
)

func (x OrderTypeEnum) Enum() *OrderTypeEnum {
	p := new(OrderTypeEnum)
	*p = x
	return p
}

func (x OrderTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[6].Descriptor()
}

func (OrderTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[6]
}

func (x OrderTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderTypeEnum.Descriptor instead.
func (OrderTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{6}
}

//订单子类型枚举，记录可知鉴权方式
type OrderSubTypeEnum int32

const (
	OrderSubTypeEnum_NormalOrderType        OrderSubTypeEnum = 0 //	默认状态缺省值
	OrderSubTypeEnum_VINSubTypeOrder        OrderSubTypeEnum = 1 //	VIN鉴权发起订单
	OrderSubTypeEnum_UIPassWordOrder        OrderSubTypeEnum = 2 //	密码鉴权发起订单
	OrderSubTypeEnum_NFCCardOrder           OrderSubTypeEnum = 3 //	刷卡鉴权发起订单
	OrderSubTypeEnum_ETCRFIDOrder           OrderSubTypeEnum = 4 //	ETC鉴权发起订单
	OrderSubTypeEnum_LicensePlateOrder      OrderSubTypeEnum = 5 //	车牌识别鉴权订单
	OrderSubTypeEnum_VisionRecognitionOrder OrderSubTypeEnum = 6 //	机器视觉，人脸/姿态/手势识别鉴权订单
	OrderSubTypeEnum_VoiceRecognitionOrder  OrderSubTypeEnum = 7 //	自然语义，声纹/语音识别鉴权订单
)

// Enum value maps for OrderSubTypeEnum.
var (
	OrderSubTypeEnum_name = map[int32]string{
		0: "NormalOrderType",
		1: "VINSubTypeOrder",
		2: "UIPassWordOrder",
		3: "NFCCardOrder",
		4: "ETCRFIDOrder",
		5: "LicensePlateOrder",
		6: "VisionRecognitionOrder",
		7: "VoiceRecognitionOrder",
	}
	OrderSubTypeEnum_value = map[string]int32{
		"NormalOrderType":        0,
		"VINSubTypeOrder":        1,
		"UIPassWordOrder":        2,
		"NFCCardOrder":           3,
		"ETCRFIDOrder":           4,
		"LicensePlateOrder":      5,
		"VisionRecognitionOrder": 6,
		"VoiceRecognitionOrder":  7,
	}
)

func (x OrderSubTypeEnum) Enum() *OrderSubTypeEnum {
	p := new(OrderSubTypeEnum)
	*p = x
	return p
}

func (x OrderSubTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderSubTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[7].Descriptor()
}

func (OrderSubTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[7]
}

func (x OrderSubTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderSubTypeEnum.Descriptor instead.
func (OrderSubTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{7}
}

//订单状态枚举
type OrderStateEnum int32

const (
	OrderStateEnum_DefaultOrderState   OrderStateEnum = 0 //	未知状态缺省值
	OrderStateEnum_AuthenticationOrder OrderStateEnum = 1 //	订单鉴权
	OrderStateEnum_EstablishOrder      OrderStateEnum = 2 //	订单创建，锁定管线
	OrderStateEnum_RuningState         OrderStateEnum = 3 //	订单运行中，锁定管线
	OrderStateEnum_SettlementState     OrderStateEnum = 4 //	订单结算中，锁定管线
	OrderStateEnum_HangOrderState      OrderStateEnum = 5 //	订单挂起，释放管线
	OrderStateEnum_CompletedState      OrderStateEnum = 6 //	订单完成，释放管线
)

// Enum value maps for OrderStateEnum.
var (
	OrderStateEnum_name = map[int32]string{
		0: "DefaultOrderState",
		1: "AuthenticationOrder",
		2: "EstablishOrder",
		3: "RuningState",
		4: "SettlementState",
		5: "HangOrderState",
		6: "CompletedState",
	}
	OrderStateEnum_value = map[string]int32{
		"DefaultOrderState":   0,
		"AuthenticationOrder": 1,
		"EstablishOrder":      2,
		"RuningState":         3,
		"SettlementState":     4,
		"HangOrderState":      5,
		"CompletedState":      6,
	}
)

func (x OrderStateEnum) Enum() *OrderStateEnum {
	p := new(OrderStateEnum)
	*p = x
	return p
}

func (x OrderStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[8].Descriptor()
}

func (OrderStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[8]
}

func (x OrderStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStateEnum.Descriptor instead.
func (OrderStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{8}
}

//管线状态枚举
type PipelineStateEnum int32

const (
	PipelineStateEnum_DefaultPipelineState PipelineStateEnum = 0 //	未知状态缺省值
	PipelineStateEnum_DisablePipeline      PipelineStateEnum = 1 //	失能管线
	PipelineStateEnum_IdleState            PipelineStateEnum = 2 //	未插枪，空闲
	PipelineStateEnum_InsertedState        PipelineStateEnum = 3 //	已插枪，管线进入可启动/可锁定状态
	PipelineStateEnum_PrimingState         PipelineStateEnum = 4 //	预启动，VIN预启动订单专用，仍为未锁定管线
	PipelineStateEnum_StartingState        PipelineStateEnum = 5 //	启动中，已锁定管线
	PipelineStateEnum_ChargingState        PipelineStateEnum = 6 //	充电中，已锁定管线
	PipelineStateEnum_SettlementPipeline   PipelineStateEnum = 7 //	结算中，已锁定管线
)

// Enum value maps for PipelineStateEnum.
var (
	PipelineStateEnum_name = map[int32]string{
		0: "DefaultPipelineState",
		1: "DisablePipeline",
		2: "IdleState",
		3: "InsertedState",
		4: "PrimingState",
		5: "StartingState",
		6: "ChargingState",
		7: "SettlementPipeline",
	}
	PipelineStateEnum_value = map[string]int32{
		"DefaultPipelineState": 0,
		"DisablePipeline":      1,
		"IdleState":            2,
		"InsertedState":        3,
		"PrimingState":         4,
		"StartingState":        5,
		"ChargingState":        6,
		"SettlementPipeline":   7,
	}
)

func (x PipelineStateEnum) Enum() *PipelineStateEnum {
	p := new(PipelineStateEnum)
	*p = x
	return p
}

func (x PipelineStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (PipelineStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[9].Descriptor()
}

func (PipelineStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[9]
}

func (x PipelineStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use PipelineStateEnum.Descriptor instead.
func (PipelineStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{9}
}

//订单停止策略枚举
type OrderStrategyEnum int32

const (
	OrderStrategyEnum_DefaultStrategy   OrderStrategyEnum = 0 //	未知状态缺省值，充满
	OrderStrategyEnum_LocalFullStrategy OrderStrategyEnum = 1 //	离线仍充
	OrderStrategyEnum_LocalDownStrategy OrderStrategyEnum = 2 //	离线即停
	OrderStrategyEnum_SOCStrategy       OrderStrategyEnum = 3 //	特定SOC停止
	OrderStrategyEnum_VStrategy         OrderStrategyEnum = 4 //	特定电压停止
	OrderStrategyEnum_EnergyStrategy    OrderStrategyEnum = 5 //	特定电量停止
	OrderStrategyEnum_BillStrategy      OrderStrategyEnum = 6 //	特定金额停止
)

// Enum value maps for OrderStrategyEnum.
var (
	OrderStrategyEnum_name = map[int32]string{
		0: "DefaultStrategy",
		1: "LocalFullStrategy",
		2: "LocalDownStrategy",
		3: "SOCStrategy",
		4: "VStrategy",
		5: "EnergyStrategy",
		6: "BillStrategy",
	}
	OrderStrategyEnum_value = map[string]int32{
		"DefaultStrategy":   0,
		"LocalFullStrategy": 1,
		"LocalDownStrategy": 2,
		"SOCStrategy":       3,
		"VStrategy":         4,
		"EnergyStrategy":    5,
		"BillStrategy":      6,
	}
)

func (x OrderStrategyEnum) Enum() *OrderStrategyEnum {
	p := new(OrderStrategyEnum)
	*p = x
	return p
}

func (x OrderStrategyEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderStrategyEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[10].Descriptor()
}

func (OrderStrategyEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[10]
}

func (x OrderStrategyEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderStrategyEnum.Descriptor instead.
func (OrderStrategyEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{10}
}

//订单结算通讯模块枚举
type SettlementModuleEnum int32

const (
	SettlementModuleEnum_UnKown SettlementModuleEnum = 0 //	未知状态缺省值，非法
	SettlementModuleEnum_LOS    SettlementModuleEnum = 1 //	本地订单结算模块
	SettlementModuleEnum_DMC    SettlementModuleEnum = 2 //	设备管理云订单服务模块
	SettlementModuleEnum_ICC    SettlementModuleEnum = 3 //	爱充平台服务模块
	SettlementModuleEnum_XJC    SettlementModuleEnum = 4 //	小桔平台服务模块(小桔SDK版本)
	SettlementModuleEnum_GWC    SettlementModuleEnum = 5 //	国网及类国网协议平台服务模块(标准对外协议)
)

// Enum value maps for SettlementModuleEnum.
var (
	SettlementModuleEnum_name = map[int32]string{
		0: "UnKown",
		1: "LOS",
		2: "DMC",
		3: "ICC",
		4: "XJC",
		5: "GWC",
	}
	SettlementModuleEnum_value = map[string]int32{
		"UnKown": 0,
		"LOS":    1,
		"DMC":    2,
		"ICC":    3,
		"XJC":    4,
		"GWC":    5,
	}
)

func (x SettlementModuleEnum) Enum() *SettlementModuleEnum {
	p := new(SettlementModuleEnum)
	*p = x
	return p
}

func (x SettlementModuleEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SettlementModuleEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[11].Descriptor()
}

func (SettlementModuleEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[11]
}

func (x SettlementModuleEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SettlementModuleEnum.Descriptor instead.
func (SettlementModuleEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{11}
}

//故障告警类型枚举
type AlarmTypeEnum int32

const (
	AlarmTypeEnum_DefaultEndReason           AlarmTypeEnum = 0  //	缺省值
	AlarmTypeEnum_LTEFault                   AlarmTypeEnum = 1  //	蜂窝网络故障 *
	AlarmTypeEnum_WiFiFault                  AlarmTypeEnum = 2  //	wifi网络故障 *
	AlarmTypeEnum_GmacFault                  AlarmTypeEnum = 3  //	有线网络故障 *
	AlarmTypeEnum_NetFault                   AlarmTypeEnum = 4  //	完全网络故障 *
	AlarmTypeEnum_SettlementCloudFault       AlarmTypeEnum = 5  //	当前订单云网络故障 *
	AlarmTypeEnum_MeterOffLine               AlarmTypeEnum = 6  //	电表离线 *
	AlarmTypeEnum_StartUpTimeOut             AlarmTypeEnum = 16 //	订单启动超时
	AlarmTypeEnum_PeriodicCommunicationFault AlarmTypeEnum = 17 //	当前订单云周期通讯超时
	AlarmTypeEnum_OrderSettlementFault       AlarmTypeEnum = 18 //	订单结算失败
	AlarmTypeEnum_SerialNumberFault          AlarmTypeEnum = 32 //	桩编码校验失败
	AlarmTypeEnum_UUIDFault                  AlarmTypeEnum = 33 //	UUID生成异常
	AlarmTypeEnum_FRAMFault                  AlarmTypeEnum = 34 //	热数据初始化失败
	AlarmTypeEnum_MeterFault                 AlarmTypeEnum = 35 //	电表读数校验异常或故障
)

// Enum value maps for AlarmTypeEnum.
var (
	AlarmTypeEnum_name = map[int32]string{
		0:  "DefaultEndReason",
		1:  "LTEFault",
		2:  "WiFiFault",
		3:  "GmacFault",
		4:  "NetFault",
		5:  "SettlementCloudFault",
		6:  "MeterOffLine",
		16: "StartUpTimeOut",
		17: "PeriodicCommunicationFault",
		18: "OrderSettlementFault",
		32: "SerialNumberFault",
		33: "UUIDFault",
		34: "FRAMFault",
		35: "MeterFault",
	}
	AlarmTypeEnum_value = map[string]int32{
		"DefaultEndReason":           0,
		"LTEFault":                   1,
		"WiFiFault":                  2,
		"GmacFault":                  3,
		"NetFault":                   4,
		"SettlementCloudFault":       5,
		"MeterOffLine":               6,
		"StartUpTimeOut":             16,
		"PeriodicCommunicationFault": 17,
		"OrderSettlementFault":       18,
		"SerialNumberFault":          32,
		"UUIDFault":                  33,
		"FRAMFault":                  34,
		"MeterFault":                 35,
	}
)

func (x AlarmTypeEnum) Enum() *AlarmTypeEnum {
	p := new(AlarmTypeEnum)
	*p = x
	return p
}

func (x AlarmTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[12].Descriptor()
}

func (AlarmTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[12]
}

func (x AlarmTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmTypeEnum.Descriptor instead.
func (AlarmTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{12}
}

//	订单启动权限/优先级枚举
type OrderJurisdictionEnum int32

const (
	OrderJurisdictionEnum_DefaultAuthority     OrderJurisdictionEnum = 0 //	无订单启动权限
	OrderJurisdictionEnum_LowAuthority         OrderJurisdictionEnum = 1 //	低订单权限
	OrderJurisdictionEnum_NormalAuthority      OrderJurisdictionEnum = 2 //	普通订单权限
	OrderJurisdictionEnum_ProprietaryAuthority OrderJurisdictionEnum = 3 //	自营订单权限
	OrderJurisdictionEnum_EmergencyAuthority   OrderJurisdictionEnum = 4 //	紧急订单权限，用于矿山公交等大功率需求
	OrderJurisdictionEnum_LocalAuthority       OrderJurisdictionEnum = 5 //	最高订单权限，用于现场演示及展出等目的
)

// Enum value maps for OrderJurisdictionEnum.
var (
	OrderJurisdictionEnum_name = map[int32]string{
		0: "DefaultAuthority",
		1: "LowAuthority",
		2: "NormalAuthority",
		3: "ProprietaryAuthority",
		4: "EmergencyAuthority",
		5: "LocalAuthority",
	}
	OrderJurisdictionEnum_value = map[string]int32{
		"DefaultAuthority":     0,
		"LowAuthority":         1,
		"NormalAuthority":      2,
		"ProprietaryAuthority": 3,
		"EmergencyAuthority":   4,
		"LocalAuthority":       5,
	}
)

func (x OrderJurisdictionEnum) Enum() *OrderJurisdictionEnum {
	p := new(OrderJurisdictionEnum)
	*p = x
	return p
}

func (x OrderJurisdictionEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (OrderJurisdictionEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_OHP_v0_2_proto_enumTypes[13].Descriptor()
}

func (OrderJurisdictionEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_OHP_v0_2_proto_enumTypes[13]
}

func (x OrderJurisdictionEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use OrderJurisdictionEnum.Descriptor instead.
func (OrderJurisdictionEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{13}
}

//用这个定义作为bool，可以区别发送方是否填值
type BoolEnum struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value bool `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *BoolEnum) Reset() {
	*x = BoolEnum{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BoolEnum) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BoolEnum) ProtoMessage() {}

func (x *BoolEnum) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BoolEnum.ProtoReflect.Descriptor instead.
func (*BoolEnum) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{0}
}

func (x *BoolEnum) GetValue() bool {
	if x != nil {
		return x.Value
	}
	return false
}

//用这个定义作为int32，可以区别发送方是否填值
type Int32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value int32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Int32Value) Reset() {
	*x = Int32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Int32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Int32Value) ProtoMessage() {}

func (x *Int32Value) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Int32Value.ProtoReflect.Descriptor instead.
func (*Int32Value) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{1}
}

func (x *Int32Value) GetValue() int32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为uint32，可以区别发送方是否填值
type Uint32Value struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value uint32 `protobuf:"varint,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *Uint32Value) Reset() {
	*x = Uint32Value{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Uint32Value) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Uint32Value) ProtoMessage() {}

func (x *Uint32Value) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Uint32Value.ProtoReflect.Descriptor instead.
func (*Uint32Value) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{2}
}

func (x *Uint32Value) GetValue() uint32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为float，可以区别发送方是否填值
type FloatValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float32 `protobuf:"fixed32,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *FloatValue) Reset() {
	*x = FloatValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *FloatValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*FloatValue) ProtoMessage() {}

func (x *FloatValue) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use FloatValue.ProtoReflect.Descriptor instead.
func (*FloatValue) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{3}
}

func (x *FloatValue) GetValue() float32 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为double，可以区别发送方是否填值
type DoubleValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value float64 `protobuf:"fixed64,1,opt,name=value,proto3" json:"value,omitempty"`
}

func (x *DoubleValue) Reset() {
	*x = DoubleValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DoubleValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DoubleValue) ProtoMessage() {}

func (x *DoubleValue) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DoubleValue.ProtoReflect.Descriptor instead.
func (*DoubleValue) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{4}
}

func (x *DoubleValue) GetValue() float64 {
	if x != nil {
		return x.Value
	}
	return 0
}

//用这个定义作为UUID，可以区别发送方是否填值
type UUIDValue struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Value0 uint64 `protobuf:"varint,1,opt,name=value0,proto3" json:"value0,omitempty"`
	Value1 uint64 `protobuf:"varint,2,opt,name=value1,proto3" json:"value1,omitempty"`
}

func (x *UUIDValue) Reset() {
	*x = UUIDValue{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *UUIDValue) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*UUIDValue) ProtoMessage() {}

func (x *UUIDValue) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use UUIDValue.ProtoReflect.Descriptor instead.
func (*UUIDValue) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{5}
}

func (x *UUIDValue) GetValue0() uint64 {
	if x != nil {
		return x.Value0
	}
	return 0
}

func (x *UUIDValue) GetValue1() uint64 {
	if x != nil {
		return x.Value1
	}
	return 0
}

//秒级时间戳
type DateTimeShort struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint32 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"` //可记录至2106-2-7 14:28:15
}

func (x *DateTimeShort) Reset() {
	*x = DateTimeShort{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeShort) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeShort) ProtoMessage() {}

func (x *DateTimeShort) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeShort.ProtoReflect.Descriptor instead.
func (*DateTimeShort) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{6}
}

func (x *DateTimeShort) GetTime() uint32 {
	if x != nil {
		return x.Time
	}
	return 0
}

//毫秒时间戳
type DateTimeLong struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Time uint64 `protobuf:"varint,1,opt,name=Time,proto3" json:"Time,omitempty"` //Unix标准时间戳
}

func (x *DateTimeLong) Reset() {
	*x = DateTimeLong{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *DateTimeLong) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*DateTimeLong) ProtoMessage() {}

func (x *DateTimeLong) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use DateTimeLong.ProtoReflect.Descriptor instead.
func (*DateTimeLong) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{7}
}

func (x *DateTimeLong) GetTime() uint64 {
	if x != nil {
		return x.Time
	}
	return 0
}

//BmsShakehands-握手阶段BMS信息
type BmsShakehands struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BmsVolMaxAllowed float64 `protobuf:"fixed64,1,opt,name=BmsVolMaxAllowed,proto3" json:"BmsVolMaxAllowed,omitempty"` //	最高允许充电总电压
	GBTProtoVersion  string  `protobuf:"bytes,2,opt,name=GBTProtoVersion,proto3" json:"GBTProtoVersion,omitempty"`     //	GBT27930协议版本号
}

func (x *BmsShakehands) Reset() {
	*x = BmsShakehands{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsShakehands) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsShakehands) ProtoMessage() {}

func (x *BmsShakehands) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsShakehands.ProtoReflect.Descriptor instead.
func (*BmsShakehands) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{8}
}

func (x *BmsShakehands) GetBmsVolMaxAllowed() float64 {
	if x != nil {
		return x.BmsVolMaxAllowed
	}
	return 0
}

func (x *BmsShakehands) GetGBTProtoVersion() string {
	if x != nil {
		return x.GBTProtoVersion
	}
	return ""
}

//BmsIdentify-辨识阶段BMS信息
type BmsIdentify struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryType     int32   `protobuf:"varint,1,opt,name=BatteryType,proto3" json:"BatteryType,omitempty"`         //	电池类型
	CapacityRated   float64 `protobuf:"fixed64,2,opt,name=CapacityRated,proto3" json:"CapacityRated,omitempty"`    //	整车动力蓄电池系统额定容量（AH）
	VoltageRated    float64 `protobuf:"fixed64,3,opt,name=VoltageRated,proto3" json:"VoltageRated,omitempty"`      //	整车动力蓄电池额定总电压
	BatteryVendor   string  `protobuf:"bytes,4,opt,name=BatteryVendor,proto3" json:"BatteryVendor,omitempty"`      //	电池生产厂商名称
	BatterySequence int32   `protobuf:"varint,5,opt,name=BatterySequence,proto3" json:"BatterySequence,omitempty"` //	电池组序号
	ProduceDate     string  `protobuf:"bytes,6,opt,name=ProduceDate,proto3" json:"ProduceDate,omitempty"`          //	电池组生产日期
	ChargeCount     int32   `protobuf:"varint,7,opt,name=ChargeCount,proto3" json:"ChargeCount,omitempty"`         //	电池组充电次数
	RightIdentifier int32   `protobuf:"varint,8,opt,name=RightIdentifier,proto3" json:"RightIdentifier,omitempty"` //	电池组产权标识
	BmsVersion      string  `protobuf:"bytes,9,opt,name=BmsVersion,proto3" json:"BmsVersion,omitempty"`            //	BMS软件版本号
	BmsAndCarId     string  `protobuf:"bytes,10,opt,name=BmsAndCarId,proto3" json:"BmsAndCarId,omitempty"`         //	BMS和车辆辨识报文
	BmsVIN          string  `protobuf:"bytes,11,opt,name=BmsVIN,proto3" json:"BmsVIN,omitempty"`                   //	BMS和车辆VIN
}

func (x *BmsIdentify) Reset() {
	*x = BmsIdentify{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsIdentify) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsIdentify) ProtoMessage() {}

func (x *BmsIdentify) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsIdentify.ProtoReflect.Descriptor instead.
func (*BmsIdentify) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{9}
}

func (x *BmsIdentify) GetBatteryType() int32 {
	if x != nil {
		return x.BatteryType
	}
	return 0
}

func (x *BmsIdentify) GetCapacityRated() float64 {
	if x != nil {
		return x.CapacityRated
	}
	return 0
}

func (x *BmsIdentify) GetVoltageRated() float64 {
	if x != nil {
		return x.VoltageRated
	}
	return 0
}

func (x *BmsIdentify) GetBatteryVendor() string {
	if x != nil {
		return x.BatteryVendor
	}
	return ""
}

func (x *BmsIdentify) GetBatterySequence() int32 {
	if x != nil {
		return x.BatterySequence
	}
	return 0
}

func (x *BmsIdentify) GetProduceDate() string {
	if x != nil {
		return x.ProduceDate
	}
	return ""
}

func (x *BmsIdentify) GetChargeCount() int32 {
	if x != nil {
		return x.ChargeCount
	}
	return 0
}

func (x *BmsIdentify) GetRightIdentifier() int32 {
	if x != nil {
		return x.RightIdentifier
	}
	return 0
}

func (x *BmsIdentify) GetBmsVersion() string {
	if x != nil {
		return x.BmsVersion
	}
	return ""
}

func (x *BmsIdentify) GetBmsAndCarId() string {
	if x != nil {
		return x.BmsAndCarId
	}
	return ""
}

func (x *BmsIdentify) GetBmsVIN() string {
	if x != nil {
		return x.BmsVIN
	}
	return ""
}

//BmsConfig-参数配置阶段BMS信息
type BmsConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VIndAllowedMax float64 `protobuf:"fixed64,1,opt,name=VIndAllowedMax,proto3" json:"VIndAllowedMax,omitempty"` //	单体动力蓄电池最高允许充电电压
	IAllowedMax    float64 `protobuf:"fixed64,2,opt,name=IAllowedMax,proto3" json:"IAllowedMax,omitempty"`       //	最高允许充电电流
	EnergyRated    float64 `protobuf:"fixed64,3,opt,name=EnergyRated,proto3" json:"EnergyRated,omitempty"`       //	动力蓄电池标称总能量
	VAllowedMax    float64 `protobuf:"fixed64,4,opt,name=VAllowedMax,proto3" json:"VAllowedMax,omitempty"`       //	最高允许充电总电压
	TAllowedMax    float64 `protobuf:"fixed64,5,opt,name=TAllowedMax,proto3" json:"TAllowedMax,omitempty"`       //	最高允许温度
	StartSoc       float64 `protobuf:"fixed64,6,opt,name=StartSoc,proto3" json:"StartSoc,omitempty"`             //	整车动力蓄电池荷电状态（SOC）
	VCurrent       float64 `protobuf:"fixed64,7,opt,name=VCurrent,proto3" json:"VCurrent,omitempty"`             //	整车动力蓄电池当前电池电压
	VCOutputMax    float64 `protobuf:"fixed64,8,opt,name=VCOutputMax,proto3" json:"VCOutputMax,omitempty"`       //	充电机最高输出电压
	VCOutputMin    float64 `protobuf:"fixed64,9,opt,name=VCOutputMin,proto3" json:"VCOutputMin,omitempty"`       //	充电机最低输出电压
	ICOutputMax    float64 `protobuf:"fixed64,10,opt,name=ICOutputMax,proto3" json:"ICOutputMax,omitempty"`      //	充电机最大输出电流
	ICOutputMin    float64 `protobuf:"fixed64,11,opt,name=ICOutputMin,proto3" json:"ICOutputMin,omitempty"`      //	充电机最小输出电流
}

func (x *BmsConfig) Reset() {
	*x = BmsConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsConfig) ProtoMessage() {}

func (x *BmsConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsConfig.ProtoReflect.Descriptor instead.
func (*BmsConfig) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{10}
}

func (x *BmsConfig) GetVIndAllowedMax() float64 {
	if x != nil {
		return x.VIndAllowedMax
	}
	return 0
}

func (x *BmsConfig) GetIAllowedMax() float64 {
	if x != nil {
		return x.IAllowedMax
	}
	return 0
}

func (x *BmsConfig) GetEnergyRated() float64 {
	if x != nil {
		return x.EnergyRated
	}
	return 0
}

func (x *BmsConfig) GetVAllowedMax() float64 {
	if x != nil {
		return x.VAllowedMax
	}
	return 0
}

func (x *BmsConfig) GetTAllowedMax() float64 {
	if x != nil {
		return x.TAllowedMax
	}
	return 0
}

func (x *BmsConfig) GetStartSoc() float64 {
	if x != nil {
		return x.StartSoc
	}
	return 0
}

func (x *BmsConfig) GetVCurrent() float64 {
	if x != nil {
		return x.VCurrent
	}
	return 0
}

func (x *BmsConfig) GetVCOutputMax() float64 {
	if x != nil {
		return x.VCOutputMax
	}
	return 0
}

func (x *BmsConfig) GetVCOutputMin() float64 {
	if x != nil {
		return x.VCOutputMin
	}
	return 0
}

func (x *BmsConfig) GetICOutputMax() float64 {
	if x != nil {
		return x.ICOutputMax
	}
	return 0
}

func (x *BmsConfig) GetICOutputMin() float64 {
	if x != nil {
		return x.ICOutputMin
	}
	return 0
}

//BmsChargeFinish-充电结束阶段BMS信息
type BmsChargeFinish struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndSoc             float64 `protobuf:"fixed64,1,opt,name=EndSoc,proto3" json:"EndSoc,omitempty"`                         //	中止荷电状态SOC（%）
	VMinIndividal      float64 `protobuf:"fixed64,2,opt,name=VMinIndividal,proto3" json:"VMinIndividal,omitempty"`           //	动力蓄电池单体最低电压
	VMaxIndividal      float64 `protobuf:"fixed64,3,opt,name=VMaxIndividal,proto3" json:"VMaxIndividal,omitempty"`           //	动力蓄电池单体最高电压
	TemperatureMin     float64 `protobuf:"fixed64,4,opt,name=TemperatureMin,proto3" json:"TemperatureMin,omitempty"`         //	动力蓄电池最低温度
	TemperatureMax     float64 `protobuf:"fixed64,5,opt,name=TemperatureMax,proto3" json:"TemperatureMax,omitempty"`         //	动力蓄电池最高温度
	BmsStopReason      int32   `protobuf:"varint,6,opt,name=BmsStopReason,proto3" json:"BmsStopReason,omitempty"`            //	BMS中止充电原因
	BmsFaultReason     int32   `protobuf:"varint,7,opt,name=BmsFaultReason,proto3" json:"BmsFaultReason,omitempty"`          //	BMS中止充电故障原因
	BmsErrorReason     int32   `protobuf:"varint,8,opt,name=BmsErrorReason,proto3" json:"BmsErrorReason,omitempty"`          //	BMS中止充电错误原因
	ChargerStopReason  int32   `protobuf:"varint,9,opt,name=ChargerStopReason,proto3" json:"ChargerStopReason,omitempty"`    //	充电机中止充电原因
	ChargerFaultReason int32   `protobuf:"varint,10,opt,name=ChargerFaultReason,proto3" json:"ChargerFaultReason,omitempty"` //	充电机中止充电故障原因
	ChargerErrorReason int32   `protobuf:"varint,11,opt,name=ChargerErrorReason,proto3" json:"ChargerErrorReason,omitempty"` //	充电机中止充电错误原因
	BmsEFrame          int32   `protobuf:"varint,12,opt,name=BmsEFrame,proto3" json:"BmsEFrame,omitempty"`                   //	BMS错误报文
	ChargerEFrame      int32   `protobuf:"varint,13,opt,name=ChargerEFrame,proto3" json:"ChargerEFrame,omitempty"`           //	充电机错误报文
}

func (x *BmsChargeFinish) Reset() {
	*x = BmsChargeFinish{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsChargeFinish) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsChargeFinish) ProtoMessage() {}

func (x *BmsChargeFinish) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsChargeFinish.ProtoReflect.Descriptor instead.
func (*BmsChargeFinish) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{11}
}

func (x *BmsChargeFinish) GetEndSoc() float64 {
	if x != nil {
		return x.EndSoc
	}
	return 0
}

func (x *BmsChargeFinish) GetVMinIndividal() float64 {
	if x != nil {
		return x.VMinIndividal
	}
	return 0
}

func (x *BmsChargeFinish) GetVMaxIndividal() float64 {
	if x != nil {
		return x.VMaxIndividal
	}
	return 0
}

func (x *BmsChargeFinish) GetTemperatureMin() float64 {
	if x != nil {
		return x.TemperatureMin
	}
	return 0
}

func (x *BmsChargeFinish) GetTemperatureMax() float64 {
	if x != nil {
		return x.TemperatureMax
	}
	return 0
}

func (x *BmsChargeFinish) GetBmsStopReason() int32 {
	if x != nil {
		return x.BmsStopReason
	}
	return 0
}

func (x *BmsChargeFinish) GetBmsFaultReason() int32 {
	if x != nil {
		return x.BmsFaultReason
	}
	return 0
}

func (x *BmsChargeFinish) GetBmsErrorReason() int32 {
	if x != nil {
		return x.BmsErrorReason
	}
	return 0
}

func (x *BmsChargeFinish) GetChargerStopReason() int32 {
	if x != nil {
		return x.ChargerStopReason
	}
	return 0
}

func (x *BmsChargeFinish) GetChargerFaultReason() int32 {
	if x != nil {
		return x.ChargerFaultReason
	}
	return 0
}

func (x *BmsChargeFinish) GetChargerErrorReason() int32 {
	if x != nil {
		return x.ChargerErrorReason
	}
	return 0
}

func (x *BmsChargeFinish) GetBmsEFrame() int32 {
	if x != nil {
		return x.BmsEFrame
	}
	return 0
}

func (x *BmsChargeFinish) GetChargerEFrame() int32 {
	if x != nil {
		return x.ChargerEFrame
	}
	return 0
}

//BmsCharging-充电阶段BMS信息
type BmsCharging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VDemand         float64      `protobuf:"fixed64,1,opt,name=VDemand,proto3" json:"VDemand,omitempty"`                                              //	需求电压
	IDemand         float64      `protobuf:"fixed64,2,opt,name=IDemand,proto3" json:"IDemand,omitempty"`                                              //	需求电流
	CurrentSoc      float64      `protobuf:"fixed64,3,opt,name=CurrentSoc,proto3" json:"CurrentSoc,omitempty"`                                        //	当前SOC
	RemainTime      float64      `protobuf:"fixed64,4,opt,name=RemainTime,proto3" json:"RemainTime,omitempty"`                                        //	估算剩余充电时间(分钟)
	ChargeMode      ChargingMode `protobuf:"varint,5,opt,name=ChargeMode,proto3,enum=gcu_main_ohp.protobuf.ChargingMode" json:"ChargeMode,omitempty"` //	充电模式(恒压充/恒流充)
	VMeasure        float64      `protobuf:"fixed64,6,opt,name=VMeasure,proto3" json:"VMeasure,omitempty"`                                            //	充电电压测量值
	IMeasure        float64      `protobuf:"fixed64,7,opt,name=IMeasure,proto3" json:"IMeasure,omitempty"`                                            //	充电电流测量值
	VIndMax         float64      `protobuf:"fixed64,8,opt,name=VIndMax,proto3" json:"VIndMax,omitempty"`                                              //	单体电池最高电压
	VIndMaxCode     int32        `protobuf:"varint,9,opt,name=VIndMaxCode,proto3" json:"VIndMaxCode,omitempty"`                                       //	单体电池最高电压所在编号
	VIndMin         float64      `protobuf:"fixed64,10,opt,name=VIndMin,proto3" json:"VIndMin,omitempty"`                                             //	单体电池最低电压
	VIndMinCode     int32        `protobuf:"varint,11,opt,name=VIndMinCode,proto3" json:"VIndMinCode,omitempty"`                                      //	单体电池最低电压所在编号
	TMax            float64      `protobuf:"fixed64,12,opt,name=TMax,proto3" json:"TMax,omitempty"`                                                   //	电池最高温度
	TMaxCode        int32        `protobuf:"varint,13,opt,name=TMaxCode,proto3" json:"TMaxCode,omitempty"`                                            //	电池最高温度检测点编号
	TMin            float64      `protobuf:"fixed64,14,opt,name=TMin,proto3" json:"TMin,omitempty"`                                                   //	电池最低温度
	TMinCode        int32        `protobuf:"varint,15,opt,name=TMinCode,proto3" json:"TMinCode,omitempty"`                                            //	电池最低温度检测点编号
	ChargeAllow     bool         `protobuf:"varint,16,opt,name=ChargeAllow,proto3" json:"ChargeAllow,omitempty"`                                      //	是否允许充电
	VIndHigh        bool         `protobuf:"varint,17,opt,name=VIndHigh,proto3" json:"VIndHigh,omitempty"`                                            //	单体动力蓄电池电压是否过高
	VIndLow         bool         `protobuf:"varint,18,opt,name=VIndLow,proto3" json:"VIndLow,omitempty"`                                              //	单体动力蓄电池电压是否过低
	SoHigh          bool         `protobuf:"varint,19,opt,name=SoHigh,proto3" json:"SoHigh,omitempty"`                                                //	整车动力蓄电池荷电状态SOC是否过高
	SocLow          bool         `protobuf:"varint,20,opt,name=SocLow,proto3" json:"SocLow,omitempty"`                                                //	整车动力蓄电池荷电状态SOC是否过低
	IHigh           bool         `protobuf:"varint,21,opt,name=IHigh,proto3" json:"IHigh,omitempty"`                                                  //	动力蓄电池充电是否过电流
	THigh           bool         `protobuf:"varint,22,opt,name=THigh,proto3" json:"THigh,omitempty"`                                                  //	动力蓄电池温度是否过高
	Insulation      bool         `protobuf:"varint,23,opt,name=Insulation,proto3" json:"Insulation,omitempty"`                                        //	动力蓄电池绝缘状态是否绝缘
	OutputConnector bool         `protobuf:"varint,24,opt,name=OutputConnector,proto3" json:"OutputConnector,omitempty"`                              //	动力蓄电池输出连接器连接状态是否连接
	VIndMaxGroupNum int32        `protobuf:"varint,25,opt,name=VIndMaxGroupNum,proto3" json:"VIndMaxGroupNum,omitempty"`                              //	最高单体动力蓄电池电压所在组号
	HeatingMode     int32        `protobuf:"varint,26,opt,name=HeatingMode,proto3" json:"HeatingMode,omitempty"`                                      //	加热模式0：正常模式，1：充电加热模式，2：加热模式，3：保留
}

func (x *BmsCharging) Reset() {
	*x = BmsCharging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BmsCharging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BmsCharging) ProtoMessage() {}

func (x *BmsCharging) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BmsCharging.ProtoReflect.Descriptor instead.
func (*BmsCharging) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{12}
}

func (x *BmsCharging) GetVDemand() float64 {
	if x != nil {
		return x.VDemand
	}
	return 0
}

func (x *BmsCharging) GetIDemand() float64 {
	if x != nil {
		return x.IDemand
	}
	return 0
}

func (x *BmsCharging) GetCurrentSoc() float64 {
	if x != nil {
		return x.CurrentSoc
	}
	return 0
}

func (x *BmsCharging) GetRemainTime() float64 {
	if x != nil {
		return x.RemainTime
	}
	return 0
}

func (x *BmsCharging) GetChargeMode() ChargingMode {
	if x != nil {
		return x.ChargeMode
	}
	return ChargingMode_DefaultChargingMode
}

func (x *BmsCharging) GetVMeasure() float64 {
	if x != nil {
		return x.VMeasure
	}
	return 0
}

func (x *BmsCharging) GetIMeasure() float64 {
	if x != nil {
		return x.IMeasure
	}
	return 0
}

func (x *BmsCharging) GetVIndMax() float64 {
	if x != nil {
		return x.VIndMax
	}
	return 0
}

func (x *BmsCharging) GetVIndMaxCode() int32 {
	if x != nil {
		return x.VIndMaxCode
	}
	return 0
}

func (x *BmsCharging) GetVIndMin() float64 {
	if x != nil {
		return x.VIndMin
	}
	return 0
}

func (x *BmsCharging) GetVIndMinCode() int32 {
	if x != nil {
		return x.VIndMinCode
	}
	return 0
}

func (x *BmsCharging) GetTMax() float64 {
	if x != nil {
		return x.TMax
	}
	return 0
}

func (x *BmsCharging) GetTMaxCode() int32 {
	if x != nil {
		return x.TMaxCode
	}
	return 0
}

func (x *BmsCharging) GetTMin() float64 {
	if x != nil {
		return x.TMin
	}
	return 0
}

func (x *BmsCharging) GetTMinCode() int32 {
	if x != nil {
		return x.TMinCode
	}
	return 0
}

func (x *BmsCharging) GetChargeAllow() bool {
	if x != nil {
		return x.ChargeAllow
	}
	return false
}

func (x *BmsCharging) GetVIndHigh() bool {
	if x != nil {
		return x.VIndHigh
	}
	return false
}

func (x *BmsCharging) GetVIndLow() bool {
	if x != nil {
		return x.VIndLow
	}
	return false
}

func (x *BmsCharging) GetSoHigh() bool {
	if x != nil {
		return x.SoHigh
	}
	return false
}

func (x *BmsCharging) GetSocLow() bool {
	if x != nil {
		return x.SocLow
	}
	return false
}

func (x *BmsCharging) GetIHigh() bool {
	if x != nil {
		return x.IHigh
	}
	return false
}

func (x *BmsCharging) GetTHigh() bool {
	if x != nil {
		return x.THigh
	}
	return false
}

func (x *BmsCharging) GetInsulation() bool {
	if x != nil {
		return x.Insulation
	}
	return false
}

func (x *BmsCharging) GetOutputConnector() bool {
	if x != nil {
		return x.OutputConnector
	}
	return false
}

func (x *BmsCharging) GetVIndMaxGroupNum() int32 {
	if x != nil {
		return x.VIndMaxGroupNum
	}
	return 0
}

func (x *BmsCharging) GetHeatingMode() int32 {
	if x != nil {
		return x.HeatingMode
	}
	return 0
}

// BMS重连事件
type BMSReConnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOutState   int32          `protobuf:"varint,1,opt,name=TimeOutState,proto3" json:"TimeOutState,omitempty"`                                               //	超时事件(ACK 发生/NACK 未发生)
	BMSTimeoutType BMSTimeoutEnum `protobuf:"varint,2,opt,name=BMSTimeoutType,proto3,enum=gcu_main_ohp.protobuf.BMSTimeoutEnum" json:"BMSTimeoutType,omitempty"` //	超时类型（BHM/BRM/BCP/BCS/BCL/BST/BSD）
	ReconnectCnt   int32          `protobuf:"varint,3,opt,name=ReconnectCnt,proto3" json:"ReconnectCnt,omitempty"`                                               //	超时次数
	NextState      int32          `protobuf:"varint,4,opt,name=NextState,proto3" json:"NextState,omitempty"`                                                     //	下一个重连状态
}

func (x *BMSReConnectEvent) Reset() {
	*x = BMSReConnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSReConnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSReConnectEvent) ProtoMessage() {}

func (x *BMSReConnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSReConnectEvent.ProtoReflect.Descriptor instead.
func (*BMSReConnectEvent) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{13}
}

func (x *BMSReConnectEvent) GetTimeOutState() int32 {
	if x != nil {
		return x.TimeOutState
	}
	return 0
}

func (x *BMSReConnectEvent) GetBMSTimeoutType() BMSTimeoutEnum {
	if x != nil {
		return x.BMSTimeoutType
	}
	return BMSTimeoutEnum_DefaultTimeout
}

func (x *BMSReConnectEvent) GetReconnectCnt() int32 {
	if x != nil {
		return x.ReconnectCnt
	}
	return 0
}

func (x *BMSReConnectEvent) GetNextState() int32 {
	if x != nil {
		return x.NextState
	}
	return 0
}

//需求上传信息
type GunDesire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VDemand            float32 `protobuf:"fixed32,1,opt,name=VDemand,proto3" json:"VDemand,omitempty"`                      //	需求电压
	IDemand            float32 `protobuf:"fixed32,2,opt,name=IDemand,proto3" json:"IDemand,omitempty"`                      //	需求电流
	VPTPDemand         float32 `protobuf:"fixed32,3,opt,name=VPTPDemand,proto3" json:"VPTPDemand,omitempty"`                //	模块PTP开机电压
	IPTPDemand         float32 `protobuf:"fixed32,4,opt,name=IPTPDemand,proto3" json:"IPTPDemand,omitempty"`                //	模块PTP开机电流
	OutConnectorDemand bool    `protobuf:"varint,5,opt,name=OutConnectorDemand,proto3" json:"OutConnectorDemand,omitempty"` //	输出接触器期望状态（吸合/断开）
}

func (x *GunDesire) Reset() {
	*x = GunDesire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunDesire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunDesire) ProtoMessage() {}

func (x *GunDesire) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunDesire.ProtoReflect.Descriptor instead.
func (*GunDesire) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{14}
}

func (x *GunDesire) GetVDemand() float32 {
	if x != nil {
		return x.VDemand
	}
	return 0
}

func (x *GunDesire) GetIDemand() float32 {
	if x != nil {
		return x.IDemand
	}
	return 0
}

func (x *GunDesire) GetVPTPDemand() float32 {
	if x != nil {
		return x.VPTPDemand
	}
	return 0
}

func (x *GunDesire) GetIPTPDemand() float32 {
	if x != nil {
		return x.IPTPDemand
	}
	return 0
}

func (x *GunDesire) GetOutConnectorDemand() bool {
	if x != nil {
		return x.OutConnectorDemand
	}
	return false
}

//可用服务列表
type EnableServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCIServer bool `protobuf:"varint,1,opt,name=VCIServer,proto3" json:"VCIServer,omitempty"` //	VCI模块状态，0表示不可用，1表示可用
	PMMServer bool `protobuf:"varint,2,opt,name=PMMServer,proto3" json:"PMMServer,omitempty"` //	PMM模块状态，0表示不可用，1表示可用
	DMCServer bool `protobuf:"varint,3,opt,name=DMCServer,proto3" json:"DMCServer,omitempty"` //	DMC模块状态，0表示不可用，1表示可用
	OHPServer bool `protobuf:"varint,4,opt,name=OHPServer,proto3" json:"OHPServer,omitempty"` //	OHP模块状态，0表示不可用，1表示可用
	LCRServer bool `protobuf:"varint,5,opt,name=LCRServer,proto3" json:"LCRServer,omitempty"` //	LCR模块状态，0表示不可用，1表示可用
}

func (x *EnableServer) Reset() {
	*x = EnableServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServer) ProtoMessage() {}

func (x *EnableServer) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServer.ProtoReflect.Descriptor instead.
func (*EnableServer) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{15}
}

func (x *EnableServer) GetVCIServer() bool {
	if x != nil {
		return x.VCIServer
	}
	return false
}

func (x *EnableServer) GetPMMServer() bool {
	if x != nil {
		return x.PMMServer
	}
	return false
}

func (x *EnableServer) GetDMCServer() bool {
	if x != nil {
		return x.DMCServer
	}
	return false
}

func (x *EnableServer) GetOHPServer() bool {
	if x != nil {
		return x.OHPServer
	}
	return false
}

func (x *EnableServer) GetLCRServer() bool {
	if x != nil {
		return x.LCRServer
	}
	return false
}

//订单结算通讯模块状态描述
type SettlementModuleState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleID              SettlementModuleEnum  `protobuf:"varint,1,opt,name=ModuleID,proto3,enum=gcu_main_ohp.protobuf.SettlementModuleEnum" json:"ModuleID,omitempty"`            //	订单结算通讯模块
	OffLineStrategy       OrderStrategyEnum     `protobuf:"varint,2,opt,name=OffLineStrategy,proto3,enum=gcu_main_ohp.protobuf.OrderStrategyEnum" json:"OffLineStrategy,omitempty"` //	离线策略
	NormalStrategy        OrderStrategyEnum     `protobuf:"varint,3,opt,name=NormalStrategy,proto3,enum=gcu_main_ohp.protobuf.OrderStrategyEnum" json:"NormalStrategy,omitempty"`   //	常规策略
	RegisterState         bool                  `protobuf:"varint,4,opt,name=RegisterState,proto3" json:"RegisterState,omitempty"`                                                  //	注册状态，0表示不可用，1表示可用
	PeriodicCommunication bool                  `protobuf:"varint,5,opt,name=PeriodicCommunication,proto3" json:"PeriodicCommunication,omitempty"`                                  //	周期联通性，0表示不可用，1表示可用
	Jurisdiction          OrderJurisdictionEnum `protobuf:"varint,6,opt,name=Jurisdiction,proto3,enum=gcu_main_ohp.protobuf.OrderJurisdictionEnum" json:"Jurisdiction,omitempty"`   //	订单启动权限
}

func (x *SettlementModuleState) Reset() {
	*x = SettlementModuleState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SettlementModuleState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SettlementModuleState) ProtoMessage() {}

func (x *SettlementModuleState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SettlementModuleState.ProtoReflect.Descriptor instead.
func (*SettlementModuleState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{16}
}

func (x *SettlementModuleState) GetModuleID() SettlementModuleEnum {
	if x != nil {
		return x.ModuleID
	}
	return SettlementModuleEnum_UnKown
}

func (x *SettlementModuleState) GetOffLineStrategy() OrderStrategyEnum {
	if x != nil {
		return x.OffLineStrategy
	}
	return OrderStrategyEnum_DefaultStrategy
}

func (x *SettlementModuleState) GetNormalStrategy() OrderStrategyEnum {
	if x != nil {
		return x.NormalStrategy
	}
	return OrderStrategyEnum_DefaultStrategy
}

func (x *SettlementModuleState) GetRegisterState() bool {
	if x != nil {
		return x.RegisterState
	}
	return false
}

func (x *SettlementModuleState) GetPeriodicCommunication() bool {
	if x != nil {
		return x.PeriodicCommunication
	}
	return false
}

func (x *SettlementModuleState) GetJurisdiction() OrderJurisdictionEnum {
	if x != nil {
		return x.Jurisdiction
	}
	return OrderJurisdictionEnum_DefaultAuthority
}

//订单费率
type OrderRate struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StarTime   uint32  `protobuf:"varint,1,opt,name=StarTime,proto3" json:"StarTime,omitempty"`      //	费率区间开始时间
	EndTime    uint32  `protobuf:"varint,2,opt,name=EndTime,proto3" json:"EndTime,omitempty"`        //	费率区间结束时间
	RuningRate float64 `protobuf:"fixed64,3,opt,name=RuningRate,proto3" json:"RuningRate,omitempty"` //	执行费率
}

func (x *OrderRate) Reset() {
	*x = OrderRate{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderRate) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderRate) ProtoMessage() {}

func (x *OrderRate) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderRate.ProtoReflect.Descriptor instead.
func (*OrderRate) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{17}
}

func (x *OrderRate) GetStarTime() uint32 {
	if x != nil {
		return x.StarTime
	}
	return 0
}

func (x *OrderRate) GetEndTime() uint32 {
	if x != nil {
		return x.EndTime
	}
	return 0
}

func (x *OrderRate) GetRuningRate() float64 {
	if x != nil {
		return x.RuningRate
	}
	return 0
}

//运行订单参数
type RuningOrderState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ModuleID           SettlementModuleEnum `protobuf:"varint,1,opt,name=ModuleID,proto3,enum=gcu_main_ohp.protobuf.SettlementModuleEnum" json:"ModuleID,omitempty"` //	发起订单结算通讯模块
	OrderUUID          *UUIDValue           `protobuf:"bytes,2,opt,name=OrderUUID,proto3" json:"OrderUUID,omitempty"`                                                //	订单唯一编码
	StartMeterReadOut  float64              `protobuf:"fixed64,3,opt,name=StartMeterReadOut,proto3" json:"StartMeterReadOut,omitempty"`                              //	初始电表电能读数
	NowMeterReadOut    float64              `protobuf:"fixed64,4,opt,name=NowMeterReadOut,proto3" json:"NowMeterReadOut,omitempty"`                                  //	当前电表电能读数
	RuningRateListSize uint32               `protobuf:"varint,5,opt,name=RuningRateListSize,proto3" json:"RuningRateListSize,omitempty"`                             //	订单当前执行费率
	RuningRateList     []*OrderRate         `protobuf:"bytes,6,rep,name=RuningRateList,proto3" json:"RuningRateList,omitempty"`                                      //	订单当前执行费率
}

func (x *RuningOrderState) Reset() {
	*x = RuningOrderState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *RuningOrderState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*RuningOrderState) ProtoMessage() {}

func (x *RuningOrderState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use RuningOrderState.ProtoReflect.Descriptor instead.
func (*RuningOrderState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{18}
}

func (x *RuningOrderState) GetModuleID() SettlementModuleEnum {
	if x != nil {
		return x.ModuleID
	}
	return SettlementModuleEnum_UnKown
}

func (x *RuningOrderState) GetOrderUUID() *UUIDValue {
	if x != nil {
		return x.OrderUUID
	}
	return nil
}

func (x *RuningOrderState) GetStartMeterReadOut() float64 {
	if x != nil {
		return x.StartMeterReadOut
	}
	return 0
}

func (x *RuningOrderState) GetNowMeterReadOut() float64 {
	if x != nil {
		return x.NowMeterReadOut
	}
	return 0
}

func (x *RuningOrderState) GetRuningRateListSize() uint32 {
	if x != nil {
		return x.RuningRateListSize
	}
	return 0
}

func (x *RuningOrderState) GetRuningRateList() []*OrderRate {
	if x != nil {
		return x.RuningRateList
	}
	return nil
}

//电表状态及运行读数
type MeterState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterWReadOut float64 `protobuf:"fixed64,1,opt,name=MeterWReadOut,proto3" json:"MeterWReadOut,omitempty"` //	初始电表电能读数
	MeterIReadOut float64 `protobuf:"fixed64,2,opt,name=MeterIReadOut,proto3" json:"MeterIReadOut,omitempty"` //	初始电表电流读数
	MeterVReadOut float64 `protobuf:"fixed64,3,opt,name=MeterVReadOut,proto3" json:"MeterVReadOut,omitempty"` //	初始电表电压读数
	MeterOffLine  bool    `protobuf:"varint,4,opt,name=MeterOffLine,proto3" json:"MeterOffLine,omitempty"`    //	电表离线状态，0表示离线，1表示正常
	MeterCheck    bool    `protobuf:"varint,5,opt,name=MeterCheck,proto3" json:"MeterCheck,omitempty"`        //	电表校验状态，0表示异常，1表示正常
	RefreshTime   uint64  `protobuf:"varint,6,opt,name=RefreshTime,proto3" json:"RefreshTime,omitempty"`      //	电表状态刷新时间
}

func (x *MeterState) Reset() {
	*x = MeterState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MeterState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MeterState) ProtoMessage() {}

func (x *MeterState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MeterState.ProtoReflect.Descriptor instead.
func (*MeterState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{19}
}

func (x *MeterState) GetMeterWReadOut() float64 {
	if x != nil {
		return x.MeterWReadOut
	}
	return 0
}

func (x *MeterState) GetMeterIReadOut() float64 {
	if x != nil {
		return x.MeterIReadOut
	}
	return 0
}

func (x *MeterState) GetMeterVReadOut() float64 {
	if x != nil {
		return x.MeterVReadOut
	}
	return 0
}

func (x *MeterState) GetMeterOffLine() bool {
	if x != nil {
		return x.MeterOffLine
	}
	return false
}

func (x *MeterState) GetMeterCheck() bool {
	if x != nil {
		return x.MeterCheck
	}
	return false
}

func (x *MeterState) GetRefreshTime() uint64 {
	if x != nil {
		return x.RefreshTime
	}
	return 0
}

//订单流水线状态描述
type OrderPipelineState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterID           uint32                 `protobuf:"varint,1,opt,name=MeterID,proto3" json:"MeterID,omitempty"`                                                           //	当前描述流水线编号，与电表485总线编号一致(0~5)
	ModuleIDSize      uint32                 `protobuf:"varint,2,opt,name=ModuleIDSize,proto3" json:"ModuleIDSize,omitempty"`                                                 //	流水线允许的订单结算通讯模块类型
	ModuleID          []SettlementModuleEnum `protobuf:"varint,3,rep,packed,name=ModuleID,proto3,enum=gcu_main_ohp.protobuf.SettlementModuleEnum" json:"ModuleID,omitempty"`  //	流水线允许的订单结算通讯模块类型
	OnLineState       bool                   `protobuf:"varint,4,opt,name=OnLineState,proto3" json:"OnLineState,omitempty"`                                                   //	流水线可用状态，0表示不可用，1表示可用
	LockState         bool                   `protobuf:"varint,5,opt,name=LockState,proto3" json:"LockState,omitempty"`                                                       //	流水线锁定状态，0表示未锁定，1表示锁定
	RuningState       *RuningOrderState      `protobuf:"bytes,6,opt,name=RuningState,proto3" json:"RuningState,omitempty"`                                                    //	运行订单状态
	MeterStateRefresh *MeterState            `protobuf:"bytes,7,opt,name=MeterStateRefresh,proto3" json:"MeterStateRefresh,omitempty"`                                        //	电表运行状态
	AlarmAnsListSize  uint32                 `protobuf:"varint,8,opt,name=AlarmAnsListSize,proto3" json:"AlarmAnsListSize,omitempty"`                                         //	故障告警属性
	AlarmAnsList      []AlarmTypeEnum        `protobuf:"varint,9,rep,packed,name=AlarmAnsList,proto3,enum=gcu_main_ohp.protobuf.AlarmTypeEnum" json:"AlarmAnsList,omitempty"` //	故障告警属性
}

func (x *OrderPipelineState) Reset() {
	*x = OrderPipelineState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineState) ProtoMessage() {}

func (x *OrderPipelineState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineState.ProtoReflect.Descriptor instead.
func (*OrderPipelineState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{20}
}

func (x *OrderPipelineState) GetMeterID() uint32 {
	if x != nil {
		return x.MeterID
	}
	return 0
}

func (x *OrderPipelineState) GetModuleIDSize() uint32 {
	if x != nil {
		return x.ModuleIDSize
	}
	return 0
}

func (x *OrderPipelineState) GetModuleID() []SettlementModuleEnum {
	if x != nil {
		return x.ModuleID
	}
	return nil
}

func (x *OrderPipelineState) GetOnLineState() bool {
	if x != nil {
		return x.OnLineState
	}
	return false
}

func (x *OrderPipelineState) GetLockState() bool {
	if x != nil {
		return x.LockState
	}
	return false
}

func (x *OrderPipelineState) GetRuningState() *RuningOrderState {
	if x != nil {
		return x.RuningState
	}
	return nil
}

func (x *OrderPipelineState) GetMeterStateRefresh() *MeterState {
	if x != nil {
		return x.MeterStateRefresh
	}
	return nil
}

func (x *OrderPipelineState) GetAlarmAnsListSize() uint32 {
	if x != nil {
		return x.AlarmAnsListSize
	}
	return 0
}

func (x *OrderPipelineState) GetAlarmAnsList() []AlarmTypeEnum {
	if x != nil {
		return x.AlarmAnsList
	}
	return nil
}

//主状态机状态返回描述
type OrderPipelineAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterID          uint32             `protobuf:"varint,1,opt,name=MeterID,proto3" json:"MeterID,omitempty"`                                                              //	当前描述  流水线编号，与电表485总线编号一致(0~5)
	PMMFaultSize     uint32             `protobuf:"varint,2,opt,name=PMMFaultSize,proto3" json:"PMMFaultSize,omitempty"`                                                    //	PMM返回故障
	PMMFault         []PMMFaultStopEnum `protobuf:"varint,3,rep,packed,name=PMMFault,proto3,enum=gcu_main_ohp.protobuf.PMMFaultStopEnum" json:"PMMFault,omitempty"`         //	PMM返回故障
	VCIFaultSize     uint32             `protobuf:"varint,4,opt,name=VCIFaultSize,proto3" json:"VCIFaultSize,omitempty"`                                                    //	VCI返回故障
	VCIFault         []VCIFaultStopEnum `protobuf:"varint,5,rep,packed,name=VCIFault,proto3,enum=gcu_main_ohp.protobuf.VCIFaultStopEnum" json:"VCIFault,omitempty"`         //	VCI返回故障
	BmsShakehandsM   *BmsShakehands     `protobuf:"bytes,6,opt,name=BmsShakehandsM,proto3" json:"BmsShakehandsM,omitempty"`                                                 //	BMS返回信息
	BmsIdentifyM     *BmsIdentify       `protobuf:"bytes,7,opt,name=BmsIdentifyM,proto3" json:"BmsIdentifyM,omitempty"`                                                     //	BMS返回信息
	BmsConfigM       *BmsConfig         `protobuf:"bytes,8,opt,name=BmsConfigM,proto3" json:"BmsConfigM,omitempty"`                                                         //	BMS返回信息
	BmsChargingM     *BmsCharging       `protobuf:"bytes,9,opt,name=BmsChargingM,proto3" json:"BmsChargingM,omitempty"`                                                     //	BMS返回信息
	BmsChargeFinishM *BmsChargeFinish   `protobuf:"bytes,10,opt,name=BmsChargeFinishM,proto3" json:"BmsChargeFinishM,omitempty"`                                            //	BMS返回信息
	ContactorState   ContactorStateEnum `protobuf:"varint,11,opt,name=ContactorState,proto3,enum=gcu_main_ohp.protobuf.ContactorStateEnum" json:"ContactorState,omitempty"` //	PMM返回信息
}

func (x *OrderPipelineAns) Reset() {
	*x = OrderPipelineAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineAns) ProtoMessage() {}

func (x *OrderPipelineAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineAns.ProtoReflect.Descriptor instead.
func (*OrderPipelineAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{21}
}

func (x *OrderPipelineAns) GetMeterID() uint32 {
	if x != nil {
		return x.MeterID
	}
	return 0
}

func (x *OrderPipelineAns) GetPMMFaultSize() uint32 {
	if x != nil {
		return x.PMMFaultSize
	}
	return 0
}

func (x *OrderPipelineAns) GetPMMFault() []PMMFaultStopEnum {
	if x != nil {
		return x.PMMFault
	}
	return nil
}

func (x *OrderPipelineAns) GetVCIFaultSize() uint32 {
	if x != nil {
		return x.VCIFaultSize
	}
	return 0
}

func (x *OrderPipelineAns) GetVCIFault() []VCIFaultStopEnum {
	if x != nil {
		return x.VCIFault
	}
	return nil
}

func (x *OrderPipelineAns) GetBmsShakehandsM() *BmsShakehands {
	if x != nil {
		return x.BmsShakehandsM
	}
	return nil
}

func (x *OrderPipelineAns) GetBmsIdentifyM() *BmsIdentify {
	if x != nil {
		return x.BmsIdentifyM
	}
	return nil
}

func (x *OrderPipelineAns) GetBmsConfigM() *BmsConfig {
	if x != nil {
		return x.BmsConfigM
	}
	return nil
}

func (x *OrderPipelineAns) GetBmsChargingM() *BmsCharging {
	if x != nil {
		return x.BmsChargingM
	}
	return nil
}

func (x *OrderPipelineAns) GetBmsChargeFinishM() *BmsChargeFinish {
	if x != nil {
		return x.BmsChargeFinishM
	}
	return nil
}

func (x *OrderPipelineAns) GetContactorState() ContactorStateEnum {
	if x != nil {
		return x.ContactorState
	}
	return ContactorStateEnum_ContactorUnKown
}

//流水线操作指令
type SysCtrlCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        uint32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`               //	枪/主接触器/电表编号
	StartCmd  bool   `protobuf:"varint,2,opt,name=StartCmd,proto3" json:"StartCmd,omitempty"`   //	开机指令(0表示不操作，1表示开机)
	StartType bool   `protobuf:"varint,3,opt,name=StartType,proto3" json:"StartType,omitempty"` //	开机类型(0表示正常开机，1表示骗取VIN开机)
	StopCmd   bool   `protobuf:"varint,4,opt,name=StopCmd,proto3" json:"StopCmd,omitempty"`     //	关机指令(0表示不操作，1表示关机)
	ElockCmd  bool   `protobuf:"varint,5,opt,name=ElockCmd,proto3" json:"ElockCmd,omitempty"`   //	电子指令(0表示解锁，1表示上锁)
}

func (x *SysCtrlCmd) Reset() {
	*x = SysCtrlCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlCmd) ProtoMessage() {}

func (x *SysCtrlCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlCmd.ProtoReflect.Descriptor instead.
func (*SysCtrlCmd) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{22}
}

func (x *SysCtrlCmd) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SysCtrlCmd) GetStartCmd() bool {
	if x != nil {
		return x.StartCmd
	}
	return false
}

func (x *SysCtrlCmd) GetStartType() bool {
	if x != nil {
		return x.StartType
	}
	return false
}

func (x *SysCtrlCmd) GetStopCmd() bool {
	if x != nil {
		return x.StopCmd
	}
	return false
}

func (x *SysCtrlCmd) GetElockCmd() bool {
	if x != nil {
		return x.ElockCmd
	}
	return false
}

//OHP订单流水线注册信息帧(0x00)
type OrderPipelineLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPipelineProtoVersion string        `protobuf:"bytes,1,opt,name=OrderPipelineProtoVersion,proto3" json:"OrderPipelineProtoVersion,omitempty"`                 //	订单流水线协议版本号
	OrderPipelineVendor       string        `protobuf:"bytes,2,opt,name=OrderPipelineVendor,proto3" json:"OrderPipelineVendor,omitempty"`                             //	订单流水线模块版本号
	SelfCheckRul              SelfCheckType `protobuf:"varint,3,opt,name=SelfCheckRul,proto3,enum=gcu_main_ohp.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"` //	订单流水线模块自检状态
	MeterCount                uint32        `protobuf:"varint,4,opt,name=MeterCount,proto3" json:"MeterCount,omitempty"`                                              //	系统已连接电表数量
}

func (x *OrderPipelineLogin) Reset() {
	*x = OrderPipelineLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineLogin) ProtoMessage() {}

func (x *OrderPipelineLogin) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineLogin.ProtoReflect.Descriptor instead.
func (*OrderPipelineLogin) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{23}
}

func (x *OrderPipelineLogin) GetOrderPipelineProtoVersion() string {
	if x != nil {
		return x.OrderPipelineProtoVersion
	}
	return ""
}

func (x *OrderPipelineLogin) GetOrderPipelineVendor() string {
	if x != nil {
		return x.OrderPipelineVendor
	}
	return ""
}

func (x *OrderPipelineLogin) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

func (x *OrderPipelineLogin) GetMeterCount() uint32 {
	if x != nil {
		return x.MeterCount
	}
	return 0
}

//OHP订单流水线注册信息帧.响应(0x80)
type OrderPipelineLoginAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	OrderPipelineProtoVersion string                 `protobuf:"bytes,1,opt,name=OrderPipelineProtoVersion,proto3" json:"OrderPipelineProtoVersion,omitempty"`                         //	订单流水线协议版本号
	MainStateMachineVendor    string                 `protobuf:"bytes,2,opt,name=MainStateMachineVendor,proto3" json:"MainStateMachineVendor,omitempty"`                               //	主状态机模块版本号
	SelfCheckRul              SelfCheckType          `protobuf:"varint,3,opt,name=SelfCheckRul,proto3,enum=gcu_main_ohp.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"`         //	主状态机模块自检状态
	EnableServerList          *EnableServer          `protobuf:"bytes,4,opt,name=EnableServerList,proto3" json:"EnableServerList,omitempty"`                                           //	主状态机可用服务列表
	AllowListSize             uint32                 `protobuf:"varint,5,opt,name=AllowListSize,proto3" json:"AllowListSize,omitempty"`                                                //  订单结算通讯模块当前配置实际数量
	AllowList                 []SettlementModuleEnum `protobuf:"varint,6,rep,packed,name=AllowList,proto3,enum=gcu_main_ohp.protobuf.SettlementModuleEnum" json:"AllowList,omitempty"` //	订单结算通讯模块当前配置
}

func (x *OrderPipelineLoginAns) Reset() {
	*x = OrderPipelineLoginAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineLoginAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineLoginAns) ProtoMessage() {}

func (x *OrderPipelineLoginAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineLoginAns.ProtoReflect.Descriptor instead.
func (*OrderPipelineLoginAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{24}
}

func (x *OrderPipelineLoginAns) GetOrderPipelineProtoVersion() string {
	if x != nil {
		return x.OrderPipelineProtoVersion
	}
	return ""
}

func (x *OrderPipelineLoginAns) GetMainStateMachineVendor() string {
	if x != nil {
		return x.MainStateMachineVendor
	}
	return ""
}

func (x *OrderPipelineLoginAns) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

func (x *OrderPipelineLoginAns) GetEnableServerList() *EnableServer {
	if x != nil {
		return x.EnableServerList
	}
	return nil
}

func (x *OrderPipelineLoginAns) GetAllowListSize() uint32 {
	if x != nil {
		return x.AllowListSize
	}
	return 0
}

func (x *OrderPipelineLoginAns) GetAllowList() []SettlementModuleEnum {
	if x != nil {
		return x.AllowList
	}
	return nil
}

//OHP订单流水线心跳周期信息帧(0x02)
type OrderPipelineHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr      uint32                   `protobuf:"varint,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`           //	心跳计数
	PipelineStateSize uint32                   `protobuf:"varint,2,opt,name=PipelineStateSize,proto3" json:"PipelineStateSize,omitempty"` //	流水线状态列表
	PipelineState     []*OrderPipelineState    `protobuf:"bytes,3,rep,name=PipelineState,proto3" json:"PipelineState,omitempty"`          //	流水线状态列表
	ModuleStateSize   uint32                   `protobuf:"varint,4,opt,name=ModuleStateSize,proto3" json:"ModuleStateSize,omitempty"`     //	订单结算通讯模块状态列表
	ModuleState       []*SettlementModuleState `protobuf:"bytes,5,rep,name=ModuleState,proto3" json:"ModuleState,omitempty"`              //	订单结算通讯模块状态列表
	CurrentTime       uint64                   `protobuf:"varint,6,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`             //	心跳时间戳
	Interval          uint32                   `protobuf:"varint,7,opt,name=Interval,proto3" json:"Interval,omitempty"`                   //	心跳信息间隔（毫秒）
}

func (x *OrderPipelineHeartbeatReq) Reset() {
	*x = OrderPipelineHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineHeartbeatReq) ProtoMessage() {}

func (x *OrderPipelineHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineHeartbeatReq.ProtoReflect.Descriptor instead.
func (*OrderPipelineHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{25}
}

func (x *OrderPipelineHeartbeatReq) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *OrderPipelineHeartbeatReq) GetPipelineStateSize() uint32 {
	if x != nil {
		return x.PipelineStateSize
	}
	return 0
}

func (x *OrderPipelineHeartbeatReq) GetPipelineState() []*OrderPipelineState {
	if x != nil {
		return x.PipelineState
	}
	return nil
}

func (x *OrderPipelineHeartbeatReq) GetModuleStateSize() uint32 {
	if x != nil {
		return x.ModuleStateSize
	}
	return 0
}

func (x *OrderPipelineHeartbeatReq) GetModuleState() []*SettlementModuleState {
	if x != nil {
		return x.ModuleState
	}
	return nil
}

func (x *OrderPipelineHeartbeatReq) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *OrderPipelineHeartbeatReq) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

//OHP订单流水线心跳周期信息帧.响应(0x82)
type OrderPipelineHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr    uint32              `protobuf:"varint,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`       //	心跳计数
	PipelineAnsSize uint32              `protobuf:"varint,2,opt,name=PipelineAnsSize,proto3" json:"PipelineAnsSize,omitempty"` //	信息返回
	PipelineAns     []*OrderPipelineAns `protobuf:"bytes,3,rep,name=PipelineAns,proto3" json:"PipelineAns,omitempty"`          //	信息返回
	CurrentTime     uint64              `protobuf:"varint,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`         //	心跳时间戳
	Interval        uint32              `protobuf:"varint,5,opt,name=Interval,proto3" json:"Interval,omitempty"`               //	心跳信息间隔（毫秒）
}

func (x *OrderPipelineHeartbeatAns) Reset() {
	*x = OrderPipelineHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineHeartbeatAns) ProtoMessage() {}

func (x *OrderPipelineHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineHeartbeatAns.ProtoReflect.Descriptor instead.
func (*OrderPipelineHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{26}
}

func (x *OrderPipelineHeartbeatAns) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *OrderPipelineHeartbeatAns) GetPipelineAnsSize() uint32 {
	if x != nil {
		return x.PipelineAnsSize
	}
	return 0
}

func (x *OrderPipelineHeartbeatAns) GetPipelineAns() []*OrderPipelineAns {
	if x != nil {
		return x.PipelineAns
	}
	return nil
}

func (x *OrderPipelineHeartbeatAns) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *OrderPipelineHeartbeatAns) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

//订单流水线realtimepush
//订单流水线突发上传信息帧(0x04)
type OrderPipelineRTpush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MeterID     uint32               `protobuf:"varint,1,opt,name=MeterID,proto3" json:"MeterID,omitempty"`                                                   //	当前描述流水线编号，与电表485总线编号一致(0~5)
	ModuleID    SettlementModuleEnum `protobuf:"varint,2,opt,name=ModuleID,proto3,enum=gcu_main_ohp.protobuf.SettlementModuleEnum" json:"ModuleID,omitempty"` //	发起订单的结算模块类型
	RTpushCtr   uint32               `protobuf:"varint,3,opt,name=RTpushCtr,proto3" json:"RTpushCtr,omitempty"`                                               //	推送计数
	SysCtrlList *SysCtrlCmd          `protobuf:"bytes,4,opt,name=SysCtrlList,proto3" json:"SysCtrlList,omitempty"`                                            //	操作指令
	Interval    uint32               `protobuf:"varint,5,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                 //	反馈超时预期（毫秒）
}

func (x *OrderPipelineRTpush) Reset() {
	*x = OrderPipelineRTpush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineRTpush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineRTpush) ProtoMessage() {}

func (x *OrderPipelineRTpush) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineRTpush.ProtoReflect.Descriptor instead.
func (*OrderPipelineRTpush) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{27}
}

func (x *OrderPipelineRTpush) GetMeterID() uint32 {
	if x != nil {
		return x.MeterID
	}
	return 0
}

func (x *OrderPipelineRTpush) GetModuleID() SettlementModuleEnum {
	if x != nil {
		return x.ModuleID
	}
	return SettlementModuleEnum_UnKown
}

func (x *OrderPipelineRTpush) GetRTpushCtr() uint32 {
	if x != nil {
		return x.RTpushCtr
	}
	return 0
}

func (x *OrderPipelineRTpush) GetSysCtrlList() *SysCtrlCmd {
	if x != nil {
		return x.SysCtrlList
	}
	return nil
}

func (x *OrderPipelineRTpush) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

//订单流水线realtimepull
//订单流水线突发接收信息帧(0x84)
type OrderPipelineRTpull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                //	当前描述枪头编号，与CAN总线编号一致(0~5)
	RTpullCtr    uint32             `protobuf:"varint,2,opt,name=RTpullCtr,proto3" json:"RTpullCtr,omitempty"`                                                  //	推送计数
	PMMFaultSize uint32             `protobuf:"varint,3,opt,name=PMMFaultSize,proto3" json:"PMMFaultSize,omitempty"`                                            //	PMM返回故障实际数量
	PMMFault     []PMMFaultStopEnum `protobuf:"varint,4,rep,packed,name=PMMFault,proto3,enum=gcu_main_ohp.protobuf.PMMFaultStopEnum" json:"PMMFault,omitempty"` //	PMM返回故障
	VCIFaultSize uint32             `protobuf:"varint,5,opt,name=VCIFaultSize,proto3" json:"VCIFaultSize,omitempty"`                                            //	VCI返回故障
	VCIFault     []VCIFaultStopEnum `protobuf:"varint,6,rep,packed,name=VCIFault,proto3,enum=gcu_main_ohp.protobuf.VCIFaultStopEnum" json:"VCIFault,omitempty"` //	VCI返回故障
	Interval     uint32             `protobuf:"varint,7,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                    //	反馈超时预期（毫秒）
}

func (x *OrderPipelineRTpull) Reset() {
	*x = OrderPipelineRTpull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[28]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *OrderPipelineRTpull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*OrderPipelineRTpull) ProtoMessage() {}

func (x *OrderPipelineRTpull) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_OHP_v0_2_proto_msgTypes[28]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use OrderPipelineRTpull.ProtoReflect.Descriptor instead.
func (*OrderPipelineRTpull) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP(), []int{28}
}

func (x *OrderPipelineRTpull) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *OrderPipelineRTpull) GetRTpullCtr() uint32 {
	if x != nil {
		return x.RTpullCtr
	}
	return 0
}

func (x *OrderPipelineRTpull) GetPMMFaultSize() uint32 {
	if x != nil {
		return x.PMMFaultSize
	}
	return 0
}

func (x *OrderPipelineRTpull) GetPMMFault() []PMMFaultStopEnum {
	if x != nil {
		return x.PMMFault
	}
	return nil
}

func (x *OrderPipelineRTpull) GetVCIFaultSize() uint32 {
	if x != nil {
		return x.VCIFaultSize
	}
	return 0
}

func (x *OrderPipelineRTpull) GetVCIFault() []VCIFaultStopEnum {
	if x != nil {
		return x.VCIFault
	}
	return nil
}

func (x *OrderPipelineRTpull) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

var File_GCU_FSM_OHP_v0_2_proto protoreflect.FileDescriptor

var file_GCU_FSM_OHP_v0_2_proto_rawDesc = []byte{
	0x0a, 0x16, 0x47, 0x43, 0x55, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x4f, 0x48, 0x50, 0x5f, 0x76, 0x30,
	0x2e, 0x32, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22,
	0x20, 0x0a, 0x08, 0x42, 0x6f, 0x6f, 0x6c, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x05, 0x76,
	0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x22, 0x22, 0x0a, 0x0a, 0x49, 0x6e, 0x74, 0x33, 0x32, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12,
	0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x05,
	0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23, 0x0a, 0x0b, 0x55, 0x69, 0x6e, 0x74, 0x33, 0x32, 0x56,
	0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x22, 0x0a, 0x0a, 0x46, 0x6c,
	0x6f, 0x61, 0x74, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x22, 0x23,
	0x0a, 0x0b, 0x44, 0x6f, 0x75, 0x62, 0x6c, 0x65, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x12, 0x14, 0x0a,
	0x05, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x05, 0x76, 0x61,
	0x6c, 0x75, 0x65, 0x22, 0x3b, 0x0a, 0x09, 0x55, 0x55, 0x49, 0x44, 0x56, 0x61, 0x6c, 0x75, 0x65,
	0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x18, 0x01, 0x20, 0x01, 0x28, 0x04,
	0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x30, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x61, 0x6c, 0x75,
	0x65, 0x31, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x06, 0x76, 0x61, 0x6c, 0x75, 0x65, 0x31,
	0x22, 0x23, 0x0a, 0x0d, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x53, 0x68, 0x6f, 0x72,
	0x74, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x22, 0x0a, 0x0c, 0x44, 0x61, 0x74, 0x65, 0x54, 0x69, 0x6d,
	0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x12, 0x0a, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x04, 0x54, 0x69, 0x6d, 0x65, 0x22, 0x65, 0x0a, 0x0d, 0x42, 0x6d, 0x73,
	0x53, 0x68, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x42, 0x6d,
	0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x10, 0x42, 0x6d, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x28, 0x0a, 0x0f, 0x47, 0x42, 0x54, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0f, 0x47, 0x42, 0x54, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e,
	0x22, 0x91, 0x03, 0x0a, 0x0b, 0x42, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x12, 0x20, 0x0a, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x61,
	0x74, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x43, 0x61, 0x70, 0x61, 0x63,
	0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0c,
	0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d,
	0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x0d, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x42, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x71,
	0x75, 0x65, 0x6e, 0x63, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x42, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x53, 0x65, 0x71, 0x75, 0x65, 0x6e, 0x63, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x07, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x12, 0x28, 0x0a, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66,
	0x69, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0f, 0x52, 0x69, 0x67, 0x68, 0x74,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x42, 0x6d,
	0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a,
	0x42, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x42, 0x6d,
	0x73, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x0b, 0x42, 0x6d, 0x73, 0x41, 0x6e, 0x64, 0x43, 0x61, 0x72, 0x49, 0x64, 0x12, 0x16, 0x0a, 0x06,
	0x42, 0x6d, 0x73, 0x56, 0x49, 0x4e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x42, 0x6d,
	0x73, 0x56, 0x49, 0x4e, 0x22, 0xfb, 0x02, 0x0a, 0x09, 0x42, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x12, 0x26, 0x0a, 0x0e, 0x56, 0x49, 0x6e, 0x64, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x56, 0x49, 0x6e, 0x64,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b, 0x49, 0x41,
	0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x49, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x20,
	0x0a, 0x0b, 0x56, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x56, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x54, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x54, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d,
	0x61, 0x78, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x1a,
	0x0a, 0x08, 0x56, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x08, 0x56, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x43,
	0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0b, 0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a, 0x0b,
	0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x56, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x61, 0x78,
	0x12, 0x20, 0x0a, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d, 0x69, 0x6e, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0b, 0x49, 0x43, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x4d,
	0x69, 0x6e, 0x22, 0x8d, 0x04, 0x0a, 0x0f, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x45, 0x6e, 0x64, 0x53, 0x6f, 0x63,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x06, 0x45, 0x6e, 0x64, 0x53, 0x6f, 0x63, 0x12, 0x24,
	0x0a, 0x0d, 0x56, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x56, 0x4d, 0x69, 0x6e, 0x49, 0x6e, 0x64, 0x69, 0x76,
	0x69, 0x64, 0x61, 0x6c, 0x12, 0x24, 0x0a, 0x0d, 0x56, 0x4d, 0x61, 0x78, 0x49, 0x6e, 0x64, 0x69,
	0x76, 0x69, 0x64, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x56, 0x4d, 0x61,
	0x78, 0x49, 0x6e, 0x64, 0x69, 0x76, 0x69, 0x64, 0x61, 0x6c, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65,
	0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x01, 0x52, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x54, 0x65, 0x6d, 0x70, 0x65, 0x72, 0x61, 0x74, 0x75, 0x72,
	0x65, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0e, 0x54, 0x65, 0x6d, 0x70,
	0x65, 0x72, 0x61, 0x74, 0x75, 0x72, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x42, 0x6d,
	0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0d, 0x42, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6d, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x42, 0x6d, 0x73, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x42, 0x6d, 0x73, 0x45,
	0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x0e, 0x42, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x12, 0x2c, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x05, 0x52, 0x11, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e,
	0x0a, 0x12, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65,
	0x61, 0x73, 0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x12, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x1c,
	0x0a, 0x09, 0x42, 0x6d, 0x73, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x09, 0x42, 0x6d, 0x73, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x0d, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x46, 0x72, 0x61,
	0x6d, 0x65, 0x22, 0xa0, 0x06, 0x0a, 0x0b, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x01, 0x52, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07,
	0x49, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x49,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x53, 0x6f, 0x63, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x43, 0x75, 0x72, 0x72,
	0x65, 0x6e, 0x74, 0x53, 0x6f, 0x63, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x65, 0x6d, 0x61, 0x69, 0x6e,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x65, 0x6d, 0x61,
	0x69, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x4d, 0x6f, 0x64, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x52,
	0x0a, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x56,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x56,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08, 0x49, 0x4d, 0x65, 0x61, 0x73,
	0x75, 0x72, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x08,
	0x20, 0x01, 0x28, 0x01, 0x52, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x20, 0x0a,
	0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0b, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x18, 0x0a, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x01,
	0x52, 0x07, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x56, 0x49, 0x6e,
	0x64, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b,
	0x56, 0x49, 0x6e, 0x64, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x4d, 0x61, 0x78, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x4d, 0x61, 0x78, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x12, 0x0a, 0x04, 0x54,
	0x4d, 0x69, 0x6e, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x01, 0x52, 0x04, 0x54, 0x4d, 0x69, 0x6e, 0x12,
	0x1a, 0x0a, 0x08, 0x54, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0f, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x08, 0x54, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x18, 0x10, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x0b, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x12, 0x1a, 0x0a,
	0x08, 0x56, 0x49, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x18, 0x11, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x08, 0x56, 0x49, 0x6e, 0x64, 0x48, 0x69, 0x67, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x56, 0x49, 0x6e,
	0x64, 0x4c, 0x6f, 0x77, 0x18, 0x12, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x56, 0x49, 0x6e, 0x64,
	0x4c, 0x6f, 0x77, 0x12, 0x16, 0x0a, 0x06, 0x53, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x18, 0x13, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x6f, 0x48, 0x69, 0x67, 0x68, 0x12, 0x16, 0x0a, 0x06, 0x53,
	0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x18, 0x14, 0x20, 0x01, 0x28, 0x08, 0x52, 0x06, 0x53, 0x6f, 0x63,
	0x4c, 0x6f, 0x77, 0x12, 0x14, 0x0a, 0x05, 0x49, 0x48, 0x69, 0x67, 0x68, 0x18, 0x15, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x05, 0x49, 0x48, 0x69, 0x67, 0x68, 0x12, 0x14, 0x0a, 0x05, 0x54, 0x48, 0x69,
	0x67, 0x68, 0x18, 0x16, 0x20, 0x01, 0x28, 0x08, 0x52, 0x05, 0x54, 0x48, 0x69, 0x67, 0x68, 0x12,
	0x1e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x17, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x0a, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12,
	0x28, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x18, 0x18, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0f, 0x4f, 0x75, 0x74, 0x70, 0x75, 0x74,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x56, 0x49, 0x6e,
	0x64, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x19, 0x20, 0x01,
	0x28, 0x05, 0x52, 0x0f, 0x56, 0x49, 0x6e, 0x64, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70,
	0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f,
	0x64, 0x65, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x43,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x0c, 0x54, 0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x4d, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e,
	0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22,
	0x0a, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x0c, 0x52, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43,
	0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x05, 0x52, 0x09, 0x4e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x22, 0xaf, 0x01, 0x0a, 0x09, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x12, 0x18,
	0x0a, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x44, 0x65, 0x6d,
	0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x49, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x49, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x12,
	0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72,
	0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65,
	0x72, 0x12, 0x1c, 0x0a, 0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x44, 0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x08, 0x52, 0x09, 0x44, 0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x4f, 0x48, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x4f, 0x48, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c,
	0x43, 0x52, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09,
	0x4c, 0x43, 0x52, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0xb4, 0x03, 0x0a, 0x15, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65,
	0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x52, 0x0a, 0x0f,
	0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x0f, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79,
	0x12, 0x50, 0x0a, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x28, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0e, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65,
	0x67, 0x79, 0x12, 0x24, 0x0a, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0d, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x15, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x69,
	0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x50,
	0x0a, 0x0c, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x2c, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0c, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e,
	0x22, 0x61, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52, 0x61, 0x74, 0x65, 0x12, 0x1a, 0x0a,
	0x08, 0x53, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x08, 0x53, 0x74, 0x61, 0x72, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x45, 0x6e, 0x64,
	0x54, 0x69, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x45, 0x6e, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0a, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52,
	0x61, 0x74, 0x65, 0x22, 0xed, 0x02, 0x0a, 0x10, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x47, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49,
	0x44, 0x12, 0x3e, 0x0a, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49, 0x44, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x55, 0x55, 0x49,
	0x44, 0x56, 0x61, 0x6c, 0x75, 0x65, 0x52, 0x09, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x55, 0x55, 0x49,
	0x44, 0x12, 0x2c, 0x0a, 0x11, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52,
	0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x11, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12,
	0x28, 0x0a, 0x0f, 0x4e, 0x6f, 0x77, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4f,
	0x75, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0f, 0x4e, 0x6f, 0x77, 0x4d, 0x65, 0x74,
	0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x2e, 0x0a, 0x12, 0x52, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18,
	0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x48, 0x0a, 0x0e, 0x52, 0x75, 0x6e,
	0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x52,
	0x61, 0x74, 0x65, 0x52, 0x0e, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x52, 0x61, 0x74, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xe4, 0x01, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x57, 0x52, 0x65, 0x61, 0x64,
	0x4f, 0x75, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x57, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x24, 0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x49, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x01, 0x52,
	0x0d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x52, 0x65, 0x61, 0x64, 0x4f, 0x75, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x01, 0x52, 0x0d, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x52, 0x65, 0x61,
	0x64, 0x4f, 0x75, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66,
	0x4c, 0x69, 0x6e, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0c, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x4f, 0x66, 0x66, 0x4c, 0x69, 0x6e, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x65,
	0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0a, 0x4d, 0x65,
	0x74, 0x65, 0x72, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b, 0x52, 0x65, 0x66, 0x72,
	0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x52,
	0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xed, 0x03, 0x0a, 0x12, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0c, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x53, 0x69, 0x7a, 0x65, 0x12,
	0x47, 0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x03, 0x20, 0x03, 0x28,
	0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65,
	0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x4f, 0x6e, 0x4c, 0x69,
	0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x0b, 0x4f,
	0x6e, 0x4c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f,
	0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4c,
	0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x69,
	0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x12, 0x4f, 0x0a, 0x11, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x65, 0x66, 0x72, 0x65, 0x73, 0x68, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x11, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x65, 0x66,
	0x72, 0x65, 0x73, 0x68, 0x12, 0x2a, 0x0a, 0x10, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x48, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xc5, 0x05, 0x0a, 0x10, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x73, 0x12,
	0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x50, 0x4d, 0x4d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a,
	0x08, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0e, 0x32,
	0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75,
	0x6d, 0x52, 0x08, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x42,
	0x6d, 0x73, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x4d, 0x18, 0x06, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f,
	0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d, 0x73, 0x53,
	0x68, 0x61, 0x6b, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x52, 0x0e, 0x42, 0x6d, 0x73, 0x53, 0x68,
	0x61, 0x6b, 0x65, 0x68, 0x61, 0x6e, 0x64, 0x73, 0x4d, 0x12, 0x46, 0x0a, 0x0c, 0x42, 0x6d, 0x73,
	0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79, 0x4d, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74,
	0x69, 0x66, 0x79, 0x52, 0x0c, 0x42, 0x6d, 0x73, 0x49, 0x64, 0x65, 0x6e, 0x74, 0x69, 0x66, 0x79,
	0x4d, 0x12, 0x40, 0x0a, 0x0a, 0x42, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x4d, 0x18,
	0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d,
	0x73, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52, 0x0a, 0x42, 0x6d, 0x73, 0x43, 0x6f, 0x6e, 0x66,
	0x69, 0x67, 0x4d, 0x12, 0x46, 0x0a, 0x0c, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0c, 0x42,
	0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x12, 0x52, 0x0a, 0x10, 0x42,
	0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x18,
	0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x6d,
	0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x52, 0x10, 0x42,
	0x6d, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x46, 0x69, 0x6e, 0x69, 0x73, 0x68, 0x4d, 0x12,
	0x51, 0x0a, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x22, 0x8c, 0x01, 0x0a, 0x0a, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6d,
	0x64, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49,
	0x44, 0x12, 0x1a, 0x0a, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x08, 0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x1c, 0x0a,
	0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08,
	0x52, 0x09, 0x53, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x18, 0x0a, 0x07, 0x53,
	0x74, 0x6f, 0x70, 0x43, 0x6d, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6d, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08, 0x45, 0x6c, 0x6f, 0x63, 0x6b, 0x43, 0x6d,
	0x64, 0x22, 0xee, 0x01, 0x0a, 0x12, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c,
	0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x3c, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65,
	0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x19, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50,
	0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66,
	0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x22, 0x99, 0x03, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x41, 0x6e, 0x73, 0x12, 0x3c, 0x0a, 0x19,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61,
	0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65,
	0x6e, 0x64, 0x6f, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52,
	0x75, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c,
	0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x12, 0x4f, 0x0a, 0x10,
	0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45,
	0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2b, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53,
	0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x09, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xf6,
	0x02, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c,
	0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72,
	0x12, 0x2c, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4f,
	0x0a, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x52, 0x0d, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x28, 0x0a, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69,
	0x7a, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x4e, 0x0a, 0x0b, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x2c,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e,
	0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0b, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b,
	0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xf2, 0x01, 0x0a, 0x19, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x41, 0x6e, 0x73, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65,
	0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x28, 0x0a, 0x0f, 0x50, 0x69, 0x70,
	0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x73, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0f, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x73, 0x53,
	0x69, 0x7a, 0x65, 0x12, 0x49, 0x0a, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41,
	0x6e, 0x73, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d,
	0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e,
	0x73, 0x52, 0x0b, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x41, 0x6e, 0x73, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xf7, 0x01, 0x0a,
	0x13, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x54,
	0x70, 0x75, 0x73, 0x68, 0x12, 0x18, 0x0a, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x49, 0x44, 0x12, 0x47,
	0x0a, 0x08, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x2b, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52, 0x54, 0x70, 0x75, 0x73,
	0x68, 0x43, 0x74, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x54, 0x70, 0x75,
	0x73, 0x68, 0x43, 0x74, 0x72, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6d, 0x64, 0x52, 0x0b, 0x53,
	0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x22, 0xb1, 0x02, 0x0a, 0x13, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x12, 0x0e,
	0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c,
	0x0a, 0x09, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x12, 0x22, 0x0a, 0x0c,
	0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65,
	0x12, 0x43, 0x0a, 0x08, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x03,
	0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68,
	0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x4d, 0x4d, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x50, 0x4d, 0x4d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x69, 0x7a, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x56, 0x43, 0x49,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x69, 0x7a, 0x65, 0x12, 0x43, 0x0a, 0x08, 0x56, 0x43, 0x49,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x27, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x6f, 0x68, 0x70, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x2a, 0xee, 0x03, 0x0a, 0x10, 0x50,
	0x4d, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x50, 0x4d, 0x4d, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x00, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x76, 0x64, 0x63, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x48, 0x76, 0x64, 0x63, 0x47,
	0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x76,
	0x64, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f,
	0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08,
	0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61,
	0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x45, 0x50, 0x52,
	0x4f, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e,
	0x45, 0x72, 0x72, 0x10, 0x14, 0x12, 0x0d, 0x0a, 0x09, 0x41, 0x43, 0x4c, 0x6f, 0x77, 0x56, 0x6f,
	0x6c, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x43, 0x4c, 0x61, 0x63, 0x6b, 0x50, 0x68,
	0x61, 0x73, 0x65, 0x10, 0x16, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x65, 0x72, 0x55, 0x6e, 0x62, 0x6c,
	0x6e, 0x63, 0x64, 0x43, 0x75, 0x72, 0x72, 0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x52,
	0x65, 0x70, 0x65, 0x61, 0x74, 0x10, 0x18, 0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4f, 0x76, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x19, 0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x46, 0x43, 0x50, 0x72,
	0x6f, 0x74, 0x65, 0x63, 0x74, 0x10, 0x1a, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x67, 0x68,
	0x74, 0x55, 0x6e, 0x62, 0x6c, 0x6e, 0x63, 0x64, 0x43, 0x75, 0x72, 0x72, 0x10, 0x1b, 0x12, 0x0f,
	0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x68, 0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x1c, 0x12,
	0x0b, 0x0a, 0x07, 0x53, 0x43, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f, 0x6d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x1e, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63, 0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d, 0x4d, 0x6f, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x10, 0x21, 0x12, 0x12, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x70,
	0x6c, 0x69, 0x66, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x22, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43,
	0x43, 0x75, 0x74, 0x10, 0x23, 0x12, 0x09, 0x0a, 0x05, 0x44, 0x43, 0x4f, 0x43, 0x50, 0x10, 0x24,
	0x12, 0x14, 0x0a, 0x10, 0x42, 0x6f, 0x61, 0x72, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74,
	0x46, 0x61, 0x69, 0x6c, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x54,
	0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x53,
	0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x46,
	0x43, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x28, 0x2a, 0xb7, 0x0c, 0x0a, 0x10,
	0x56, 0x43, 0x49, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x56, 0x43, 0x49, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x00, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x69,
	0x72, 0x63, 0x75, 0x69, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10,
	0x02, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x50, 0x61, 0x63,
	0x6b, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42,
	0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x05,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x4c, 0x6f, 0x77, 0x54, 0x65,
	0x6d, 0x70, 0x10, 0x06, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x54, 0x68, 0x65, 0x72, 0x6d,
	0x61, 0x6c, 0x52, 0x75, 0x6e, 0x61, 0x77, 0x61, 0x79, 0x10, 0x07, 0x12, 0x15, 0x0a, 0x11, 0x42,
	0x4d, 0x53, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x72, 0x69, 0x74,
	0x10, 0x08, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x4d, 0x53, 0x44, 0x61, 0x74, 0x61, 0x55, 0x70, 0x64,
	0x61, 0x74, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x09, 0x12, 0x11, 0x0a,
	0x0d, 0x42, 0x4d, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x0a,
	0x12, 0x17, 0x0a, 0x13, 0x42, 0x4d, 0x53, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4d, 0x53,
	0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6e, 0x63, 0x74, 0x65, 0x72, 0x4f, 0x70, 0x65, 0x6e, 0x10,
	0x0c, 0x12, 0x19, 0x0a, 0x15, 0x43, 0x68, 0x67, 0x65, 0x72, 0x41, 0x75, 0x78, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x20, 0x12, 0x15, 0x0a, 0x11,
	0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x21, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x54, 0x69, 0x6d,
	0x65, 0x4f, 0x75, 0x74, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x57, 0x61, 0x72, 0x6e, 0x10, 0x23, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74,
	0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x24, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x53,
	0x4d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x25, 0x12, 0x11, 0x0a, 0x0d, 0x45, 0x6c,
	0x6f, 0x63, 0x6b, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x26, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x43, 0x31, 0x56, 0x6f, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x27, 0x12, 0x12, 0x0a, 0x0e, 0x47, 0x75, 0x6e, 0x4f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x56, 0x6f, 0x6c, 0x74, 0x10, 0x28, 0x12, 0x15, 0x0a, 0x11, 0x47, 0x75, 0x6e, 0x52, 0x65, 0x73,
	0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x29, 0x12, 0x12, 0x0a,
	0x0e, 0x46, 0x75, 0x73, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x2a, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x2b, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x68, 0x67, 0x47, 0x75, 0x6e, 0x4f,
	0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x40, 0x12, 0x16, 0x0a, 0x12, 0x4f, 0x75, 0x74,
	0x52, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10,
	0x41, 0x12, 0x15, 0x0a, 0x11, 0x4f, 0x75, 0x74, 0x52, 0x6c, 0x79, 0x46, 0x72, 0x6f, 0x6e, 0x74,
	0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x42, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x61, 0x74, 0x56,
	0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x43, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x61, 0x74, 0x56,
	0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x44, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4d, 0x53, 0x52, 0x65,
	0x70, 0x6f, 0x72, 0x74, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x45, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x6c,
	0x4c, 0x6f, 0x77, 0x10, 0x46, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72,
	0x43, 0x75, 0x72, 0x72, 0x10, 0x47, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x65, 0x72, 0x55, 0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x60, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x52, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x61, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x52, 0x4d, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x10, 0x62, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x43, 0x50, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x63, 0x12, 0x0f,
	0x0a, 0x0b, 0x42, 0x43, 0x50, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x64, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x42, 0x52, 0x4f, 0x41, 0x41, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x66, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x4d, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x67, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x53, 0x4d, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c,
	0x10, 0x68, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x4c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x69, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x10, 0x6a, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x53, 0x4d, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c,
	0x4c, 0x6f, 0x77, 0x10, 0x6b, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x4d, 0x53, 0x4f, 0x43, 0x48,
	0x69, 0x67, 0x68, 0x10, 0x6c, 0x12, 0x0d, 0x0a, 0x09, 0x42, 0x53, 0x4d, 0x53, 0x4f, 0x43, 0x4c,
	0x6f, 0x77, 0x10, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x53, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x4f,
	0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x10, 0x6e, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x4d,
	0x42, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x48, 0x69, 0x67, 0x68, 0x10, 0x6f, 0x12, 0x12, 0x0a,
	0x0e, 0x42, 0x53, 0x4d, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10,
	0x70, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x53, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10, 0x71, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x54, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x72, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x54, 0x4d,
	0x65, 0x65, 0x74, 0x53, 0x4f, 0x43, 0x10, 0x73, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x54, 0x4d,
	0x65, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x10, 0x74, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x54, 0x4d,
	0x65, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x10, 0x75, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x53, 0x54, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x76,
	0x12, 0x19, 0x0a, 0x15, 0x42, 0x53, 0x54, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x77, 0x12, 0x16, 0x0a, 0x12, 0x42,
	0x53, 0x54, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x41, 0x62, 0x6e, 0x6f,
	0x72, 0x10, 0x78, 0x12, 0x16, 0x0a, 0x12, 0x42, 0x53, 0x54, 0x43, 0x68, 0x67, 0x43, 0x6f, 0x6e,
	0x6e, 0x65, 0x63, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10, 0x79, 0x12, 0x12, 0x0a, 0x0e, 0x42,
	0x53, 0x54, 0x42, 0x61, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x7a, 0x12,
	0x18, 0x0a, 0x14, 0x42, 0x53, 0x54, 0x48, 0x69, 0x67, 0x68, 0x56, 0x6f, 0x6c, 0x52, 0x65, 0x6c,
	0x61, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x7b, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x53, 0x54,
	0x43, 0x43, 0x32, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x7c, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x53,
	0x54, 0x4f, 0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x7d, 0x12, 0x0f, 0x0a,
	0x0b, 0x42, 0x53, 0x54, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x10, 0x7e, 0x12, 0x0e,
	0x0a, 0x0a, 0x42, 0x53, 0x54, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x10, 0x7f, 0x12, 0x13,
	0x0a, 0x0e, 0x42, 0x53, 0x54, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68,
	0x10, 0x80, 0x01, 0x12, 0x0c, 0x0a, 0x07, 0x42, 0x53, 0x54, 0x4e, 0x75, 0x6c, 0x6c, 0x10, 0x81,
	0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x53, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x82, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x42, 0x53, 0x4d, 0x43, 0x75, 0x72, 0x72, 0x44, 0x69, 0x66,
	0x66, 0x10, 0x83, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x42, 0x53, 0x4d, 0x56, 0x6f, 0x6c, 0x44, 0x69,
	0x66, 0x66, 0x10, 0x84, 0x01, 0x12, 0x16, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x48, 0x69, 0x67, 0x68, 0x10, 0x85, 0x01, 0x12, 0x15, 0x0a,
	0x10, 0x42, 0x4d, 0x53, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67,
	0x68, 0x10, 0x86, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x50, 0x72, 0x65, 0x43, 0x68, 0x67, 0x46, 0x61,
	0x69, 0x6c, 0x10, 0x90, 0x01, 0x12, 0x0f, 0x0a, 0x0a, 0x44, 0x69, 0x73, 0x43, 0x68, 0x67, 0x46,
	0x61, 0x69, 0x6c, 0x10, 0x91, 0x01, 0x12, 0x12, 0x0a, 0x0d, 0x47, 0x75, 0x6e, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10, 0x92, 0x01, 0x12, 0x10, 0x0a, 0x0b, 0x47, 0x75,
	0x6e, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x93, 0x01, 0x12, 0x0f, 0x0a, 0x0a,
	0x43, 0x68, 0x67, 0x42, 0x53, 0x54, 0x53, 0x74, 0x6f, 0x70, 0x10, 0x94, 0x01, 0x12, 0x11, 0x0a,
	0x0c, 0x4e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43, 0x75, 0x72, 0x72, 0x10, 0x95, 0x01,
	0x12, 0x0c, 0x0a, 0x07, 0x53, 0x4f, 0x43, 0x46, 0x75, 0x6c, 0x6c, 0x10, 0x96, 0x01, 0x12, 0x15,
	0x0a, 0x10, 0x43, 0x68, 0x67, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x54, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x10, 0x97, 0x01, 0x2a, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x11,
	0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65, 0x10,
	0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61, 0x62,
	0x6c, 0x65, 0x10, 0x02, 0x2a, 0x63, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f,
	0x75, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48,
	0x4d, 0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x43, 0x50, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x53, 0x10, 0x04, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x43, 0x4c, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x54, 0x10, 0x06,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x07, 0x2a, 0xb9, 0x01, 0x0a, 0x12, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d,
	0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x55, 0x6e, 0x4b,
	0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76, 0x65, 0x46, 0x61,
	0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x68, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x10, 0x02, 0x12, 0x14,
	0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x6e, 0x64,
	0x62, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f,
	0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05, 0x12, 0x15, 0x0a,
	0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65, 0x67, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0x4c, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65,
	0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74, 0x61, 0x6e,
	0x64, 0x62, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x69, 0x6e,
	0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x03, 0x2a, 0xae, 0x01, 0x0a, 0x0d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x4c,
	0x6f, 0x63, 0x61, 0x6c, 0x46, 0x72, 0x65, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12,
	0x14, 0x0a, 0x10, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4f, 0x72,
	0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x16, 0x0a, 0x12, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x50, 0x6c,
	0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x17, 0x0a,
	0x13, 0x44, 0x65, 0x76, 0x69, 0x63, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x66, 0x6f, 0x72, 0x6d, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x17, 0x0a, 0x13, 0x53, 0x70, 0x65, 0x63, 0x69, 0x61,
	0x6c, 0x56, 0x65, 0x68, 0x69, 0x63, 0x6c, 0x65, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x05, 0x12,
	0x13, 0x0a, 0x0f, 0x56, 0x49, 0x4e, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x6e, 0x67, 0x4f, 0x72, 0x64,
	0x65, 0x72, 0x10, 0x06, 0x2a, 0xc3, 0x01, 0x0a, 0x10, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x75,
	0x62, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x54, 0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x13,
	0x0a, 0x0f, 0x56, 0x49, 0x4e, 0x53, 0x75, 0x62, 0x54, 0x79, 0x70, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x55, 0x49, 0x50, 0x61, 0x73, 0x73, 0x57, 0x6f, 0x72,
	0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x02, 0x12, 0x10, 0x0a, 0x0c, 0x4e, 0x46, 0x43, 0x43,
	0x61, 0x72, 0x64, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x45, 0x54,
	0x43, 0x52, 0x46, 0x49, 0x44, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x04, 0x12, 0x15, 0x0a, 0x11,
	0x4c, 0x69, 0x63, 0x65, 0x6e, 0x73, 0x65, 0x50, 0x6c, 0x61, 0x74, 0x65, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x10, 0x05, 0x12, 0x1a, 0x0a, 0x16, 0x56, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x65, 0x63,
	0x6f, 0x67, 0x6e, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x06, 0x12,
	0x19, 0x0a, 0x15, 0x56, 0x6f, 0x69, 0x63, 0x65, 0x52, 0x65, 0x63, 0x6f, 0x67, 0x6e, 0x69, 0x74,
	0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x07, 0x2a, 0xa2, 0x01, 0x0a, 0x0e, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x15, 0x0a,
	0x11, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x10, 0x00, 0x12, 0x17, 0x0a, 0x13, 0x41, 0x75, 0x74, 0x68, 0x65, 0x6e, 0x74, 0x69,
	0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10, 0x01, 0x12, 0x12, 0x0a,
	0x0e, 0x45, 0x73, 0x74, 0x61, 0x62, 0x6c, 0x69, 0x73, 0x68, 0x4f, 0x72, 0x64, 0x65, 0x72, 0x10,
	0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x52, 0x75, 0x6e, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x48, 0x61, 0x6e, 0x67, 0x4f,
	0x72, 0x64, 0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x12, 0x0a, 0x0e, 0x43,
	0x6f, 0x6d, 0x70, 0x6c, 0x65, 0x74, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x06, 0x2a,
	0xb4, 0x01, 0x0a, 0x11, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x18, 0x0a, 0x14, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x50, 0x69, 0x70, 0x65, 0x6c, 0x69, 0x6e, 0x65, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x00, 0x12,
	0x13, 0x0a, 0x0f, 0x44, 0x69, 0x73, 0x61, 0x62, 0x6c, 0x65, 0x50, 0x69, 0x70, 0x65, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x49, 0x64, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x10, 0x02, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x73, 0x65, 0x72, 0x74, 0x65, 0x64, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x10, 0x03, 0x12, 0x10, 0x0a, 0x0c, 0x50, 0x72, 0x69, 0x6d, 0x69, 0x6e,
	0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x04, 0x12, 0x11, 0x0a, 0x0d, 0x53, 0x74, 0x61, 0x72,
	0x74, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x05, 0x12, 0x11, 0x0a, 0x0d, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10, 0x06, 0x12, 0x16,
	0x0a, 0x12, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x50, 0x69, 0x70, 0x65,
	0x6c, 0x69, 0x6e, 0x65, 0x10, 0x07, 0x2a, 0x9c, 0x01, 0x0a, 0x11, 0x4f, 0x72, 0x64, 0x65, 0x72,
	0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f,
	0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10,
	0x00, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x46, 0x75, 0x6c, 0x6c, 0x53, 0x74,
	0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x4c, 0x6f, 0x63, 0x61,
	0x6c, 0x44, 0x6f, 0x77, 0x6e, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x02, 0x12,
	0x0f, 0x0a, 0x0b, 0x53, 0x4f, 0x43, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x03,
	0x12, 0x0d, 0x0a, 0x09, 0x56, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67, 0x79, 0x10, 0x04, 0x12,
	0x12, 0x0a, 0x0e, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x53, 0x74, 0x72, 0x61, 0x74, 0x65, 0x67,
	0x79, 0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x69, 0x6c, 0x6c, 0x53, 0x74, 0x72, 0x61, 0x74,
	0x65, 0x67, 0x79, 0x10, 0x06, 0x2a, 0x4f, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d,
	0x65, 0x6e, 0x74, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a,
	0x06, 0x55, 0x6e, 0x4b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x4c, 0x4f, 0x53,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x44, 0x4d, 0x43, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x49,
	0x43, 0x43, 0x10, 0x03, 0x12, 0x07, 0x0a, 0x03, 0x58, 0x4a, 0x43, 0x10, 0x04, 0x12, 0x07, 0x0a,
	0x03, 0x47, 0x57, 0x43, 0x10, 0x05, 0x2a, 0x9e, 0x02, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x0c,
	0x0a, 0x08, 0x4c, 0x54, 0x45, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09,
	0x57, 0x69, 0x46, 0x69, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x02, 0x12, 0x0d, 0x0a, 0x09, 0x47,
	0x6d, 0x61, 0x63, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x65,
	0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x04, 0x12, 0x18, 0x0a, 0x14, 0x53, 0x65, 0x74, 0x74,
	0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x43, 0x6c, 0x6f, 0x75, 0x64, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x05, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x65, 0x74, 0x65, 0x72, 0x4f, 0x66, 0x66, 0x4c, 0x69,
	0x6e, 0x65, 0x10, 0x06, 0x12, 0x12, 0x0a, 0x0e, 0x53, 0x74, 0x61, 0x72, 0x74, 0x55, 0x70, 0x54,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x10, 0x10, 0x12, 0x1e, 0x0a, 0x1a, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x69, 0x63, 0x43, 0x6f, 0x6d, 0x6d, 0x75, 0x6e, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f,
	0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x11, 0x12, 0x18, 0x0a, 0x14, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x53, 0x65, 0x74, 0x74, 0x6c, 0x65, 0x6d, 0x65, 0x6e, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x12, 0x12, 0x15, 0x0a, 0x11, 0x53, 0x65, 0x72, 0x69, 0x61, 0x6c, 0x4e, 0x75, 0x6d, 0x62,
	0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x55, 0x55, 0x49,
	0x44, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x21, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x52, 0x41, 0x4d,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x22, 0x12, 0x0e, 0x0a, 0x0a, 0x4d, 0x65, 0x74, 0x65, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x23, 0x2a, 0x9a, 0x01, 0x0a, 0x15, 0x4f, 0x72, 0x64, 0x65,
	0x72, 0x4a, 0x75, 0x72, 0x69, 0x73, 0x64, 0x69, 0x63, 0x74, 0x69, 0x6f, 0x6e, 0x45, 0x6e, 0x75,
	0x6d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x41, 0x75, 0x74, 0x68,
	0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x4c, 0x6f, 0x77, 0x41, 0x75,
	0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f, 0x4e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x02, 0x12, 0x18,
	0x0a, 0x14, 0x50, 0x72, 0x6f, 0x70, 0x72, 0x69, 0x65, 0x74, 0x61, 0x72, 0x79, 0x41, 0x75, 0x74,
	0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x03, 0x12, 0x16, 0x0a, 0x12, 0x45, 0x6d, 0x65, 0x72,
	0x67, 0x65, 0x6e, 0x63, 0x79, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69, 0x74, 0x79, 0x10, 0x04,
	0x12, 0x12, 0x0a, 0x0e, 0x4c, 0x6f, 0x63, 0x61, 0x6c, 0x41, 0x75, 0x74, 0x68, 0x6f, 0x72, 0x69,
	0x74, 0x79, 0x10, 0x05, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2f, 0x66, 0x73, 0x6d, 0x6f, 0x68, 0x70, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GCU_FSM_OHP_v0_2_proto_rawDescOnce sync.Once
	file_GCU_FSM_OHP_v0_2_proto_rawDescData = file_GCU_FSM_OHP_v0_2_proto_rawDesc
)

func file_GCU_FSM_OHP_v0_2_proto_rawDescGZIP() []byte {
	file_GCU_FSM_OHP_v0_2_proto_rawDescOnce.Do(func() {
		file_GCU_FSM_OHP_v0_2_proto_rawDescData = protoimpl.X.CompressGZIP(file_GCU_FSM_OHP_v0_2_proto_rawDescData)
	})
	return file_GCU_FSM_OHP_v0_2_proto_rawDescData
}

var file_GCU_FSM_OHP_v0_2_proto_enumTypes = make([]protoimpl.EnumInfo, 14)
var file_GCU_FSM_OHP_v0_2_proto_msgTypes = make([]protoimpl.MessageInfo, 29)
var file_GCU_FSM_OHP_v0_2_proto_goTypes = []interface{}{
	(PMMFaultStopEnum)(0),             // 0: gcu_main_ohp.protobuf.PMMFaultStopEnum
	(VCIFaultStopEnum)(0),             // 1: gcu_main_ohp.protobuf.VCIFaultStopEnum
	(ChargingMode)(0),                 // 2: gcu_main_ohp.protobuf.ChargingMode
	(BMSTimeoutEnum)(0),               // 3: gcu_main_ohp.protobuf.BMSTimeoutEnum
	(ContactorStateEnum)(0),           // 4: gcu_main_ohp.protobuf.ContactorStateEnum
	(SelfCheckType)(0),                // 5: gcu_main_ohp.protobuf.SelfCheckType
	(OrderTypeEnum)(0),                // 6: gcu_main_ohp.protobuf.OrderTypeEnum
	(OrderSubTypeEnum)(0),             // 7: gcu_main_ohp.protobuf.OrderSubTypeEnum
	(OrderStateEnum)(0),               // 8: gcu_main_ohp.protobuf.OrderStateEnum
	(PipelineStateEnum)(0),            // 9: gcu_main_ohp.protobuf.PipelineStateEnum
	(OrderStrategyEnum)(0),            // 10: gcu_main_ohp.protobuf.OrderStrategyEnum
	(SettlementModuleEnum)(0),         // 11: gcu_main_ohp.protobuf.SettlementModuleEnum
	(AlarmTypeEnum)(0),                // 12: gcu_main_ohp.protobuf.AlarmTypeEnum
	(OrderJurisdictionEnum)(0),        // 13: gcu_main_ohp.protobuf.OrderJurisdictionEnum
	(*BoolEnum)(nil),                  // 14: gcu_main_ohp.protobuf.BoolEnum
	(*Int32Value)(nil),                // 15: gcu_main_ohp.protobuf.Int32Value
	(*Uint32Value)(nil),               // 16: gcu_main_ohp.protobuf.Uint32Value
	(*FloatValue)(nil),                // 17: gcu_main_ohp.protobuf.FloatValue
	(*DoubleValue)(nil),               // 18: gcu_main_ohp.protobuf.DoubleValue
	(*UUIDValue)(nil),                 // 19: gcu_main_ohp.protobuf.UUIDValue
	(*DateTimeShort)(nil),             // 20: gcu_main_ohp.protobuf.DateTimeShort
	(*DateTimeLong)(nil),              // 21: gcu_main_ohp.protobuf.DateTimeLong
	(*BmsShakehands)(nil),             // 22: gcu_main_ohp.protobuf.BmsShakehands
	(*BmsIdentify)(nil),               // 23: gcu_main_ohp.protobuf.BmsIdentify
	(*BmsConfig)(nil),                 // 24: gcu_main_ohp.protobuf.BmsConfig
	(*BmsChargeFinish)(nil),           // 25: gcu_main_ohp.protobuf.BmsChargeFinish
	(*BmsCharging)(nil),               // 26: gcu_main_ohp.protobuf.BmsCharging
	(*BMSReConnectEvent)(nil),         // 27: gcu_main_ohp.protobuf.BMSReConnectEvent
	(*GunDesire)(nil),                 // 28: gcu_main_ohp.protobuf.GunDesire
	(*EnableServer)(nil),              // 29: gcu_main_ohp.protobuf.EnableServer
	(*SettlementModuleState)(nil),     // 30: gcu_main_ohp.protobuf.SettlementModuleState
	(*OrderRate)(nil),                 // 31: gcu_main_ohp.protobuf.OrderRate
	(*RuningOrderState)(nil),          // 32: gcu_main_ohp.protobuf.RuningOrderState
	(*MeterState)(nil),                // 33: gcu_main_ohp.protobuf.MeterState
	(*OrderPipelineState)(nil),        // 34: gcu_main_ohp.protobuf.OrderPipelineState
	(*OrderPipelineAns)(nil),          // 35: gcu_main_ohp.protobuf.OrderPipelineAns
	(*SysCtrlCmd)(nil),                // 36: gcu_main_ohp.protobuf.SysCtrlCmd
	(*OrderPipelineLogin)(nil),        // 37: gcu_main_ohp.protobuf.OrderPipelineLogin
	(*OrderPipelineLoginAns)(nil),     // 38: gcu_main_ohp.protobuf.OrderPipelineLoginAns
	(*OrderPipelineHeartbeatReq)(nil), // 39: gcu_main_ohp.protobuf.OrderPipelineHeartbeatReq
	(*OrderPipelineHeartbeatAns)(nil), // 40: gcu_main_ohp.protobuf.OrderPipelineHeartbeatAns
	(*OrderPipelineRTpush)(nil),       // 41: gcu_main_ohp.protobuf.OrderPipelineRTpush
	(*OrderPipelineRTpull)(nil),       // 42: gcu_main_ohp.protobuf.OrderPipelineRTpull
}
var file_GCU_FSM_OHP_v0_2_proto_depIdxs = []int32{
	2,  // 0: gcu_main_ohp.protobuf.BmsCharging.ChargeMode:type_name -> gcu_main_ohp.protobuf.ChargingMode
	3,  // 1: gcu_main_ohp.protobuf.BMSReConnectEvent.BMSTimeoutType:type_name -> gcu_main_ohp.protobuf.BMSTimeoutEnum
	11, // 2: gcu_main_ohp.protobuf.SettlementModuleState.ModuleID:type_name -> gcu_main_ohp.protobuf.SettlementModuleEnum
	10, // 3: gcu_main_ohp.protobuf.SettlementModuleState.OffLineStrategy:type_name -> gcu_main_ohp.protobuf.OrderStrategyEnum
	10, // 4: gcu_main_ohp.protobuf.SettlementModuleState.NormalStrategy:type_name -> gcu_main_ohp.protobuf.OrderStrategyEnum
	13, // 5: gcu_main_ohp.protobuf.SettlementModuleState.Jurisdiction:type_name -> gcu_main_ohp.protobuf.OrderJurisdictionEnum
	11, // 6: gcu_main_ohp.protobuf.RuningOrderState.ModuleID:type_name -> gcu_main_ohp.protobuf.SettlementModuleEnum
	19, // 7: gcu_main_ohp.protobuf.RuningOrderState.OrderUUID:type_name -> gcu_main_ohp.protobuf.UUIDValue
	31, // 8: gcu_main_ohp.protobuf.RuningOrderState.RuningRateList:type_name -> gcu_main_ohp.protobuf.OrderRate
	11, // 9: gcu_main_ohp.protobuf.OrderPipelineState.ModuleID:type_name -> gcu_main_ohp.protobuf.SettlementModuleEnum
	32, // 10: gcu_main_ohp.protobuf.OrderPipelineState.RuningState:type_name -> gcu_main_ohp.protobuf.RuningOrderState
	33, // 11: gcu_main_ohp.protobuf.OrderPipelineState.MeterStateRefresh:type_name -> gcu_main_ohp.protobuf.MeterState
	12, // 12: gcu_main_ohp.protobuf.OrderPipelineState.AlarmAnsList:type_name -> gcu_main_ohp.protobuf.AlarmTypeEnum
	0,  // 13: gcu_main_ohp.protobuf.OrderPipelineAns.PMMFault:type_name -> gcu_main_ohp.protobuf.PMMFaultStopEnum
	1,  // 14: gcu_main_ohp.protobuf.OrderPipelineAns.VCIFault:type_name -> gcu_main_ohp.protobuf.VCIFaultStopEnum
	22, // 15: gcu_main_ohp.protobuf.OrderPipelineAns.BmsShakehandsM:type_name -> gcu_main_ohp.protobuf.BmsShakehands
	23, // 16: gcu_main_ohp.protobuf.OrderPipelineAns.BmsIdentifyM:type_name -> gcu_main_ohp.protobuf.BmsIdentify
	24, // 17: gcu_main_ohp.protobuf.OrderPipelineAns.BmsConfigM:type_name -> gcu_main_ohp.protobuf.BmsConfig
	26, // 18: gcu_main_ohp.protobuf.OrderPipelineAns.BmsChargingM:type_name -> gcu_main_ohp.protobuf.BmsCharging
	25, // 19: gcu_main_ohp.protobuf.OrderPipelineAns.BmsChargeFinishM:type_name -> gcu_main_ohp.protobuf.BmsChargeFinish
	4,  // 20: gcu_main_ohp.protobuf.OrderPipelineAns.ContactorState:type_name -> gcu_main_ohp.protobuf.ContactorStateEnum
	5,  // 21: gcu_main_ohp.protobuf.OrderPipelineLogin.SelfCheckRul:type_name -> gcu_main_ohp.protobuf.SelfCheckType
	5,  // 22: gcu_main_ohp.protobuf.OrderPipelineLoginAns.SelfCheckRul:type_name -> gcu_main_ohp.protobuf.SelfCheckType
	29, // 23: gcu_main_ohp.protobuf.OrderPipelineLoginAns.EnableServerList:type_name -> gcu_main_ohp.protobuf.EnableServer
	11, // 24: gcu_main_ohp.protobuf.OrderPipelineLoginAns.AllowList:type_name -> gcu_main_ohp.protobuf.SettlementModuleEnum
	34, // 25: gcu_main_ohp.protobuf.OrderPipelineHeartbeatReq.PipelineState:type_name -> gcu_main_ohp.protobuf.OrderPipelineState
	30, // 26: gcu_main_ohp.protobuf.OrderPipelineHeartbeatReq.ModuleState:type_name -> gcu_main_ohp.protobuf.SettlementModuleState
	35, // 27: gcu_main_ohp.protobuf.OrderPipelineHeartbeatAns.PipelineAns:type_name -> gcu_main_ohp.protobuf.OrderPipelineAns
	11, // 28: gcu_main_ohp.protobuf.OrderPipelineRTpush.ModuleID:type_name -> gcu_main_ohp.protobuf.SettlementModuleEnum
	36, // 29: gcu_main_ohp.protobuf.OrderPipelineRTpush.SysCtrlList:type_name -> gcu_main_ohp.protobuf.SysCtrlCmd
	0,  // 30: gcu_main_ohp.protobuf.OrderPipelineRTpull.PMMFault:type_name -> gcu_main_ohp.protobuf.PMMFaultStopEnum
	1,  // 31: gcu_main_ohp.protobuf.OrderPipelineRTpull.VCIFault:type_name -> gcu_main_ohp.protobuf.VCIFaultStopEnum
	32, // [32:32] is the sub-list for method output_type
	32, // [32:32] is the sub-list for method input_type
	32, // [32:32] is the sub-list for extension type_name
	32, // [32:32] is the sub-list for extension extendee
	0,  // [0:32] is the sub-list for field type_name
}

func init() { file_GCU_FSM_OHP_v0_2_proto_init() }
func file_GCU_FSM_OHP_v0_2_proto_init() {
	if File_GCU_FSM_OHP_v0_2_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BoolEnum); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Int32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Uint32Value); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*FloatValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DoubleValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*UUIDValue); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeShort); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*DateTimeLong); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsShakehands); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsIdentify); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsChargeFinish); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BmsCharging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSReConnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunDesire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SettlementModuleState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderRate); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*RuningOrderState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MeterState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineLoginAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineRTpush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_OHP_v0_2_proto_msgTypes[28].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*OrderPipelineRTpull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GCU_FSM_OHP_v0_2_proto_rawDesc,
			NumEnums:      14,
			NumMessages:   29,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GCU_FSM_OHP_v0_2_proto_goTypes,
		DependencyIndexes: file_GCU_FSM_OHP_v0_2_proto_depIdxs,
		EnumInfos:         file_GCU_FSM_OHP_v0_2_proto_enumTypes,
		MessageInfos:      file_GCU_FSM_OHP_v0_2_proto_msgTypes,
	}.Build()
	File_GCU_FSM_OHP_v0_2_proto = out.File
	file_GCU_FSM_OHP_v0_2_proto_rawDesc = nil
	file_GCU_FSM_OHP_v0_2_proto_goTypes = nil
	file_GCU_FSM_OHP_v0_2_proto_depIdxs = nil
}
