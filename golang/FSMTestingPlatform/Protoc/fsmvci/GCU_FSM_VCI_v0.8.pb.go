// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.10.0
// source: GCU_FSM_VCI_v0.8.proto

package fsmvci
/*
import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//枪头故障状态枚举
type FaultEnum int32

const (
	FaultEnum_DefaultFault FaultEnum = 0
	//BMS故障
	FaultEnum_gunShortCircuit          FaultEnum = 1  // 车辆输出短路故障
	FaultEnum_BMSCellVolOver           FaultEnum = 2  // 电池单体过压
	FaultEnum_BMSPackVolOver           FaultEnum = 3  // 电池包过压(预充时,电池包电压大于BCP最大允许电压)
	FaultEnum_BMSPackCurrOver          FaultEnum = 4  // 过流(输出电流 > BCP最大允许电流)
	FaultEnum_BMSCellTempOver          FaultEnum = 5  // 过温
	FaultEnum_BMSTempOutControl        FaultEnum = 6  // 热失控
	FaultEnum_BMSRelayAdhesion         FaultEnum = 7  // 车的继电器粘连
	FaultEnum_BMSOverCharge            FaultEnum = 8  // 过充保护
	FaultEnum_BMSAuxPowerAbnormal      FaultEnum = 9  // 辅助电源异常
	FaultEnum_BMSInnerRelayOpenCircuit FaultEnum = 10 // 继电器开路
	FaultEnum_BMSDemandCurrAbnormal    FaultEnum = 11 // BMS需求电流大于最高允许电流
	FaultEnum_BMSDemandVolAbnormal     FaultEnum = 12 // BMS需求电流大于最高允许电压
	FaultEnum_BMSBatVolAbnormal        FaultEnum = 13 // 启动充电前输出接触器外侧电压大于50V
	//Charger 故障
	FaultEnum_FSMOffline        FaultEnum = 16 // 消息中心离线
	FaultEnum_CC1VoltAbnormal   FaultEnum = 17 // CC1电压异常
	FaultEnum_gunStateAbnormal  FaultEnum = 18 // 控制导引异常
	FaultEnum_elockAbnormal     FaultEnum = 19 // 电子锁异常
	FaultEnum_gunReserveConnect FaultEnum = 20 // 枪头反接
	FaultEnum_auxPowerAbnormal  FaultEnum = 21 // 辅助电源异常
	FaultEnum_insultVolHigh     FaultEnum = 22 // 绝缘检测电压高
	FaultEnum_insultVolLow      FaultEnum = 23 // 绝缘检测阶段模块电压低
	FaultEnum_insultWarn        FaultEnum = 24 // 绝缘检测告警
	FaultEnum_insultAbnormal    FaultEnum = 25 // 绝缘检测异常
	FaultEnum_disChgFail        FaultEnum = 26 // 泄放失败
	FaultEnum_startTimeout      FaultEnum = 27 // 启动超时
	FaultEnum_batAllowVolLow    FaultEnum = 28 // BMS最高允许电压小于充电机最小输出电压
	//预充
	FaultEnum_batVolHigh        FaultEnum = 32 // 电池电压大于充电机最大电压
	FaultEnum_batVolLow         FaultEnum = 33 // 电池电压小于充电机最小电压
	FaultEnum_batVolDiffFromBCP FaultEnum = 34 // 电池电压与BCP电压不一致
	FaultEnum_preChgVolHigh     FaultEnum = 35 // 预充阶段模块电压高
	FaultEnum_preChgVolLow      FaultEnum = 36 // 预充阶段模块电压低
	//充电中
	FaultEnum_fuseBreakFault    FaultEnum = 37 // 熔断器故障
	FaultEnum_outOverCurr       FaultEnum = 38 // 输出过流
	FaultEnum_outOverVol        FaultEnum = 39 // 充电电压大于电池包最大允许电压
	FaultEnum_meterCurrAbnormal FaultEnum = 40 // 直流电表电流异常
	FaultEnum_meterVolAbnormal  FaultEnum = 41 // 直流电表电压异常
	FaultEnum_gunTempWarn       FaultEnum = 42 // 枪头过温告警
	FaultEnum_gunOverTemp       FaultEnum = 43 // 枪头过温故障
	FaultEnum_noActiveCurr      FaultEnum = 44 // 无有效电流
	FaultEnum_SOCFull           FaultEnum = 45 // SOC满中止
	FaultEnum_chgForbidTimeout  FaultEnum = 46 // 禁止充电超时
	FaultEnum_chgSysAbnormal    FaultEnum = 47 // 充电机系统故障
	FaultEnum_BCSCurrDiff       FaultEnum = 48 // 输出电流与BCS报文电流不匹配
	FaultEnum_BCSVolDiff        FaultEnum = 49 // 输出电压与BCS报文电压不匹配
	//结束充电
	FaultEnum_gunNotAtHome FaultEnum = 50 // 充电枪归位告警
	FaultEnum_gunLifeWarn  FaultEnum = 51 // 枪插拔次数告警
	//GB27930协议
	FaultEnum_BMSProtoVerUnMatch      FaultEnum = 64 // BMS通信协议版本不匹配
	FaultEnum_BRMTimeout              FaultEnum = 65 // BRM 报文接收超时
	FaultEnum_BRMAbnormal             FaultEnum = 66 // BRM 报文数据项异常
	FaultEnum_BCPTimeout              FaultEnum = 67 // BCP 报文接收超时
	FaultEnum_BCPAbnormal             FaultEnum = 68 // BCP 报文数据项异常
	FaultEnum_BROTimeout              FaultEnum = 69 // BRO 报文(0x00)接收超时
	FaultEnum_BROaaTimeout            FaultEnum = 70 // BRO 报文(0xAA)接收超时
	FaultEnum_BCLTimeout              FaultEnum = 71 // BCL 报文接收超时
	FaultEnum_BCSTimeout              FaultEnum = 72 // BCS 报文接收超时
	FaultEnum_BSMCellVolLow           FaultEnum = 73 // BSM报文中单体动力蓄电池电压过低
	FaultEnum_BSMSocHigh              FaultEnum = 74 // BSM报文中SOC过高
	FaultEnum_BSMSocLow               FaultEnum = 75 // BSM报文中SOC过低
	FaultEnum_BSMPackOverCurr         FaultEnum = 76 // BSM报文中充电过流
	FaultEnum_BSMBatTempHigh          FaultEnum = 77 // BSM报文中动力蓄电池温度过高
	FaultEnum_BSMInsultAbnormal       FaultEnum = 78 // BSM报文中动力蓄电池绝缘状态异常
	FaultEnum_BSMContactorAbnormal    FaultEnum = 79 // BSM报文中连接器连接状态异常
	FaultEnum_BSMCellVolHigh          FaultEnum = 80 // BSM报文中单体动力蓄电池电压过高
	FaultEnum_BSTTimeout              FaultEnum = 81 // BST报文接收超时
	FaultEnum_BSTMeetSOC              FaultEnum = 82 // BST报达到SOC目标值
	FaultEnum_BSTMeetVol              FaultEnum = 83 // BST报达到总电压设定值
	FaultEnum_BSTMeetCellvol          FaultEnum = 84 // BST报达到单体电压设定值
	FaultEnum_BSTInsultFault          FaultEnum = 85 // BST报BMS绝缘故障
	FaultEnum_BSTOutConnectorOverTemp FaultEnum = 86 // BST报BMS输出连接器过温故障
	FaultEnum_BSTCommponentOverTemp   FaultEnum = 87 // BST报BMS元件、输出连接器
	FaultEnum_BSTChgConnectorAbnormal FaultEnum = 88 // BST报BMS充电连接器故障
	FaultEnum_BSTBatOverTemp          FaultEnum = 89 // BST报BMS电池组温度过高故障
	FaultEnum_BSTHighVolRelayFault    FaultEnum = 90 // BST报BMS高压继电器故障
	FaultEnum_BSTcc2Fault             FaultEnum = 91 // BST报BMS检测点2电压检测故障
	FaultEnum_BSTOtherFault           FaultEnum = 92 // BST报BMS其他故障
	FaultEnum_BSTOverCurr             FaultEnum = 93 // BST报BMS电流过大
	FaultEnum_BSTVolAbnormal          FaultEnum = 94 // BST报BMS电压异常
	FaultEnum_BSTNoReason             FaultEnum = 95 // BST填充为0
	FaultEnum_BSDTimeout              FaultEnum = 96 // BSD报文超时
)

// Enum value maps for FaultEnum.
var (
	FaultEnum_name = map[int32]string{
		0:  "DefaultFault",
		1:  "gunShortCircuit",
		2:  "BMSCellVolOver",
		3:  "BMSPackVolOver",
		4:  "BMSPackCurrOver",
		5:  "BMSCellTempOver",
		6:  "BMSTempOutControl",
		7:  "BMSRelayAdhesion",
		8:  "BMSOverCharge",
		9:  "BMSAuxPowerAbnormal",
		10: "BMSInnerRelayOpenCircuit",
		11: "BMSDemandCurrAbnormal",
		12: "BMSDemandVolAbnormal",
		13: "BMSBatVolAbnormal",
		16: "FSMOffline",
		17: "CC1VoltAbnormal",
		18: "gunStateAbnormal",
		19: "elockAbnormal",
		20: "gunReserveConnect",
		21: "auxPowerAbnormal",
		22: "insultVolHigh",
		23: "insultVolLow",
		24: "insultWarn",
		25: "insultAbnormal",
		26: "disChgFail",
		27: "startTimeout",
		28: "batAllowVolLow",
		32: "batVolHigh",
		33: "batVolLow",
		34: "batVolDiffFromBCP",
		35: "preChgVolHigh",
		36: "preChgVolLow",
		37: "fuseBreakFault",
		38: "outOverCurr",
		39: "outOverVol",
		40: "meterCurrAbnormal",
		41: "meterVolAbnormal",
		42: "gunTempWarn",
		43: "gunOverTemp",
		44: "noActiveCurr",
		45: "SOCFull",
		46: "chgForbidTimeout",
		47: "chgSysAbnormal",
		48: "BCSCurrDiff",
		49: "BCSVolDiff",
		50: "gunNotAtHome",
		51: "gunLifeWarn",
		64: "BMSProtoVerUnMatch",
		65: "BRMTimeout",
		66: "BRMAbnormal",
		67: "BCPTimeout",
		68: "BCPAbnormal",
		69: "BROTimeout",
		70: "BROaaTimeout",
		71: "BCLTimeout",
		72: "BCSTimeout",
		73: "BSMCellVolLow",
		74: "BSMSocHigh",
		75: "BSMSocLow",
		76: "BSMPackOverCurr",
		77: "BSMBatTempHigh",
		78: "BSMInsultAbnormal",
		79: "BSMContactorAbnormal",
		80: "BSMCellVolHigh",
		81: "BSTTimeout",
		82: "BSTMeetSOC",
		83: "BSTMeetVol",
		84: "BSTMeetCellvol",
		85: "BSTInsultFault",
		86: "BSTOutConnectorOverTemp",
		87: "BSTCommponentOverTemp",
		88: "BSTChgConnectorAbnormal",
		89: "BSTBatOverTemp",
		90: "BSTHighVolRelayFault",
		91: "BSTcc2Fault",
		92: "BSTOtherFault",
		93: "BSTOverCurr",
		94: "BSTVolAbnormal",
		95: "BSTNoReason",
		96: "BSDTimeout",
	}
	FaultEnum_value = map[string]int32{
		"DefaultFault":             0,
		"gunShortCircuit":          1,
		"BMSCellVolOver":           2,
		"BMSPackVolOver":           3,
		"BMSPackCurrOver":          4,
		"BMSCellTempOver":          5,
		"BMSTempOutControl":        6,
		"BMSRelayAdhesion":         7,
		"BMSOverCharge":            8,
		"BMSAuxPowerAbnormal":      9,
		"BMSInnerRelayOpenCircuit": 10,
		"BMSDemandCurrAbnormal":    11,
		"BMSDemandVolAbnormal":     12,
		"BMSBatVolAbnormal":        13,
		"FSMOffline":               16,
		"CC1VoltAbnormal":          17,
		"gunStateAbnormal":         18,
		"elockAbnormal":            19,
		"gunReserveConnect":        20,
		"auxPowerAbnormal":         21,
		"insultVolHigh":            22,
		"insultVolLow":             23,
		"insultWarn":               24,
		"insultAbnormal":           25,
		"disChgFail":               26,
		"startTimeout":             27,
		"batAllowVolLow":           28,
		"batVolHigh":               32,
		"batVolLow":                33,
		"batVolDiffFromBCP":        34,
		"preChgVolHigh":            35,
		"preChgVolLow":             36,
		"fuseBreakFault":           37,
		"outOverCurr":              38,
		"outOverVol":               39,
		"meterCurrAbnormal":        40,
		"meterVolAbnormal":         41,
		"gunTempWarn":              42,
		"gunOverTemp":              43,
		"noActiveCurr":             44,
		"SOCFull":                  45,
		"chgForbidTimeout":         46,
		"chgSysAbnormal":           47,
		"BCSCurrDiff":              48,
		"BCSVolDiff":               49,
		"gunNotAtHome":             50,
		"gunLifeWarn":              51,
		"BMSProtoVerUnMatch":       64,
		"BRMTimeout":               65,
		"BRMAbnormal":              66,
		"BCPTimeout":               67,
		"BCPAbnormal":              68,
		"BROTimeout":               69,
		"BROaaTimeout":             70,
		"BCLTimeout":               71,
		"BCSTimeout":               72,
		"BSMCellVolLow":            73,
		"BSMSocHigh":               74,
		"BSMSocLow":                75,
		"BSMPackOverCurr":          76,
		"BSMBatTempHigh":           77,
		"BSMInsultAbnormal":        78,
		"BSMContactorAbnormal":     79,
		"BSMCellVolHigh":           80,
		"BSTTimeout":               81,
		"BSTMeetSOC":               82,
		"BSTMeetVol":               83,
		"BSTMeetCellvol":           84,
		"BSTInsultFault":           85,
		"BSTOutConnectorOverTemp":  86,
		"BSTCommponentOverTemp":    87,
		"BSTChgConnectorAbnormal":  88,
		"BSTBatOverTemp":           89,
		"BSTHighVolRelayFault":     90,
		"BSTcc2Fault":              91,
		"BSTOtherFault":            92,
		"BSTOverCurr":              93,
		"BSTVolAbnormal":           94,
		"BSTNoReason":              95,
		"BSDTimeout":               96,
	}
)

func (x FaultEnum) Enum() *FaultEnum {
	p := new(FaultEnum)
	*p = x
	return p
}

func (x FaultEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[0].Descriptor()
}

func (FaultEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[0]
}

func (x FaultEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultEnum.Descriptor instead.
func (FaultEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{0}
}

//终止原因枚举
type HaltReason int32

const (
	HaltReason_DefaultReason HaltReason = 0 //    缺省值
	HaltReason_NormalStop    HaltReason = 1 //    正常停机
	HaltReason_FaultStop     HaltReason = 2 //    故障停机
)

// Enum value maps for HaltReason.
var (
	HaltReason_name = map[int32]string{
		0: "DefaultReason",
		1: "NormalStop",
		2: "FaultStop",
	}
	HaltReason_value = map[string]int32{
		"DefaultReason": 0,
		"NormalStop":    1,
		"FaultStop":     2,
	}
)

func (x HaltReason) Enum() *HaltReason {
	p := new(HaltReason)
	*p = x
	return p
}

func (x HaltReason) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (HaltReason) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[1].Descriptor()
}

func (HaltReason) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[1]
}

func (x HaltReason) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use HaltReason.Descriptor instead.
func (HaltReason) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{1}
}

//故障状态枚举
type FaultState int32

const (
	FaultState_DefaultState   FaultState = 0 //    缺省值
	FaultState_NormalState    FaultState = 1 //    故障恢复
	FaultState_FaultSustained FaultState = 2 //    故障发生
)

// Enum value maps for FaultState.
var (
	FaultState_name = map[int32]string{
		0: "DefaultState",
		1: "NormalState",
		2: "FaultSustained",
	}
	FaultState_value = map[string]int32{
		"DefaultState":   0,
		"NormalState":    1,
		"FaultSustained": 2,
	}
)

func (x FaultState) Enum() *FaultState {
	p := new(FaultState)
	*p = x
	return p
}

func (x FaultState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultState) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[2].Descriptor()
}

func (FaultState) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[2]
}

func (x FaultState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultState.Descriptor instead.
func (FaultState) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{2}
}

//充电类型
type ChargingMode int32

const (
	ChargingMode_DefaultChargingMode ChargingMode = 0 //    缺省值
	ChargingMode_VoltageStable       ChargingMode = 1 //    恒压充电
	ChargingMode_CurrentStable       ChargingMode = 2 //    恒流充电
)

// Enum value maps for ChargingMode.
var (
	ChargingMode_name = map[int32]string{
		0: "DefaultChargingMode",
		1: "VoltageStable",
		2: "CurrentStable",
	}
	ChargingMode_value = map[string]int32{
		"DefaultChargingMode": 0,
		"VoltageStable":       1,
		"CurrentStable":       2,
	}
)

func (x ChargingMode) Enum() *ChargingMode {
	p := new(ChargingMode)
	*p = x
	return p
}

func (x ChargingMode) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ChargingMode) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[3].Descriptor()
}

func (ChargingMode) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[3]
}

func (x ChargingMode) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ChargingMode.Descriptor instead.
func (ChargingMode) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{3}
}

//枪类型枚举
type GunTypeEnum int32

const (
	GunTypeEnum_DefaultType GunTypeEnum = 0 //    缺省值
	GunTypeEnum_GBT11       GunTypeEnum = 1 //    新老兼容国标枪
	GunTypeEnum_GBT15       GunTypeEnum = 2 //    新国标枪
	GunTypeEnum_CCS         GunTypeEnum = 3 //    欧标枪
	GunTypeEnum_Chaoji      GunTypeEnum = 4 //    超级枪
	GunTypeEnum_Bow         GunTypeEnum = 5 //    充电弓
	GunTypeEnum_SCD         GunTypeEnum = 6 //    自动头
)

// Enum value maps for GunTypeEnum.
var (
	GunTypeEnum_name = map[int32]string{
		0: "DefaultType",
		1: "GBT11",
		2: "GBT15",
		3: "CCS",
		4: "Chaoji",
		5: "Bow",
		6: "SCD",
	}
	GunTypeEnum_value = map[string]int32{
		"DefaultType": 0,
		"GBT11":       1,
		"GBT15":       2,
		"CCS":         3,
		"Chaoji":      4,
		"Bow":         5,
		"SCD":         6,
	}
)

func (x GunTypeEnum) Enum() *GunTypeEnum {
	p := new(GunTypeEnum)
	*p = x
	return p
}

func (x GunTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (GunTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[4].Descriptor()
}

func (GunTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[4]
}

func (x GunTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use GunTypeEnum.Descriptor instead.
func (GunTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{4}
}

//BMS超时类型枚举
type BMSTimeoutEnum int32

const (
	BMSTimeoutEnum_DefaultTimeout BMSTimeoutEnum = 0 //  缺省值
	BMSTimeoutEnum_BHM            BMSTimeoutEnum = 1 //    超时报文
	BMSTimeoutEnum_BRM            BMSTimeoutEnum = 2 //    超时报文
	BMSTimeoutEnum_BCP            BMSTimeoutEnum = 3 //    超时报文
	BMSTimeoutEnum_BRO_00         BMSTimeoutEnum = 4
	BMSTimeoutEnum_BRO_AA         BMSTimeoutEnum = 5
	BMSTimeoutEnum_BCL            BMSTimeoutEnum = 6  //    超时报文
	BMSTimeoutEnum_BCS            BMSTimeoutEnum = 7  //    超时报文
	BMSTimeoutEnum_BSM            BMSTimeoutEnum = 8  //    超时报文
	BMSTimeoutEnum_BST            BMSTimeoutEnum = 9  //    超时报文
	BMSTimeoutEnum_BSD            BMSTimeoutEnum = 10 //    超时报文
)

// Enum value maps for BMSTimeoutEnum.
var (
	BMSTimeoutEnum_name = map[int32]string{
		0:  "DefaultTimeout",
		1:  "BHM",
		2:  "BRM",
		3:  "BCP",
		4:  "BRO_00",
		5:  "BRO_AA",
		6:  "BCL",
		7:  "BCS",
		8:  "BSM",
		9:  "BST",
		10: "BSD",
	}
	BMSTimeoutEnum_value = map[string]int32{
		"DefaultTimeout": 0,
		"BHM":            1,
		"BRM":            2,
		"BCP":            3,
		"BRO_00":         4,
		"BRO_AA":         5,
		"BCL":            6,
		"BCS":            7,
		"BSM":            8,
		"BST":            9,
		"BSD":            10,
	}
)

func (x BMSTimeoutEnum) Enum() *BMSTimeoutEnum {
	p := new(BMSTimeoutEnum)
	*p = x
	return p
}

func (x BMSTimeoutEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (BMSTimeoutEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[5].Descriptor()
}

func (BMSTimeoutEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[5]
}

func (x BMSTimeoutEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use BMSTimeoutEnum.Descriptor instead.
func (BMSTimeoutEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{5}
}

//自检状态描述枚举
type SelfCheckState int32

const (
	SelfCheckState_DefaultCheck SelfCheckState = 0 //    缺省值
	SelfCheckState_Standby      SelfCheckState = 1 //    已完成,状态可用
	SelfCheckState_Checking     SelfCheckState = 2 //    自检中,稍后上报
	SelfCheckState_CheckFault   SelfCheckState = 3 //    自检失败,自愈中
)

// Enum value maps for SelfCheckState.
var (
	SelfCheckState_name = map[int32]string{
		0: "DefaultCheck",
		1: "Standby",
		2: "Checking",
		3: "CheckFault",
	}
	SelfCheckState_value = map[string]int32{
		"DefaultCheck": 0,
		"Standby":      1,
		"Checking":     2,
		"CheckFault":   3,
	}
)

func (x SelfCheckState) Enum() *SelfCheckState {
	p := new(SelfCheckState)
	*p = x
	return p
}

func (x SelfCheckState) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfCheckState) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_VCI_v0_8_proto_enumTypes[6].Descriptor()
}

func (SelfCheckState) Type() protoreflect.EnumType {
	return &file_GCU_FSM_VCI_v0_8_proto_enumTypes[6]
}

func (x SelfCheckState) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfCheckState.Descriptor instead.
func (SelfCheckState) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{6}
}

//可用服务列表
type EnableServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCIServer uint32 `protobuf:"varint,1,opt,name=VCIServer,proto3" json:"VCIServer,omitempty"` //    VCI模块状态,0表示不可用,1表示可用
	PMMServer uint32 `protobuf:"varint,2,opt,name=PMMServer,proto3" json:"PMMServer,omitempty"` //    PMM模块状态,0表示不可用,1表示可用
	DMCServer uint32 `protobuf:"varint,3,opt,name=DMCServer,proto3" json:"DMCServer,omitempty"` //    DMC模块状态,0表示不可用,1表示可用
	OHPServer uint32 `protobuf:"varint,4,opt,name=OHPServer,proto3" json:"OHPServer,omitempty"` //    OHP模块状态,0表示不可用,1表示可用
	LCRServer uint32 `protobuf:"varint,5,opt,name=LCRServer,proto3" json:"LCRServer,omitempty"` //    LCR模块状态,0表示不可用,1表示可用
}

func (x *EnableServer) Reset() {
	*x = EnableServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServer) ProtoMessage() {}

func (x *EnableServer) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServer.ProtoReflect.Descriptor instead.
func (*EnableServer) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{0}
}

func (x *EnableServer) GetVCIServer() uint32 {
	if x != nil {
		return x.VCIServer
	}
	return 0
}

func (x *EnableServer) GetPMMServer() uint32 {
	if x != nil {
		return x.PMMServer
	}
	return 0
}

func (x *EnableServer) GetDMCServer() uint32 {
	if x != nil {
		return x.DMCServer
	}
	return 0
}

func (x *EnableServer) GetOHPServer() uint32 {
	if x != nil {
		return x.OHPServer
	}
	return 0
}

func (x *EnableServer) GetLCRServer() uint32 {
	if x != nil {
		return x.LCRServer
	}
	return 0
}

//VCI枪头配置信息
type VCIGunPrameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GunID          uint32      `protobuf:"varint,2,opt,name=gunID,proto3" json:"gunID,omitempty"`                                           //    当前描述枪头编号;与CAN总线编号一致(0~5)
	GunType        GunTypeEnum `protobuf:"varint,3,opt,name=gunType,proto3,enum=gcu_fsm_vci.protobuf.GunTypeEnum" json:"gunType,omitempty"` //    枪头类型
	CurrentLimited float32     `protobuf:"fixed32,4,opt,name=currentLimited,proto3" json:"currentLimited,omitempty"`                        //    枪头最大流点
	VoltageLimited float32     `protobuf:"fixed32,5,opt,name=voltageLimited,proto3" json:"voltageLimited,omitempty"`                        //    枪头最大电压
	PowerMax       float32     `protobuf:"fixed32,6,opt,name=powerMax,proto3" json:"powerMax,omitempty"`                                    //    系统最大功率
	AuxType        uint32      `protobuf:"varint,7,opt,name=auxType,proto3" json:"auxType,omitempty"`                                       //    BMS辅源类型(12V/24V),0表示12v,1表示24v
	ELockEnable    uint32      `protobuf:"varint,8,opt,name=eLockEnable,proto3" json:"eLockEnable,omitempty"`                               //    电子锁使能标志,0表示使能,1表示不使能
}

func (x *VCIGunPrameters) Reset() {
	*x = VCIGunPrameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIGunPrameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIGunPrameters) ProtoMessage() {}

func (x *VCIGunPrameters) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIGunPrameters.ProtoReflect.Descriptor instead.
func (*VCIGunPrameters) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{1}
}

func (x *VCIGunPrameters) GetGunID() uint32 {
	if x != nil {
		return x.GunID
	}
	return 0
}

func (x *VCIGunPrameters) GetGunType() GunTypeEnum {
	if x != nil {
		return x.GunType
	}
	return GunTypeEnum_DefaultType
}

func (x *VCIGunPrameters) GetCurrentLimited() float32 {
	if x != nil {
		return x.CurrentLimited
	}
	return 0
}

func (x *VCIGunPrameters) GetVoltageLimited() float32 {
	if x != nil {
		return x.VoltageLimited
	}
	return 0
}

func (x *VCIGunPrameters) GetPowerMax() float32 {
	if x != nil {
		return x.PowerMax
	}
	return 0
}

func (x *VCIGunPrameters) GetAuxType() uint32 {
	if x != nil {
		return x.AuxType
	}
	return 0
}

func (x *VCIGunPrameters) GetELockEnable() uint32 {
	if x != nil {
		return x.ELockEnable
	}
	return 0
}

//系统参数信息
type VCISysParameters struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SysVolMax         float32 `protobuf:"fixed32,1,opt,name=sysVolMax,proto3" json:"sysVolMax,omitempty"`                 //    系统(模块)最大输出电压
	SysCurMax         float32 `protobuf:"fixed32,2,opt,name=sysCurMax,proto3" json:"sysCurMax,omitempty"`                 //    系统最大输出电流
	SysConstVolMinVol float32 `protobuf:"fixed32,3,opt,name=sysConstVolMinVol,proto3" json:"sysConstVolMinVol,omitempty"` //    系统(模块)恒压下最小输出电压
	SysConstCurMinVol float32 `protobuf:"fixed32,4,opt,name=sysConstCurMinVol,proto3" json:"sysConstCurMinVol,omitempty"` //    系统(模块)恒流下最小输出电压
	SysCurMin         float32 `protobuf:"fixed32,5,opt,name=sysCurMin,proto3" json:"sysCurMin,omitempty"`                 //    模块最小输出电流
}

func (x *VCISysParameters) Reset() {
	*x = VCISysParameters{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCISysParameters) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCISysParameters) ProtoMessage() {}

func (x *VCISysParameters) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCISysParameters.ProtoReflect.Descriptor instead.
func (*VCISysParameters) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{2}
}

func (x *VCISysParameters) GetSysVolMax() float32 {
	if x != nil {
		return x.SysVolMax
	}
	return 0
}

func (x *VCISysParameters) GetSysCurMax() float32 {
	if x != nil {
		return x.SysCurMax
	}
	return 0
}

func (x *VCISysParameters) GetSysConstVolMinVol() float32 {
	if x != nil {
		return x.SysConstVolMinVol
	}
	return 0
}

func (x *VCISysParameters) GetSysConstCurMinVol() float32 {
	if x != nil {
		return x.SysConstCurMinVol
	}
	return 0
}

func (x *VCISysParameters) GetSysCurMin() float32 {
	if x != nil {
		return x.SysCurMin
	}
	return 0
}

//VCI枪头连接阶段系统指令
type SysCtrlConnectStage struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ElockCmd  uint32 `protobuf:"varint,1,opt,name=elockCmd,proto3" json:"elockCmd,omitempty"`   //    电子指令(0表示解锁,1表示上锁)
	StartCmd  uint32 `protobuf:"varint,2,opt,name=startCmd,proto3" json:"startCmd,omitempty"`   //    开机指令(0表示关机,1表示开机)
	StartType uint32 `protobuf:"varint,3,opt,name=startType,proto3" json:"startType,omitempty"` //    开机类型(0表示正常开机,1表示骗取VIN开机)
}

func (x *SysCtrlConnectStage) Reset() {
	*x = SysCtrlConnectStage{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlConnectStage) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlConnectStage) ProtoMessage() {}

func (x *SysCtrlConnectStage) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlConnectStage.ProtoReflect.Descriptor instead.
func (*SysCtrlConnectStage) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{3}
}

func (x *SysCtrlConnectStage) GetElockCmd() uint32 {
	if x != nil {
		return x.ElockCmd
	}
	return 0
}

func (x *SysCtrlConnectStage) GetStartCmd() uint32 {
	if x != nil {
		return x.StartCmd
	}
	return 0
}

func (x *SysCtrlConnectStage) GetStartType() uint32 {
	if x != nil {
		return x.StartType
	}
	return 0
}

//VCI枪头充电阶段系统指令
type SysCtrlCharging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopCmd uint32 `protobuf:"varint,1,opt,name=StopCmd,proto3" json:"StopCmd,omitempty"` //    关机指令(0x55表示关机,其他无效)
}

func (x *SysCtrlCharging) Reset() {
	*x = SysCtrlCharging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlCharging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlCharging) ProtoMessage() {}

func (x *SysCtrlCharging) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlCharging.ProtoReflect.Descriptor instead.
func (*SysCtrlCharging) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{4}
}

func (x *SysCtrlCharging) GetStopCmd() uint32 {
	if x != nil {
		return x.StopCmd
	}
	return 0
}

//VCI枪头基础状态信息
type GunBasicState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GunID           uint32 `protobuf:"varint,1,opt,name=gunID,proto3" json:"gunID,omitempty"`                     //    当前描述枪头编号,与CAN总线编号一致(0~5)
	LinkState       uint32 `protobuf:"varint,2,opt,name=LinkState,proto3" json:"LinkState,omitempty"`             //    插枪状态,0表示空闲,1表示已插枪
	PositionedState uint32 `protobuf:"varint,3,opt,name=positionedState,proto3" json:"positionedState,omitempty"` //    在位/归位状态,0表示未归位,1表示已归位
}

func (x *GunBasicState) Reset() {
	*x = GunBasicState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunBasicState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunBasicState) ProtoMessage() {}

func (x *GunBasicState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunBasicState.ProtoReflect.Descriptor instead.
func (*GunBasicState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{5}
}

func (x *GunBasicState) GetGunID() uint32 {
	if x != nil {
		return x.GunID
	}
	return 0
}

func (x *GunBasicState) GetLinkState() uint32 {
	if x != nil {
		return x.LinkState
	}
	return 0
}

func (x *GunBasicState) GetPositionedState() uint32 {
	if x != nil {
		return x.PositionedState
	}
	return 0
}

//VCI枪头连接阶段状态信息
type GunConnectState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AuxDriver     uint32     `protobuf:"varint,1,opt,name=auxDriver,proto3" json:"auxDriver,omitempty"`         //  BMS辅助电源驱动
	AuxFeedback   uint32     `protobuf:"varint,2,opt,name=auxFeedback,proto3" json:"auxFeedback,omitempty"`     //  BMS辅助电源反馈
	ELockDriver   uint32     `protobuf:"varint,3,opt,name=eLockDriver,proto3" json:"eLockDriver,omitempty"`     //  电子锁驱动
	ELockFeedback uint32     `protobuf:"varint,4,opt,name=eLockFeedback,proto3" json:"eLockFeedback,omitempty"` //  电子锁反馈
	TempPositive  float32    `protobuf:"fixed32,5,opt,name=tempPositive,proto3" json:"tempPositive,omitempty"`  //  枪头正极温度
	TempNegative  float32    `protobuf:"fixed32,6,opt,name=tempNegative,proto3" json:"tempNegative,omitempty"`  //  枪头负极温度
	BmsVIN        *BMSVinMsg `protobuf:"bytes,7,opt,name=bmsVIN,proto3" json:"bmsVIN,omitempty"`                //  车辆VIN
}

func (x *GunConnectState) Reset() {
	*x = GunConnectState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunConnectState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunConnectState) ProtoMessage() {}

func (x *GunConnectState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunConnectState.ProtoReflect.Descriptor instead.
func (*GunConnectState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{6}
}

func (x *GunConnectState) GetAuxDriver() uint32 {
	if x != nil {
		return x.AuxDriver
	}
	return 0
}

func (x *GunConnectState) GetAuxFeedback() uint32 {
	if x != nil {
		return x.AuxFeedback
	}
	return 0
}

func (x *GunConnectState) GetELockDriver() uint32 {
	if x != nil {
		return x.ELockDriver
	}
	return 0
}

func (x *GunConnectState) GetELockFeedback() uint32 {
	if x != nil {
		return x.ELockFeedback
	}
	return 0
}

func (x *GunConnectState) GetTempPositive() float32 {
	if x != nil {
		return x.TempPositive
	}
	return 0
}

func (x *GunConnectState) GetTempNegative() float32 {
	if x != nil {
		return x.TempNegative
	}
	return 0
}

func (x *GunConnectState) GetBmsVIN() *BMSVinMsg {
	if x != nil {
		return x.BmsVIN
	}
	return nil
}

//VIN-车辆主动上报
type BMSVinMsg struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryProducer string `protobuf:"bytes,7,opt,name=batteryProducer,proto3" json:"batteryProducer,omitempty"` //  电池生产厂商
	BmsVIN          string `protobuf:"bytes,8,opt,name=bmsVIN,proto3" json:"bmsVIN,omitempty"`                   //  车辆VIN
}

func (x *BMSVinMsg) Reset() {
	*x = BMSVinMsg{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSVinMsg) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSVinMsg) ProtoMessage() {}

func (x *BMSVinMsg) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSVinMsg.ProtoReflect.Descriptor instead.
func (*BMSVinMsg) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{7}
}

func (x *BMSVinMsg) GetBatteryProducer() string {
	if x != nil {
		return x.BatteryProducer
	}
	return ""
}

func (x *BMSVinMsg) GetBmsVIN() string {
	if x != nil {
		return x.BmsVIN
	}
	return ""
}

//BmsShakehands-握手阶段BMS信息
type BMSHandShake struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BmsVolMaxAllowed float64 `protobuf:"fixed64,1,opt,name=bmsVolMaxAllowed,proto3" json:"bmsVolMaxAllowed,omitempty"` // 最高允许充电总电压
	GBTProtoVersion  string  `protobuf:"bytes,2,opt,name=GBTProtoVersion,proto3" json:"GBTProtoVersion,omitempty"`     // GBT27930协议版本号
}

func (x *BMSHandShake) Reset() {
	*x = BMSHandShake{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSHandShake) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSHandShake) ProtoMessage() {}

func (x *BMSHandShake) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSHandShake.ProtoReflect.Descriptor instead.
func (*BMSHandShake) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{8}
}

func (x *BMSHandShake) GetBmsVolMaxAllowed() float64 {
	if x != nil {
		return x.BmsVolMaxAllowed
	}
	return 0
}

func (x *BMSHandShake) GetGBTProtoVersion() string {
	if x != nil {
		return x.GBTProtoVersion
	}
	return ""
}

//BmsIdentify-辨识阶段BMS信息
type BMSVerification struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BatteryType         uint32  `protobuf:"varint,1,opt,name=batteryType,proto3" json:"batteryType,omitempty"`                 // 电池类型
	BatterySN           uint32  `protobuf:"varint,2,opt,name=batterySN,proto3" json:"batterySN,omitempty"`                     // 电池组序号
	PropertyRight       uint32  `protobuf:"varint,3,opt,name=propertyRight,proto3" json:"propertyRight,omitempty"`             // 电池组产权标识
	ChargerVerifyResult uint32  `protobuf:"varint,4,opt,name=chargerVerifyResult,proto3" json:"chargerVerifyResult,omitempty"` // 充电机辨识结果
	ChargerNo           uint32  `protobuf:"varint,5,opt,name=chargerNo,proto3" json:"chargerNo,omitempty"`                     // 充电桩编号
	BatterChargeCnt     uint32  `protobuf:"varint,6,opt,name=batterChargeCnt,proto3" json:"batterChargeCnt,omitempty"`         // 电池组充电次数
	CapacityRated       float32 `protobuf:"fixed32,7,opt,name=capacityRated,proto3" json:"capacityRated,omitempty"`            // 整车动力蓄电池系统额定容量(AH)
	VoltageRated        float32 `protobuf:"fixed32,8,opt,name=voltageRated,proto3" json:"voltageRated,omitempty"`              // 整车动力蓄电池额定总电压
	BatProductor        string  `protobuf:"bytes,9,opt,name=batProductor,proto3" json:"batProductor,omitempty"`                // 电池生产厂商名称
	BatProduceDate      string  `protobuf:"bytes,10,opt,name=batProduceDate,proto3" json:"batProduceDate,omitempty"`           // 电池组生产日期
	BmsVersion          string  `protobuf:"bytes,11,opt,name=bmsVersion,proto3" json:"bmsVersion,omitempty"`                   // BMS软件版本号
	BmsVIN              string  `protobuf:"bytes,12,opt,name=bmsVIN,proto3" json:"bmsVIN,omitempty"`                           // BMS和车辆VIN
	ChargerArea         string  `protobuf:"bytes,13,opt,name=chargerArea,proto3" json:"chargerArea,omitempty"`                 // 充电机所在区域
}

func (x *BMSVerification) Reset() {
	*x = BMSVerification{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSVerification) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSVerification) ProtoMessage() {}

func (x *BMSVerification) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSVerification.ProtoReflect.Descriptor instead.
func (*BMSVerification) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{9}
}

func (x *BMSVerification) GetBatteryType() uint32 {
	if x != nil {
		return x.BatteryType
	}
	return 0
}

func (x *BMSVerification) GetBatterySN() uint32 {
	if x != nil {
		return x.BatterySN
	}
	return 0
}

func (x *BMSVerification) GetPropertyRight() uint32 {
	if x != nil {
		return x.PropertyRight
	}
	return 0
}

func (x *BMSVerification) GetChargerVerifyResult() uint32 {
	if x != nil {
		return x.ChargerVerifyResult
	}
	return 0
}

func (x *BMSVerification) GetChargerNo() uint32 {
	if x != nil {
		return x.ChargerNo
	}
	return 0
}

func (x *BMSVerification) GetBatterChargeCnt() uint32 {
	if x != nil {
		return x.BatterChargeCnt
	}
	return 0
}

func (x *BMSVerification) GetCapacityRated() float32 {
	if x != nil {
		return x.CapacityRated
	}
	return 0
}

func (x *BMSVerification) GetVoltageRated() float32 {
	if x != nil {
		return x.VoltageRated
	}
	return 0
}

func (x *BMSVerification) GetBatProductor() string {
	if x != nil {
		return x.BatProductor
	}
	return ""
}

func (x *BMSVerification) GetBatProduceDate() string {
	if x != nil {
		return x.BatProduceDate
	}
	return ""
}

func (x *BMSVerification) GetBmsVersion() string {
	if x != nil {
		return x.BmsVersion
	}
	return ""
}

func (x *BMSVerification) GetBmsVIN() string {
	if x != nil {
		return x.BmsVIN
	}
	return ""
}

func (x *BMSVerification) GetChargerArea() string {
	if x != nil {
		return x.ChargerArea
	}
	return ""
}

//BmsConfig-参数配置阶段BMS信息
type BMSConfig struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MonoVolMaxAllowed  float32 `protobuf:"fixed32,1,opt,name=monoVolMaxAllowed,proto3" json:"monoVolMaxAllowed,omitempty"`   //    单体动力蓄电池最高允许充电电压
	CurAllowedMax      float32 `protobuf:"fixed32,2,opt,name=curAllowedMax,proto3" json:"curAllowedMax,omitempty"`           //    最高允许充电电流
	TotalNominalEnergy float32 `protobuf:"fixed32,3,opt,name=totalNominalEnergy,proto3" json:"totalNominalEnergy,omitempty"` //    动力蓄电池标称总能量
	VolAllowedMax      float32 `protobuf:"fixed32,4,opt,name=volAllowedMax,proto3" json:"volAllowedMax,omitempty"`           //    最高允许充电总电压
	TempAllowedMax     float32 `protobuf:"fixed32,5,opt,name=tempAllowedMax,proto3" json:"tempAllowedMax,omitempty"`         //    最高允许温度
	StartSOC           float32 `protobuf:"fixed32,6,opt,name=startSOC,proto3" json:"startSOC,omitempty"`                     //    整车动力蓄电池荷电状态(SOC)
	VolBatNow          float32 `protobuf:"fixed32,7,opt,name=volBatNow,proto3" json:"volBatNow,omitempty"`                   //    整车动力蓄电池当前电池电压
	VolChargerMax      float32 `protobuf:"fixed32,8,opt,name=volChargerMax,proto3" json:"volChargerMax,omitempty"`           //    充电机最高输出电压
	VolChargerMin      float32 `protobuf:"fixed32,9,opt,name=volChargerMin,proto3" json:"volChargerMin,omitempty"`           //    充电机最低输出电压
	CurChargerMax      float32 `protobuf:"fixed32,10,opt,name=curChargerMax,proto3" json:"curChargerMax,omitempty"`          //    充电机最大输出电流
	CurChargerMin      float32 `protobuf:"fixed32,11,opt,name=curChargerMin,proto3" json:"curChargerMin,omitempty"`          //    充电机最小输出电流
	BmsReady           uint32  `protobuf:"varint,12,opt,name=bmsReady,proto3" json:"bmsReady,omitempty"`                     //    BMS就绪状态
	ChargerReady       uint32  `protobuf:"varint,13,opt,name=chargerReady,proto3" json:"chargerReady,omitempty"`             //    充电机就绪状态
}

func (x *BMSConfig) Reset() {
	*x = BMSConfig{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSConfig) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSConfig) ProtoMessage() {}

func (x *BMSConfig) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSConfig.ProtoReflect.Descriptor instead.
func (*BMSConfig) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{10}
}

func (x *BMSConfig) GetMonoVolMaxAllowed() float32 {
	if x != nil {
		return x.MonoVolMaxAllowed
	}
	return 0
}

func (x *BMSConfig) GetCurAllowedMax() float32 {
	if x != nil {
		return x.CurAllowedMax
	}
	return 0
}

func (x *BMSConfig) GetTotalNominalEnergy() float32 {
	if x != nil {
		return x.TotalNominalEnergy
	}
	return 0
}

func (x *BMSConfig) GetVolAllowedMax() float32 {
	if x != nil {
		return x.VolAllowedMax
	}
	return 0
}

func (x *BMSConfig) GetTempAllowedMax() float32 {
	if x != nil {
		return x.TempAllowedMax
	}
	return 0
}

func (x *BMSConfig) GetStartSOC() float32 {
	if x != nil {
		return x.StartSOC
	}
	return 0
}

func (x *BMSConfig) GetVolBatNow() float32 {
	if x != nil {
		return x.VolBatNow
	}
	return 0
}

func (x *BMSConfig) GetVolChargerMax() float32 {
	if x != nil {
		return x.VolChargerMax
	}
	return 0
}

func (x *BMSConfig) GetVolChargerMin() float32 {
	if x != nil {
		return x.VolChargerMin
	}
	return 0
}

func (x *BMSConfig) GetCurChargerMax() float32 {
	if x != nil {
		return x.CurChargerMax
	}
	return 0
}

func (x *BMSConfig) GetCurChargerMin() float32 {
	if x != nil {
		return x.CurChargerMin
	}
	return 0
}

func (x *BMSConfig) GetBmsReady() uint32 {
	if x != nil {
		return x.BmsReady
	}
	return 0
}

func (x *BMSConfig) GetChargerReady() uint32 {
	if x != nil {
		return x.ChargerReady
	}
	return 0
}

//BmsChargeFinish-充电结束阶段BMS信息
type BMSChargingEnd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EndSOC             float32 `protobuf:"fixed32,1,opt,name=endSOC,proto3" json:"endSOC,omitempty"`                         //  中止荷电状态SOC(%)
	MonoBatVolMin      float32 `protobuf:"fixed32,2,opt,name=monoBatVolMin,proto3" json:"monoBatVolMin,omitempty"`           //  动力蓄电池单体最低电压
	MonoBatVolMax      float32 `protobuf:"fixed32,3,opt,name=monoBatVolMax,proto3" json:"monoBatVolMax,omitempty"`           //    动力蓄电池单体最高电压
	BatTempMin         float32 `protobuf:"fixed32,4,opt,name=batTempMin,proto3" json:"batTempMin,omitempty"`                 //    动力蓄电池最低温度
	BatTempMax         float32 `protobuf:"fixed32,5,opt,name=batTempMax,proto3" json:"batTempMax,omitempty"`                 //    动力蓄电池最高温度
	BmsStopReason      uint32  `protobuf:"varint,6,opt,name=bmsStopReason,proto3" json:"bmsStopReason,omitempty"`            //    BMS中止充电原因
	BmsFaultReason     uint32  `protobuf:"varint,7,opt,name=bmsFaultReason,proto3" json:"bmsFaultReason,omitempty"`          //    BMS中止充电故障原因
	BmsErrorReason     uint32  `protobuf:"varint,8,opt,name=bmsErrorReason,proto3" json:"bmsErrorReason,omitempty"`          //    BMS中止充电错误原因
	ChargerStopReason  uint32  `protobuf:"varint,9,opt,name=chargerStopReason,proto3" json:"chargerStopReason,omitempty"`    //    充电机中止充电原因
	ChargerFaultReason uint32  `protobuf:"varint,10,opt,name=chargerFaultReason,proto3" json:"chargerFaultReason,omitempty"` //    充电机中止充电故障原因
	ChargerErrorReason uint32  `protobuf:"varint,11,opt,name=chargerErrorReason,proto3" json:"chargerErrorReason,omitempty"` //    充电机中止充电错误原因
}

func (x *BMSChargingEnd) Reset() {
	*x = BMSChargingEnd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSChargingEnd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSChargingEnd) ProtoMessage() {}

func (x *BMSChargingEnd) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSChargingEnd.ProtoReflect.Descriptor instead.
func (*BMSChargingEnd) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{11}
}

func (x *BMSChargingEnd) GetEndSOC() float32 {
	if x != nil {
		return x.EndSOC
	}
	return 0
}

func (x *BMSChargingEnd) GetMonoBatVolMin() float32 {
	if x != nil {
		return x.MonoBatVolMin
	}
	return 0
}

func (x *BMSChargingEnd) GetMonoBatVolMax() float32 {
	if x != nil {
		return x.MonoBatVolMax
	}
	return 0
}

func (x *BMSChargingEnd) GetBatTempMin() float32 {
	if x != nil {
		return x.BatTempMin
	}
	return 0
}

func (x *BMSChargingEnd) GetBatTempMax() float32 {
	if x != nil {
		return x.BatTempMax
	}
	return 0
}

func (x *BMSChargingEnd) GetBmsStopReason() uint32 {
	if x != nil {
		return x.BmsStopReason
	}
	return 0
}

func (x *BMSChargingEnd) GetBmsFaultReason() uint32 {
	if x != nil {
		return x.BmsFaultReason
	}
	return 0
}

func (x *BMSChargingEnd) GetBmsErrorReason() uint32 {
	if x != nil {
		return x.BmsErrorReason
	}
	return 0
}

func (x *BMSChargingEnd) GetChargerStopReason() uint32 {
	if x != nil {
		return x.ChargerStopReason
	}
	return 0
}

func (x *BMSChargingEnd) GetChargerFaultReason() uint32 {
	if x != nil {
		return x.ChargerFaultReason
	}
	return 0
}

func (x *BMSChargingEnd) GetChargerErrorReason() uint32 {
	if x != nil {
		return x.ChargerErrorReason
	}
	return 0
}

//BmsCharging-充电阶段BMS信息
type BMSCharging struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargeMode           ChargingMode `protobuf:"varint,1,opt,name=chargeMode,proto3,enum=gcu_fsm_vci.protobuf.ChargingMode" json:"chargeMode,omitempty"` //    充电模式(恒压充/恒流充)
	HeatingMode          uint32       `protobuf:"varint,2,opt,name=HeatingMode,proto3" json:"HeatingMode,omitempty"`                                      //    加热模式0：正常模式,1：充电加热模式,2：加热模式,3：保留
	TotalChgTime         uint32       `protobuf:"varint,3,opt,name=totalChgTime,proto3" json:"totalChgTime,omitempty"`                                    //充电总时间(分钟)
	MonoBatVolMaxCode    uint32       `protobuf:"varint,4,opt,name=monoBatVolMaxCode,proto3" json:"monoBatVolMaxCode,omitempty"`                          //    单体电池最高电压所在编号
	TimeRemain           uint32       `protobuf:"varint,5,opt,name=timeRemain,proto3" json:"timeRemain,omitempty"`                                        // 估算剩余充电时间(分钟)
	VolMaxGroupNum       uint32       `protobuf:"varint,6,opt,name=volMaxGroupNum,proto3" json:"volMaxGroupNum,omitempty"`                                // 最高单体动力蓄电池电压所在组号
	TempMaxCode          uint32       `protobuf:"varint,7,opt,name=tempMaxCode,proto3" json:"tempMaxCode,omitempty"`                                      //    电池最高温度检测点编号
	TempMinCode          uint32       `protobuf:"varint,8,opt,name=tempMinCode,proto3" json:"tempMinCode,omitempty"`                                      //    电池最低温度检测点编号
	MonoBatVolMinCode    uint32       `protobuf:"varint,9,opt,name=monoBatVolMinCode,proto3" json:"monoBatVolMinCode,omitempty"`                          //    单体电池最低电压所在编号
	VolDemand            float32      `protobuf:"fixed32,10,opt,name=volDemand,proto3" json:"volDemand,omitempty"`                                        //    需求电压
	CurDemand            float32      `protobuf:"fixed32,11,opt,name=curDemand,proto3" json:"curDemand,omitempty"`                                        //    需求电流
	VolMeasured          float32      `protobuf:"fixed32,12,opt,name=volMeasured,proto3" json:"volMeasured,omitempty"`                                    //    充电电压测量值
	CurMeasured          float32      `protobuf:"fixed32,13,opt,name=curMeasured,proto3" json:"curMeasured,omitempty"`                                    //    充电电流测量值
	MonoBatVolMax        float32      `protobuf:"fixed32,14,opt,name=monoBatVolMax,proto3" json:"monoBatVolMax,omitempty"`                                //    单体电池最高电压
	SocNow               float32      `protobuf:"fixed32,15,opt,name=socNow,proto3" json:"socNow,omitempty"`                                              // 当前SOC
	MonoBatVolMin        float32      `protobuf:"fixed32,16,opt,name=monoBatVolMin,proto3" json:"monoBatVolMin,omitempty"`                                //    单体电池最低电压
	TempMax              float32      `protobuf:"fixed32,17,opt,name=tempMax,proto3" json:"tempMax,omitempty"`                                            //    电池最高温度
	TempMin              float32      `protobuf:"fixed32,18,opt,name=tempMin,proto3" json:"tempMin,omitempty"`                                            //    电池最低温度
	MonoBatVolOver       uint32       `protobuf:"varint,19,opt,name=monoBatVolOver,proto3" json:"monoBatVolOver,omitempty"`                               //    单体动力蓄电池电压是否过高
	MonoBatVolUnder      uint32       `protobuf:"varint,20,opt,name=monoBatVolUnder,proto3" json:"monoBatVolUnder,omitempty"`                             //    单体动力蓄电池电压是否过低
	SocOver              uint32       `protobuf:"varint,21,opt,name=socOver,proto3" json:"socOver,omitempty"`                                             //    整车动力蓄电池荷电状态SOC是否过高
	SocUnder             uint32       `protobuf:"varint,22,opt,name=socUnder,proto3" json:"socUnder,omitempty"`                                           //    整车动力蓄电池荷电状态SOC是否过低
	BatCurOver           uint32       `protobuf:"varint,23,opt,name=batCurOver,proto3" json:"batCurOver,omitempty"`                                       //    动力蓄电池充电是否过电流
	BatTempOver          uint32       `protobuf:"varint,24,opt,name=batTempOver,proto3" json:"batTempOver,omitempty"`                                     //    动力蓄电池温度是否过高
	InsulationAbnormal   uint32       `protobuf:"varint,25,opt,name=insulationAbnormal,proto3" json:"insulationAbnormal,omitempty"`                       //    动力蓄电池绝缘状态是否绝缘
	OutConnectedAbnormal uint32       `protobuf:"varint,26,opt,name=outConnectedAbnormal,proto3" json:"outConnectedAbnormal,omitempty"`                   //    动力蓄电池输出连接器连接状态是否连接
	BmsAllowchg          uint32       `protobuf:"varint,27,opt,name=bmsAllowchg,proto3" json:"bmsAllowchg,omitempty"`                                     // BMS是否允许充电
	ChargerAllowchg      uint32       `protobuf:"varint,28,opt,name=chargerAllowchg,proto3" json:"chargerAllowchg,omitempty"`                             // 充电机是否允许充电
}

func (x *BMSCharging) Reset() {
	*x = BMSCharging{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSCharging) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSCharging) ProtoMessage() {}

func (x *BMSCharging) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSCharging.ProtoReflect.Descriptor instead.
func (*BMSCharging) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{12}
}

func (x *BMSCharging) GetChargeMode() ChargingMode {
	if x != nil {
		return x.ChargeMode
	}
	return ChargingMode_DefaultChargingMode
}

func (x *BMSCharging) GetHeatingMode() uint32 {
	if x != nil {
		return x.HeatingMode
	}
	return 0
}

func (x *BMSCharging) GetTotalChgTime() uint32 {
	if x != nil {
		return x.TotalChgTime
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolMaxCode() uint32 {
	if x != nil {
		return x.MonoBatVolMaxCode
	}
	return 0
}

func (x *BMSCharging) GetTimeRemain() uint32 {
	if x != nil {
		return x.TimeRemain
	}
	return 0
}

func (x *BMSCharging) GetVolMaxGroupNum() uint32 {
	if x != nil {
		return x.VolMaxGroupNum
	}
	return 0
}

func (x *BMSCharging) GetTempMaxCode() uint32 {
	if x != nil {
		return x.TempMaxCode
	}
	return 0
}

func (x *BMSCharging) GetTempMinCode() uint32 {
	if x != nil {
		return x.TempMinCode
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolMinCode() uint32 {
	if x != nil {
		return x.MonoBatVolMinCode
	}
	return 0
}

func (x *BMSCharging) GetVolDemand() float32 {
	if x != nil {
		return x.VolDemand
	}
	return 0
}

func (x *BMSCharging) GetCurDemand() float32 {
	if x != nil {
		return x.CurDemand
	}
	return 0
}

func (x *BMSCharging) GetVolMeasured() float32 {
	if x != nil {
		return x.VolMeasured
	}
	return 0
}

func (x *BMSCharging) GetCurMeasured() float32 {
	if x != nil {
		return x.CurMeasured
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolMax() float32 {
	if x != nil {
		return x.MonoBatVolMax
	}
	return 0
}

func (x *BMSCharging) GetSocNow() float32 {
	if x != nil {
		return x.SocNow
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolMin() float32 {
	if x != nil {
		return x.MonoBatVolMin
	}
	return 0
}

func (x *BMSCharging) GetTempMax() float32 {
	if x != nil {
		return x.TempMax
	}
	return 0
}

func (x *BMSCharging) GetTempMin() float32 {
	if x != nil {
		return x.TempMin
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolOver() uint32 {
	if x != nil {
		return x.MonoBatVolOver
	}
	return 0
}

func (x *BMSCharging) GetMonoBatVolUnder() uint32 {
	if x != nil {
		return x.MonoBatVolUnder
	}
	return 0
}

func (x *BMSCharging) GetSocOver() uint32 {
	if x != nil {
		return x.SocOver
	}
	return 0
}

func (x *BMSCharging) GetSocUnder() uint32 {
	if x != nil {
		return x.SocUnder
	}
	return 0
}

func (x *BMSCharging) GetBatCurOver() uint32 {
	if x != nil {
		return x.BatCurOver
	}
	return 0
}

func (x *BMSCharging) GetBatTempOver() uint32 {
	if x != nil {
		return x.BatTempOver
	}
	return 0
}

func (x *BMSCharging) GetInsulationAbnormal() uint32 {
	if x != nil {
		return x.InsulationAbnormal
	}
	return 0
}

func (x *BMSCharging) GetOutConnectedAbnormal() uint32 {
	if x != nil {
		return x.OutConnectedAbnormal
	}
	return 0
}

func (x *BMSCharging) GetBmsAllowchg() uint32 {
	if x != nil {
		return x.BmsAllowchg
	}
	return 0
}

func (x *BMSCharging) GetChargerAllowchg() uint32 {
	if x != nil {
		return x.ChargerAllowchg
	}
	return 0
}

//BMS 超时阶段报文
type BMSTimeout struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	BmsErrorFrame     uint32 `protobuf:"varint,1,opt,name=bmsErrorFrame,proto3" json:"bmsErrorFrame,omitempty"`         // BMS错误报文
	ChargerErrorFrame uint32 `protobuf:"varint,2,opt,name=chargerErrorFrame,proto3" json:"chargerErrorFrame,omitempty"` // 充电机错误报文
}

func (x *BMSTimeout) Reset() {
	*x = BMSTimeout{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSTimeout) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSTimeout) ProtoMessage() {}

func (x *BMSTimeout) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSTimeout.ProtoReflect.Descriptor instead.
func (*BMSTimeout) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{13}
}

func (x *BMSTimeout) GetBmsErrorFrame() uint32 {
	if x != nil {
		return x.BmsErrorFrame
	}
	return 0
}

func (x *BMSTimeout) GetChargerErrorFrame() uint32 {
	if x != nil {
		return x.ChargerErrorFrame
	}
	return 0
}

// BMS重连事件
type BMSReConnectEvent struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	TimeOutState   uint32         `protobuf:"varint,1,opt,name=timeOutState,proto3" json:"timeOutState,omitempty"`                                              // 超时事件(ACK 发生/NACK 未发生)
	BmsTimeoutType BMSTimeoutEnum `protobuf:"varint,2,opt,name=bmsTimeoutType,proto3,enum=gcu_fsm_vci.protobuf.BMSTimeoutEnum" json:"bmsTimeoutType,omitempty"` // 超时类型(BHM/BRM/BCP/BCS/BCL/BST/BSD)
	ReconnectCnt   uint32         `protobuf:"varint,3,opt,name=reconnectCnt,proto3" json:"reconnectCnt,omitempty"`                                              // 超时次数
	NextState      uint32         `protobuf:"varint,4,opt,name=nextState,proto3" json:"nextState,omitempty"`                                                    // 下一个重连状态
}

func (x *BMSReConnectEvent) Reset() {
	*x = BMSReConnectEvent{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *BMSReConnectEvent) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*BMSReConnectEvent) ProtoMessage() {}

func (x *BMSReConnectEvent) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use BMSReConnectEvent.ProtoReflect.Descriptor instead.
func (*BMSReConnectEvent) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{14}
}

func (x *BMSReConnectEvent) GetTimeOutState() uint32 {
	if x != nil {
		return x.TimeOutState
	}
	return 0
}

func (x *BMSReConnectEvent) GetBmsTimeoutType() BMSTimeoutEnum {
	if x != nil {
		return x.BmsTimeoutType
	}
	return BMSTimeoutEnum_DefaultTimeout
}

func (x *BMSReConnectEvent) GetReconnectCnt() uint32 {
	if x != nil {
		return x.ReconnectCnt
	}
	return 0
}

func (x *BMSReConnectEvent) GetNextState() uint32 {
	if x != nil {
		return x.NextState
	}
	return 0
}

//需求上传信息
type GunApplyInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VoltageApplied   float32 `protobuf:"fixed32,1,opt,name=voltageApplied,proto3" json:"voltageApplied,omitempty"`    // 需求电压
	CurrentApplied   float32 `protobuf:"fixed32,2,opt,name=currentApplied,proto3" json:"currentApplied,omitempty"`    // 需求电流
	VoltagePTP       float32 `protobuf:"fixed32,3,opt,name=voltagePTP,proto3" json:"voltagePTP,omitempty"`            // 模块PTP开机电压
	CurrentPTP       float32 `protobuf:"fixed32,4,opt,name=currentPTP,proto3" json:"currentPTP,omitempty"`            // 模块PTP开机电流
	ConnectorApplied uint32  `protobuf:"varint,5,opt,name=connectorApplied,proto3" json:"connectorApplied,omitempty"` // 输出接触器期望状态(吸合/断开)
}

func (x *GunApplyInfo) Reset() {
	*x = GunApplyInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunApplyInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunApplyInfo) ProtoMessage() {}

func (x *GunApplyInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunApplyInfo.ProtoReflect.Descriptor instead.
func (*GunApplyInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{15}
}

func (x *GunApplyInfo) GetVoltageApplied() float32 {
	if x != nil {
		return x.VoltageApplied
	}
	return 0
}

func (x *GunApplyInfo) GetCurrentApplied() float32 {
	if x != nil {
		return x.CurrentApplied
	}
	return 0
}

func (x *GunApplyInfo) GetVoltagePTP() float32 {
	if x != nil {
		return x.VoltagePTP
	}
	return 0
}

func (x *GunApplyInfo) GetCurrentPTP() float32 {
	if x != nil {
		return x.CurrentPTP
	}
	return 0
}

func (x *GunApplyInfo) GetConnectorApplied() uint32 {
	if x != nil {
		return x.ConnectorApplied
	}
	return 0
}

//停机上传信息
type GunHalt struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	StopState uint32     `protobuf:"varint,1,opt,name=stopState,proto3" json:"stopState,omitempty"`                                     //中止状态(ACK 中止,NACK未中止)
	HaltType  HaltReason `protobuf:"varint,2,opt,name=haltType,proto3,enum=gcu_fsm_vci.protobuf.HaltReason" json:"haltType,omitempty"`  //终止原因
	Faultcode FaultEnum  `protobuf:"varint,3,opt,name=faultcode,proto3,enum=gcu_fsm_vci.protobuf.FaultEnum" json:"faultcode,omitempty"` //中止码
}

func (x *GunHalt) Reset() {
	*x = GunHalt{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunHalt) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunHalt) ProtoMessage() {}

func (x *GunHalt) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunHalt.ProtoReflect.Descriptor instead.
func (*GunHalt) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{16}
}

func (x *GunHalt) GetStopState() uint32 {
	if x != nil {
		return x.StopState
	}
	return 0
}

func (x *GunHalt) GetHaltType() HaltReason {
	if x != nil {
		return x.HaltType
	}
	return HaltReason_DefaultReason
}

func (x *GunHalt) GetFaultcode() FaultEnum {
	if x != nil {
		return x.Faultcode
	}
	return FaultEnum_DefaultFault
}

//关注信息
type GunCaredInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AllocaOK       uint32  `protobuf:"varint,1,opt,name=allocaOK,proto3" json:"allocaOK,omitempty"`             //是否分配到模块
	OutConnectorFb uint32  `protobuf:"varint,2,opt,name=outConnectorFb,proto3" json:"outConnectorFb,omitempty"` //输出接触器反馈状态(吸合/断开)
	MeterVoltage   float32 `protobuf:"fixed32,3,opt,name=meterVoltage,proto3" json:"meterVoltage,omitempty"`    //电表电压
	MeterCurrent   float32 `protobuf:"fixed32,4,opt,name=meterCurrent,proto3" json:"meterCurrent,omitempty"`    //电表电流
	BatVoltage     float32 `protobuf:"fixed32,5,opt,name=batVoltage,proto3" json:"batVoltage,omitempty"`        //输出接触器后级电压
	ModVoltage     float32 `protobuf:"fixed32,6,opt,name=modVoltage,proto3" json:"modVoltage,omitempty"`        //输出接触器前级电压
	MeterEnergy    float64 `protobuf:"fixed64,7,opt,name=meterEnergy,proto3" json:"meterEnergy,omitempty"`      //电表正向电量
}

func (x *GunCaredInfo) Reset() {
	*x = GunCaredInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunCaredInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunCaredInfo) ProtoMessage() {}

func (x *GunCaredInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunCaredInfo.ProtoReflect.Descriptor instead.
func (*GunCaredInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{17}
}

func (x *GunCaredInfo) GetAllocaOK() uint32 {
	if x != nil {
		return x.AllocaOK
	}
	return 0
}

func (x *GunCaredInfo) GetOutConnectorFb() uint32 {
	if x != nil {
		return x.OutConnectorFb
	}
	return 0
}

func (x *GunCaredInfo) GetMeterVoltage() float32 {
	if x != nil {
		return x.MeterVoltage
	}
	return 0
}

func (x *GunCaredInfo) GetMeterCurrent() float32 {
	if x != nil {
		return x.MeterCurrent
	}
	return 0
}

func (x *GunCaredInfo) GetBatVoltage() float32 {
	if x != nil {
		return x.BatVoltage
	}
	return 0
}

func (x *GunCaredInfo) GetModVoltage() float32 {
	if x != nil {
		return x.ModVoltage
	}
	return 0
}

func (x *GunCaredInfo) GetMeterEnergy() float64 {
	if x != nil {
		return x.MeterEnergy
	}
	return 0
}

//充电线程故障上报
type ChargerFaultState struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	FaultType      FaultEnum  `protobuf:"varint,1,opt,name=faultType,proto3,enum=gcu_fsm_vci.protobuf.FaultEnum" json:"faultType,omitempty"`    //故障名称枚举值
	FaultState     FaultState `protobuf:"varint,2,opt,name=faultState,proto3,enum=gcu_fsm_vci.protobuf.FaultState" json:"faultState,omitempty"` //故障状态
	FaultRaiseTime uint64     `protobuf:"varint,3,opt,name=faultRaiseTime,proto3" json:"faultRaiseTime,omitempty"`                              //故障发生时间
	FaultDownTime  uint64     `protobuf:"varint,4,opt,name=faultDownTime,proto3" json:"faultDownTime,omitempty"`                                //故障恢复时间
}

func (x *ChargerFaultState) Reset() {
	*x = ChargerFaultState{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargerFaultState) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargerFaultState) ProtoMessage() {}

func (x *ChargerFaultState) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargerFaultState.ProtoReflect.Descriptor instead.
func (*ChargerFaultState) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{18}
}

func (x *ChargerFaultState) GetFaultType() FaultEnum {
	if x != nil {
		return x.FaultType
	}
	return FaultEnum_DefaultFault
}

func (x *ChargerFaultState) GetFaultState() FaultState {
	if x != nil {
		return x.FaultState
	}
	return FaultState_DefaultState
}

func (x *ChargerFaultState) GetFaultRaiseTime() uint64 {
	if x != nil {
		return x.FaultRaiseTime
	}
	return 0
}

func (x *ChargerFaultState) GetFaultDownTime() uint64 {
	if x != nil {
		return x.FaultDownTime
	}
	return 0
}

//充电线程恢复数据
type ChargerRevive struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsCharging     uint32  `protobuf:"varint,1,opt,name=isCharging,proto3" json:"isCharging,omitempty"`           //充电机状态(开机/关机)(Daniel 1004)
	IsVINStart     uint32  `protobuf:"varint,2,opt,name=isVINStart,proto3" json:"isVINStart,omitempty"`           //是否是VIN启机 (Daniel 1004)
	ChargerID      uint32  `protobuf:"varint,3,opt,name=chargerID,proto3" json:"chargerID,omitempty"`             //当前描述枪头编号,与CAN总线编号一致(0~5)
	FaultState1    uint32  `protobuf:"varint,4,opt,name=faultState1,proto3" json:"faultState1,omitempty"`         //故障列表1 与枪故障状态按位一一对应
	FaultState2    uint32  `protobuf:"varint,5,opt,name=faultState2,proto3" json:"faultState2,omitempty"`         //故障列表2
	FaultState3    uint32  `protobuf:"varint,6,opt,name=faultState3,proto3" json:"faultState3,omitempty"`         //故障列表3
	BmsCommState   uint32  `protobuf:"varint,7,opt,name=bmsCommState,proto3" json:"bmsCommState,omitempty"`       //BMS交互状态
	BmsRecvState   uint32  `protobuf:"varint,8,opt,name=bmsRecvState,proto3" json:"bmsRecvState,omitempty"`       //接收BMS报文状态
	BmsType        uint32  `protobuf:"varint,9,opt,name=bmsType,proto3" json:"bmsType,omitempty"`                 //BMS类型(实车/模拟器)
	BmsTimeoutCnt  uint32  `protobuf:"varint,10,opt,name=bmsTimeoutCnt,proto3" json:"bmsTimeoutCnt,omitempty"`    //BMS超时次数
	ElockState     uint32  `protobuf:"varint,11,opt,name=elockState,proto3" json:"elockState,omitempty"`          //电子锁状态(开/关)
	AuxPowerState  uint32  `protobuf:"varint,12,opt,name=auxPowerState,proto3" json:"auxPowerState,omitempty"`    //BMS辅源状态(开/关)
	InsultState    uint32  `protobuf:"varint,13,opt,name=insultState,proto3" json:"insultState,omitempty"`        //绝缘检测状态
	InsultResult   uint32  `protobuf:"varint,14,opt,name=insultResult,proto3" json:"insultResult,omitempty"`      //绝缘检测结果(Pass/Warn/Fail)
	BmsCurrentMax  float32 `protobuf:"fixed32,15,opt,name=bmsCurrentMax,proto3" json:"bmsCurrentMax,omitempty"`   //BMS最大允许充电电流
	BmsVoltageMax  float32 `protobuf:"fixed32,16,opt,name=bmsVoltageMax,proto3" json:"bmsVoltageMax,omitempty"`   //BMS最大允许充电电压
	CellVoltageMax float32 `protobuf:"fixed32,17,opt,name=cellVoltageMax,proto3" json:"cellVoltageMax,omitempty"` //单体允许最大电压
	CellTempMax    float32 `protobuf:"fixed32,18,opt,name=cellTempMax,proto3" json:"cellTempMax,omitempty"`       //单体允许最大温度
	InsultVoltage  float32 `protobuf:"fixed32,19,opt,name=insultVoltage,proto3" json:"insultVoltage,omitempty"`   //绝缘检测电压
}

func (x *ChargerRevive) Reset() {
	*x = ChargerRevive{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ChargerRevive) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ChargerRevive) ProtoMessage() {}

func (x *ChargerRevive) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ChargerRevive.ProtoReflect.Descriptor instead.
func (*ChargerRevive) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{19}
}

func (x *ChargerRevive) GetIsCharging() uint32 {
	if x != nil {
		return x.IsCharging
	}
	return 0
}

func (x *ChargerRevive) GetIsVINStart() uint32 {
	if x != nil {
		return x.IsVINStart
	}
	return 0
}

func (x *ChargerRevive) GetChargerID() uint32 {
	if x != nil {
		return x.ChargerID
	}
	return 0
}

func (x *ChargerRevive) GetFaultState1() uint32 {
	if x != nil {
		return x.FaultState1
	}
	return 0
}

func (x *ChargerRevive) GetFaultState2() uint32 {
	if x != nil {
		return x.FaultState2
	}
	return 0
}

func (x *ChargerRevive) GetFaultState3() uint32 {
	if x != nil {
		return x.FaultState3
	}
	return 0
}

func (x *ChargerRevive) GetBmsCommState() uint32 {
	if x != nil {
		return x.BmsCommState
	}
	return 0
}

func (x *ChargerRevive) GetBmsRecvState() uint32 {
	if x != nil {
		return x.BmsRecvState
	}
	return 0
}

func (x *ChargerRevive) GetBmsType() uint32 {
	if x != nil {
		return x.BmsType
	}
	return 0
}

func (x *ChargerRevive) GetBmsTimeoutCnt() uint32 {
	if x != nil {
		return x.BmsTimeoutCnt
	}
	return 0
}

func (x *ChargerRevive) GetElockState() uint32 {
	if x != nil {
		return x.ElockState
	}
	return 0
}

func (x *ChargerRevive) GetAuxPowerState() uint32 {
	if x != nil {
		return x.AuxPowerState
	}
	return 0
}

func (x *ChargerRevive) GetInsultState() uint32 {
	if x != nil {
		return x.InsultState
	}
	return 0
}

func (x *ChargerRevive) GetInsultResult() uint32 {
	if x != nil {
		return x.InsultResult
	}
	return 0
}

func (x *ChargerRevive) GetBmsCurrentMax() float32 {
	if x != nil {
		return x.BmsCurrentMax
	}
	return 0
}

func (x *ChargerRevive) GetBmsVoltageMax() float32 {
	if x != nil {
		return x.BmsVoltageMax
	}
	return 0
}

func (x *ChargerRevive) GetCellVoltageMax() float32 {
	if x != nil {
		return x.CellVoltageMax
	}
	return 0
}

func (x *ChargerRevive) GetCellTempMax() float32 {
	if x != nil {
		return x.CellTempMax
	}
	return 0
}

func (x *ChargerRevive) GetInsultVoltage() float32 {
	if x != nil {
		return x.InsultVoltage
	}
	return 0
}

//VCI主线程注册信息帧(0x00)
type VCIManagerRegisterInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SelfCheckResult SelfCheckState `protobuf:"varint,1,opt,name=selfCheckResult,proto3,enum=gcu_fsm_vci.protobuf.SelfCheckState" json:"selfCheckResult,omitempty"` //    车桩交互模块自检状态
	ProtocolVer     string         `protobuf:"bytes,2,opt,name=protocolVer,proto3" json:"protocolVer,omitempty"`                                                   //    车桩交互协议版本号
	EditionNumber   string         `protobuf:"bytes,3,opt,name=editionNumber,proto3" json:"editionNumber,omitempty"`                                               //    车桩交互模块版本号
}

func (x *VCIManagerRegisterInfo) Reset() {
	*x = VCIManagerRegisterInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIManagerRegisterInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIManagerRegisterInfo) ProtoMessage() {}

func (x *VCIManagerRegisterInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIManagerRegisterInfo.ProtoReflect.Descriptor instead.
func (*VCIManagerRegisterInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{20}
}

func (x *VCIManagerRegisterInfo) GetSelfCheckResult() SelfCheckState {
	if x != nil {
		return x.SelfCheckResult
	}
	return SelfCheckState_DefaultCheck
}

func (x *VCIManagerRegisterInfo) GetProtocolVer() string {
	if x != nil {
		return x.ProtocolVer
	}
	return ""
}

func (x *VCIManagerRegisterInfo) GetEditionNumber() string {
	if x != nil {
		return x.EditionNumber
	}
	return ""
}

//VCI主线程注册信息帧.响应(0x80)
type VCIManagerRegisterReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	GunAmount                 uint32              `protobuf:"varint,1,opt,name=gunAmount,proto3" json:"gunAmount,omitempty"` //枪头总计数
	ReVCIGunPrametersListLong uint32              `protobuf:"varint,2,opt,name=reVCIGunPrametersListLong,proto3" json:"reVCIGunPrametersListLong,omitempty"`
	ReVCISysParameterListLong uint32              `protobuf:"varint,3,opt,name=reVCISysParameterListLong,proto3" json:"reVCISysParameterListLong,omitempty"`
	ReChargerReviveListLong   uint32              `protobuf:"varint,4,opt,name=reChargerReviveListLong,proto3" json:"reChargerReviveListLong,omitempty"`
	ReSelfCheckResult         SelfCheckState      `protobuf:"varint,5,opt,name=reSelfCheckResult,proto3,enum=gcu_fsm_vci.protobuf.SelfCheckState" json:"reSelfCheckResult,omitempty"` //主状态机模块自检状态
	ReEnableServer            *EnableServer       `protobuf:"bytes,6,opt,name=reEnableServer,proto3" json:"reEnableServer,omitempty"`                                                 //主状态机可用服务列表
	ReProtocolVer             string              `protobuf:"bytes,7,opt,name=reProtocolVer,proto3" json:"reProtocolVer,omitempty"`                                                   //车桩交互协议版本号
	ReFSMEditionNumber        string              `protobuf:"bytes,8,opt,name=reFSMEditionNumber,proto3" json:"reFSMEditionNumber,omitempty"`                                         //主状态机模块版本号
	ReVCIGunPrametersList     []*VCIGunPrameters  `protobuf:"bytes,9,rep,name=reVCIGunPrametersList,proto3" json:"reVCIGunPrametersList,omitempty"`                                   //车桩交互模块当前配置
	ReVCISysParameterList     []*VCISysParameters `protobuf:"bytes,10,rep,name=reVCISysParameterList,proto3" json:"reVCISysParameterList,omitempty"`                                  //系统参数配置
	ReChargerReviveList       []*ChargerRevive    `protobuf:"bytes,11,rep,name=reChargerReviveList,proto3" json:"reChargerReviveList,omitempty"`                                      //充电线程复活数据
}

func (x *VCIManagerRegisterReponse) Reset() {
	*x = VCIManagerRegisterReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[21]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIManagerRegisterReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIManagerRegisterReponse) ProtoMessage() {}

func (x *VCIManagerRegisterReponse) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[21]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIManagerRegisterReponse.ProtoReflect.Descriptor instead.
func (*VCIManagerRegisterReponse) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{21}
}

func (x *VCIManagerRegisterReponse) GetGunAmount() uint32 {
	if x != nil {
		return x.GunAmount
	}
	return 0
}

func (x *VCIManagerRegisterReponse) GetReVCIGunPrametersListLong() uint32 {
	if x != nil {
		return x.ReVCIGunPrametersListLong
	}
	return 0
}

func (x *VCIManagerRegisterReponse) GetReVCISysParameterListLong() uint32 {
	if x != nil {
		return x.ReVCISysParameterListLong
	}
	return 0
}

func (x *VCIManagerRegisterReponse) GetReChargerReviveListLong() uint32 {
	if x != nil {
		return x.ReChargerReviveListLong
	}
	return 0
}

func (x *VCIManagerRegisterReponse) GetReSelfCheckResult() SelfCheckState {
	if x != nil {
		return x.ReSelfCheckResult
	}
	return SelfCheckState_DefaultCheck
}

func (x *VCIManagerRegisterReponse) GetReEnableServer() *EnableServer {
	if x != nil {
		return x.ReEnableServer
	}
	return nil
}

func (x *VCIManagerRegisterReponse) GetReProtocolVer() string {
	if x != nil {
		return x.ReProtocolVer
	}
	return ""
}

func (x *VCIManagerRegisterReponse) GetReFSMEditionNumber() string {
	if x != nil {
		return x.ReFSMEditionNumber
	}
	return ""
}

func (x *VCIManagerRegisterReponse) GetReVCIGunPrametersList() []*VCIGunPrameters {
	if x != nil {
		return x.ReVCIGunPrametersList
	}
	return nil
}

func (x *VCIManagerRegisterReponse) GetReVCISysParameterList() []*VCISysParameters {
	if x != nil {
		return x.ReVCISysParameterList
	}
	return nil
}

func (x *VCIManagerRegisterReponse) GetReChargerReviveList() []*ChargerRevive {
	if x != nil {
		return x.ReChargerReviveList
	}
	return nil
}

//VCI主线程心跳周期信息帧(0x02)
type VCIManagerHeartBeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartBeatCnt          uint32             `protobuf:"varint,1,opt,name=heartBeatCnt,proto3" json:"heartBeatCnt,omitempty"`       //    心跳计数
	TimeNow               uint64             `protobuf:"varint,2,opt,name=timeNow,proto3" json:"timeNow,omitempty"`                 //    心跳时间戳
	HeartBeatPeriod       uint32             `protobuf:"varint,3,opt,name=heartBeatPeriod,proto3" json:"heartBeatPeriod,omitempty"` //    心跳信息间隔(毫秒)
	GunBasicStateListLong uint32             `protobuf:"varint,4,opt,name=gunBasicStateListLong,proto3" json:"gunBasicStateListLong,omitempty"`
	ConnectStateListLong  uint32             `protobuf:"varint,5,opt,name=connectStateListLong,proto3" json:"connectStateListLong,omitempty"`
	GunBasicStateList     []*GunBasicState   `protobuf:"bytes,6,rep,name=gunBasicStateList,proto3" json:"gunBasicStateList,omitempty"` //    枪头基础状态信息队列
	ConnectStateList      []*GunConnectState `protobuf:"bytes,7,rep,name=ConnectStateList,proto3" json:"ConnectStateList,omitempty"`   //    枪头链接阶段控制命令 (repeat 消息 Daniel1004)
}

func (x *VCIManagerHeartBeatInfo) Reset() {
	*x = VCIManagerHeartBeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[22]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIManagerHeartBeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIManagerHeartBeatInfo) ProtoMessage() {}

func (x *VCIManagerHeartBeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[22]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIManagerHeartBeatInfo.ProtoReflect.Descriptor instead.
func (*VCIManagerHeartBeatInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{22}
}

func (x *VCIManagerHeartBeatInfo) GetHeartBeatCnt() uint32 {
	if x != nil {
		return x.HeartBeatCnt
	}
	return 0
}

func (x *VCIManagerHeartBeatInfo) GetTimeNow() uint64 {
	if x != nil {
		return x.TimeNow
	}
	return 0
}

func (x *VCIManagerHeartBeatInfo) GetHeartBeatPeriod() uint32 {
	if x != nil {
		return x.HeartBeatPeriod
	}
	return 0
}

func (x *VCIManagerHeartBeatInfo) GetGunBasicStateListLong() uint32 {
	if x != nil {
		return x.GunBasicStateListLong
	}
	return 0
}

func (x *VCIManagerHeartBeatInfo) GetConnectStateListLong() uint32 {
	if x != nil {
		return x.ConnectStateListLong
	}
	return 0
}

func (x *VCIManagerHeartBeatInfo) GetGunBasicStateList() []*GunBasicState {
	if x != nil {
		return x.GunBasicStateList
	}
	return nil
}

func (x *VCIManagerHeartBeatInfo) GetConnectStateList() []*GunConnectState {
	if x != nil {
		return x.ConnectStateList
	}
	return nil
}

//VCI主线程心跳周期信息帧.响应(0x82)
type VCIManagerHeartBeatReponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReHeartbeatCnt             uint32                 `protobuf:"varint,1,opt,name=reHeartbeatCnt,proto3" json:"reHeartbeatCnt,omitempty"`       // 心跳计数
	ReTimeNow                  uint64                 `protobuf:"varint,2,opt,name=reTimeNow,proto3" json:"reTimeNow,omitempty"`                 // 心跳时间戳
	ReHeartBeatPeriod          uint32                 `protobuf:"varint,3,opt,name=reHeartBeatPeriod,proto3" json:"reHeartBeatPeriod,omitempty"` // 心跳信息间隔(毫秒)
	ReVCIGunPrametersListLong  uint32                 `protobuf:"varint,4,opt,name=reVCIGunPrametersListLong,proto3" json:"reVCIGunPrametersListLong,omitempty"`
	ReVCISysParametersListLong uint32                 `protobuf:"varint,5,opt,name=reVCISysParametersListLong,proto3" json:"reVCISysParametersListLong,omitempty"`
	ReSysCtrlStateLong         uint32                 `protobuf:"varint,6,opt,name=reSysCtrlStateLong,proto3" json:"reSysCtrlStateLong,omitempty"`
	ReVCIGunParametersList     []*VCIGunPrameters     `protobuf:"bytes,7,rep,name=reVCIGunParametersList,proto3" json:"reVCIGunParametersList,omitempty"` // 车桩交互模块更新配置
	ReVCISysParametersList     []*VCISysParameters    `protobuf:"bytes,8,rep,name=reVCISysParametersList,proto3" json:"reVCISysParametersList,omitempty"` // 系统参数更新配置
	ReSysCtrlState             []*SysCtrlConnectStage `protobuf:"bytes,9,rep,name=reSysCtrlState,proto3" json:"reSysCtrlState,omitempty"`                 // 枪头链接阶段控制命令(repeat 消息 Daniel1004)
}

func (x *VCIManagerHeartBeatReponse) Reset() {
	*x = VCIManagerHeartBeatReponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[23]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIManagerHeartBeatReponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIManagerHeartBeatReponse) ProtoMessage() {}

func (x *VCIManagerHeartBeatReponse) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[23]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIManagerHeartBeatReponse.ProtoReflect.Descriptor instead.
func (*VCIManagerHeartBeatReponse) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{23}
}

func (x *VCIManagerHeartBeatReponse) GetReHeartbeatCnt() uint32 {
	if x != nil {
		return x.ReHeartbeatCnt
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReTimeNow() uint64 {
	if x != nil {
		return x.ReTimeNow
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReHeartBeatPeriod() uint32 {
	if x != nil {
		return x.ReHeartBeatPeriod
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReVCIGunPrametersListLong() uint32 {
	if x != nil {
		return x.ReVCIGunPrametersListLong
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReVCISysParametersListLong() uint32 {
	if x != nil {
		return x.ReVCISysParametersListLong
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReSysCtrlStateLong() uint32 {
	if x != nil {
		return x.ReSysCtrlStateLong
	}
	return 0
}

func (x *VCIManagerHeartBeatReponse) GetReVCIGunParametersList() []*VCIGunPrameters {
	if x != nil {
		return x.ReVCIGunParametersList
	}
	return nil
}

func (x *VCIManagerHeartBeatReponse) GetReVCISysParametersList() []*VCISysParameters {
	if x != nil {
		return x.ReVCISysParametersList
	}
	return nil
}

func (x *VCIManagerHeartBeatReponse) GetReSysCtrlState() []*SysCtrlConnectStage {
	if x != nil {
		return x.ReSysCtrlState
	}
	return nil
}

//充电线程心跳周期信息帧(0x06)
type VCIChargerHeartBeatInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargingID        uint32               `protobuf:"varint,1,opt,name=chargingID,proto3" json:"chargingID,omitempty"`           //    当前描述枪头编号,与CAN总线编号一致(0~5)
	HeartbeatCnt      uint32               `protobuf:"varint,2,opt,name=heartbeatCnt,proto3" json:"heartbeatCnt,omitempty"`       //    心跳计数
	TimeNow           uint64               `protobuf:"varint,3,opt,name=timeNow,proto3" json:"timeNow,omitempty"`                 //    心跳时间戳
	HeartBeatPeriod   uint32               `protobuf:"varint,4,opt,name=heartBeatPeriod,proto3" json:"heartBeatPeriod,omitempty"` //    心跳信息间隔(毫秒)
	FaultListLong     uint32               `protobuf:"varint,5,opt,name=faultListLong,proto3" json:"faultListLong,omitempty"`
	GunHandShake      *BMSHandShake        `protobuf:"bytes,6,opt,name=gunHandShake,proto3" json:"gunHandShake,omitempty"` //    枪头充电阶段状态信息
	GunVerifier       *BMSVerification     `protobuf:"bytes,7,opt,name=gunVerifier,proto3" json:"gunVerifier,omitempty"`   //    枪头充电阶段状态信息
	GunBMSconfig      *BMSConfig           `protobuf:"bytes,8,opt,name=gunBMSconfig,proto3" json:"gunBMSconfig,omitempty"` //    枪头充电阶段状态信息
	GunCharging       *BMSCharging         `protobuf:"bytes,9,opt,name=gunCharging,proto3" json:"gunCharging,omitempty"`
	GunTimeout        *BMSTimeout          `protobuf:"bytes,10,opt,name=gunTimeout,proto3" json:"gunTimeout,omitempty"` //    枪头充电阶段状态信息
	GunChargingEnd    *BMSChargingEnd      `protobuf:"bytes,11,opt,name=gunChargingEnd,proto3" json:"gunChargingEnd,omitempty"`
	ReConnect         *BMSReConnectEvent   `protobuf:"bytes,12,opt,name=reConnect,proto3" json:"reConnect,omitempty"`                 //    BMS重连事件
	ChargingReviveMsg *ChargerRevive       `protobuf:"bytes,13,opt,name=chargingReviveMsg,proto3" json:"chargingReviveMsg,omitempty"` //    恢复消息体
	FaultList         []*ChargerFaultState `protobuf:"bytes,14,rep,name=faultList,proto3" json:"faultList,omitempty"`                 //    故障列表
}

func (x *VCIChargerHeartBeatInfo) Reset() {
	*x = VCIChargerHeartBeatInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[24]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargerHeartBeatInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargerHeartBeatInfo) ProtoMessage() {}

func (x *VCIChargerHeartBeatInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[24]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargerHeartBeatInfo.ProtoReflect.Descriptor instead.
func (*VCIChargerHeartBeatInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{24}
}

func (x *VCIChargerHeartBeatInfo) GetChargingID() uint32 {
	if x != nil {
		return x.ChargingID
	}
	return 0
}

func (x *VCIChargerHeartBeatInfo) GetHeartbeatCnt() uint32 {
	if x != nil {
		return x.HeartbeatCnt
	}
	return 0
}

func (x *VCIChargerHeartBeatInfo) GetTimeNow() uint64 {
	if x != nil {
		return x.TimeNow
	}
	return 0
}

func (x *VCIChargerHeartBeatInfo) GetHeartBeatPeriod() uint32 {
	if x != nil {
		return x.HeartBeatPeriod
	}
	return 0
}

func (x *VCIChargerHeartBeatInfo) GetFaultListLong() uint32 {
	if x != nil {
		return x.FaultListLong
	}
	return 0
}

func (x *VCIChargerHeartBeatInfo) GetGunHandShake() *BMSHandShake {
	if x != nil {
		return x.GunHandShake
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetGunVerifier() *BMSVerification {
	if x != nil {
		return x.GunVerifier
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetGunBMSconfig() *BMSConfig {
	if x != nil {
		return x.GunBMSconfig
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetGunCharging() *BMSCharging {
	if x != nil {
		return x.GunCharging
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetGunTimeout() *BMSTimeout {
	if x != nil {
		return x.GunTimeout
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetGunChargingEnd() *BMSChargingEnd {
	if x != nil {
		return x.GunChargingEnd
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetReConnect() *BMSReConnectEvent {
	if x != nil {
		return x.ReConnect
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetChargingReviveMsg() *ChargerRevive {
	if x != nil {
		return x.ChargingReviveMsg
	}
	return nil
}

func (x *VCIChargerHeartBeatInfo) GetFaultList() []*ChargerFaultState {
	if x != nil {
		return x.FaultList
	}
	return nil
}

//充电线程心跳周期信息帧.响应(0x86)
type VCIChargerHeartBeatResponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ReChargingID      uint32        `protobuf:"varint,1,opt,name=reChargingID,proto3" json:"reChargingID,omitempty"`           //    当前描述枪头编号,与CAN总线编号一致(0~5)
	ReHeartBeatCnt    uint32        `protobuf:"varint,2,opt,name=reHeartBeatCnt,proto3" json:"reHeartBeatCnt,omitempty"`       //    心跳计数
	ReTimeNow         uint64        `protobuf:"varint,3,opt,name=reTimeNow,proto3" json:"reTimeNow,omitempty"`                 //    心跳时间戳
	ReHeartBeatPeriod uint32        `protobuf:"varint,4,opt,name=reHeartBeatPeriod,proto3" json:"reHeartBeatPeriod,omitempty"` //    心跳信息间隔(毫秒)
	ReGunCaredMsg     *GunCaredInfo `protobuf:"bytes,5,opt,name=reGunCaredMsg,proto3" json:"reGunCaredMsg,omitempty"`          //    枪头充电阶段关注状态
}

func (x *VCIChargerHeartBeatResponse) Reset() {
	*x = VCIChargerHeartBeatResponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[25]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargerHeartBeatResponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargerHeartBeatResponse) ProtoMessage() {}

func (x *VCIChargerHeartBeatResponse) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[25]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargerHeartBeatResponse.ProtoReflect.Descriptor instead.
func (*VCIChargerHeartBeatResponse) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{25}
}

func (x *VCIChargerHeartBeatResponse) GetReChargingID() uint32 {
	if x != nil {
		return x.ReChargingID
	}
	return 0
}

func (x *VCIChargerHeartBeatResponse) GetReHeartBeatCnt() uint32 {
	if x != nil {
		return x.ReHeartBeatCnt
	}
	return 0
}

func (x *VCIChargerHeartBeatResponse) GetReTimeNow() uint64 {
	if x != nil {
		return x.ReTimeNow
	}
	return 0
}

func (x *VCIChargerHeartBeatResponse) GetReHeartBeatPeriod() uint32 {
	if x != nil {
		return x.ReHeartBeatPeriod
	}
	return 0
}

func (x *VCIChargerHeartBeatResponse) GetReGunCaredMsg() *GunCaredInfo {
	if x != nil {
		return x.ReGunCaredMsg
	}
	return nil
}

//充电线程realtimepush
//充电线程突发上传信息帧(0x08)
type VCIChargerRTInfo struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ChargerID     uint32               `protobuf:"varint,1,opt,name=chargerID,proto3" json:"chargerID,omitempty"` //    当前描述枪头编号,与CAN总线编号一致(0~5)
	PushCnt       uint32               `protobuf:"varint,2,opt,name=pushCnt,proto3" json:"pushCnt,omitempty"`     //    推送计数
	RtPeriod      uint32               `protobuf:"varint,3,opt,name=rtPeriod,proto3" json:"rtPeriod,omitempty"`   //    反馈超时预期(毫秒)
	FaultListLong uint32               `protobuf:"varint,4,opt,name=faultListLong,proto3" json:"faultListLong,omitempty"`
	ApplyMsg      *GunApplyInfo        `protobuf:"bytes,5,opt,name=applyMsg,proto3" json:"applyMsg,omitempty"`         //    枪头充电阶段状态信息
	ConnectEvent  *BMSReConnectEvent   `protobuf:"bytes,6,opt,name=connectEvent,proto3" json:"connectEvent,omitempty"` //    BMS重连事件
	FaultList     []*ChargerFaultState `protobuf:"bytes,7,rep,name=faultList,proto3" json:"faultList,omitempty"`       //    故障列表
}

func (x *VCIChargerRTInfo) Reset() {
	*x = VCIChargerRTInfo{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[26]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargerRTInfo) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargerRTInfo) ProtoMessage() {}

func (x *VCIChargerRTInfo) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[26]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargerRTInfo.ProtoReflect.Descriptor instead.
func (*VCIChargerRTInfo) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{26}
}

func (x *VCIChargerRTInfo) GetChargerID() uint32 {
	if x != nil {
		return x.ChargerID
	}
	return 0
}

func (x *VCIChargerRTInfo) GetPushCnt() uint32 {
	if x != nil {
		return x.PushCnt
	}
	return 0
}

func (x *VCIChargerRTInfo) GetRtPeriod() uint32 {
	if x != nil {
		return x.RtPeriod
	}
	return 0
}

func (x *VCIChargerRTInfo) GetFaultListLong() uint32 {
	if x != nil {
		return x.FaultListLong
	}
	return 0
}

func (x *VCIChargerRTInfo) GetApplyMsg() *GunApplyInfo {
	if x != nil {
		return x.ApplyMsg
	}
	return nil
}

func (x *VCIChargerRTInfo) GetConnectEvent() *BMSReConnectEvent {
	if x != nil {
		return x.ConnectEvent
	}
	return nil
}

func (x *VCIChargerRTInfo) GetFaultList() []*ChargerFaultState {
	if x != nil {
		return x.FaultList
	}
	return nil
}

//充电线程realtimepull
//充电线程突发接收信息帧(0x88)
type VCIChargerRTRsponse struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	EchoChargerID     uint32               `protobuf:"varint,1,opt,name=echoChargerID,proto3" json:"echoChargerID,omitempty"` //    当前描述枪头编号,与CAN总线编号一致(0~5)
	EchoPushCnt       uint32               `protobuf:"varint,2,opt,name=echoPushCnt,proto3" json:"echoPushCnt,omitempty"`     //    推送计数
	EchoRtPeriod      uint32               `protobuf:"varint,3,opt,name=echoRtPeriod,proto3" json:"echoRtPeriod,omitempty"`   //    反馈超时预期(毫秒)
	EchoFaultListLong uint32               `protobuf:"varint,4,opt,name=echoFaultListLong,proto3" json:"echoFaultListLong,omitempty"`
	HaltMsg           *GunCaredInfo        `protobuf:"bytes,5,opt,name=haltMsg,proto3" json:"haltMsg,omitempty"`             //    枪头充电阶段状态信息
	EchoSysCtrl       *SysCtrlCharging     `protobuf:"bytes,6,opt,name=echoSysCtrl,proto3" json:"echoSysCtrl,omitempty"`     //    枪头充电阶段控制命令
	EchoFaultList     []*ChargerFaultState `protobuf:"bytes,7,rep,name=echoFaultList,proto3" json:"echoFaultList,omitempty"` //    故障列表
}

func (x *VCIChargerRTRsponse) Reset() {
	*x = VCIChargerRTRsponse{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[27]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *VCIChargerRTRsponse) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*VCIChargerRTRsponse) ProtoMessage() {}

func (x *VCIChargerRTRsponse) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_VCI_v0_8_proto_msgTypes[27]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use VCIChargerRTRsponse.ProtoReflect.Descriptor instead.
func (*VCIChargerRTRsponse) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP(), []int{27}
}

func (x *VCIChargerRTRsponse) GetEchoChargerID() uint32 {
	if x != nil {
		return x.EchoChargerID
	}
	return 0
}

func (x *VCIChargerRTRsponse) GetEchoPushCnt() uint32 {
	if x != nil {
		return x.EchoPushCnt
	}
	return 0
}

func (x *VCIChargerRTRsponse) GetEchoRtPeriod() uint32 {
	if x != nil {
		return x.EchoRtPeriod
	}
	return 0
}

func (x *VCIChargerRTRsponse) GetEchoFaultListLong() uint32 {
	if x != nil {
		return x.EchoFaultListLong
	}
	return 0
}

func (x *VCIChargerRTRsponse) GetHaltMsg() *GunCaredInfo {
	if x != nil {
		return x.HaltMsg
	}
	return nil
}

func (x *VCIChargerRTRsponse) GetEchoSysCtrl() *SysCtrlCharging {
	if x != nil {
		return x.EchoSysCtrl
	}
	return nil
}

func (x *VCIChargerRTRsponse) GetEchoFaultList() []*ChargerFaultState {
	if x != nil {
		return x.EchoFaultList
	}
	return nil
}

var File_GCU_FSM_VCI_v0_8_proto protoreflect.FileDescriptor

var file_GCU_FSM_VCI_v0_8_proto_rawDesc = []byte{
	0x0a, 0x16, 0x47, 0x43, 0x55, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x56, 0x43, 0x49, 0x5f, 0x76, 0x30,
	0x2e, 0x38, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x14, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22, 0xa4,
	0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12,
	0x1c, 0x0a, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a,
	0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x44,
	0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x44, 0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x48, 0x50,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4f, 0x48,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x43, 0x52, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4c, 0x43, 0x52, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x8c, 0x02, 0x0a, 0x0f, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e,
	0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75, 0x6e,
	0x49, 0x44, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x75, 0x6e, 0x49, 0x44, 0x12,
	0x3b, 0x0a, 0x07, 0x67, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0e,
	0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x52, 0x07, 0x67, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65, 0x12, 0x26, 0x0a, 0x0e,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c,
	0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x76, 0x6f,
	0x6c, 0x74, 0x61, 0x67, 0x65, 0x4c, 0x69, 0x6d, 0x69, 0x74, 0x65, 0x64, 0x12, 0x1a, 0x0a, 0x08,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x08,
	0x70, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x61, 0x75, 0x78, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x61, 0x75, 0x78, 0x54, 0x79,
	0x70, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e, 0x61, 0x62, 0x6c,
	0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x45, 0x6e,
	0x61, 0x62, 0x6c, 0x65, 0x22, 0xc8, 0x01, 0x0a, 0x10, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50,
	0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x73,
	0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x79,
	0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x43, 0x75,
	0x72, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x79, 0x73, 0x43,
	0x75, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73,
	0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x11, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e,
	0x56, 0x6f, 0x6c, 0x12, 0x2c, 0x0a, 0x11, 0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43,
	0x75, 0x72, 0x4d, 0x69, 0x6e, 0x56, 0x6f, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11,
	0x73, 0x79, 0x73, 0x43, 0x6f, 0x6e, 0x73, 0x74, 0x43, 0x75, 0x72, 0x4d, 0x69, 0x6e, 0x56, 0x6f,
	0x6c, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x79, 0x73, 0x43, 0x75, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x73, 0x79, 0x73, 0x43, 0x75, 0x72, 0x4d, 0x69, 0x6e, 0x22,
	0x6b, 0x0a, 0x13, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x43,
	0x6d, 0x64, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x1c,
	0x0a, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x09, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x79, 0x70, 0x65, 0x22, 0x2b, 0x0a, 0x0f,
	0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12,
	0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6d, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x43, 0x6d, 0x64, 0x22, 0x6d, 0x0a, 0x0d, 0x47, 0x75, 0x6e,
	0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x14, 0x0a, 0x05, 0x67, 0x75,
	0x6e, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x05, 0x67, 0x75, 0x6e, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x4c, 0x69, 0x6e, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x28,
	0x0a, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x65, 0x64, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0x9a, 0x02, 0x0a, 0x0f, 0x47, 0x75, 0x6e,
	0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x1c, 0x0a, 0x09,
	0x61, 0x75, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x09, 0x61, 0x75, 0x78, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x75,
	0x78, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0b, 0x61, 0x75, 0x78, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x12, 0x20, 0x0a, 0x0b,
	0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0b, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x44, 0x72, 0x69, 0x76, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64, 0x62, 0x61, 0x63, 0x6b, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x4c, 0x6f, 0x63, 0x6b, 0x46, 0x65, 0x65, 0x64,
	0x62, 0x61, 0x63, 0x6b, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70, 0x50, 0x6f, 0x73, 0x69,
	0x74, 0x69, 0x76, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x50, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x76, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x65, 0x6d, 0x70,
	0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x74, 0x65, 0x6d, 0x70, 0x4e, 0x65, 0x67, 0x61, 0x74, 0x69, 0x76, 0x65, 0x12, 0x37, 0x0a, 0x06,
	0x62, 0x6d, 0x73, 0x56, 0x49, 0x4e, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x56, 0x69, 0x6e, 0x4d, 0x73, 0x67, 0x52, 0x06, 0x62,
	0x6d, 0x73, 0x56, 0x49, 0x4e, 0x22, 0x4d, 0x0a, 0x09, 0x42, 0x4d, 0x53, 0x56, 0x69, 0x6e, 0x4d,
	0x73, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f,
	0x64, 0x75, 0x63, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x62, 0x61, 0x74,
	0x74, 0x65, 0x72, 0x79, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x72, 0x12, 0x16, 0x0a, 0x06,
	0x62, 0x6d, 0x73, 0x56, 0x49, 0x4e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6d,
	0x73, 0x56, 0x49, 0x4e, 0x22, 0x64, 0x0a, 0x0c, 0x42, 0x4d, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x53,
	0x68, 0x61, 0x6b, 0x65, 0x12, 0x2a, 0x0a, 0x10, 0x62, 0x6d, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61,
	0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x01, 0x52, 0x10,
	0x62, 0x6d, 0x73, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64,
	0x12, 0x28, 0x0a, 0x0f, 0x47, 0x42, 0x54, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0f, 0x47, 0x42, 0x54, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0xe1, 0x03, 0x0a, 0x0f, 0x42,
	0x4d, 0x53, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x12, 0x20,
	0x0a, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x1c, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x4e, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x79, 0x53, 0x4e, 0x12, 0x24,
	0x0a, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52, 0x69, 0x67, 0x68, 0x74, 0x18,
	0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x70, 0x72, 0x6f, 0x70, 0x65, 0x72, 0x74, 0x79, 0x52,
	0x69, 0x67, 0x68, 0x74, 0x12, 0x30, 0x0a, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x79, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x13, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x56, 0x65, 0x72, 0x69, 0x66, 0x79,
	0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x4e, 0x6f, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x4e, 0x6f, 0x12, 0x28, 0x0a, 0x0f, 0x62, 0x61, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x62,
	0x61, 0x74, 0x74, 0x65, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x43, 0x6e, 0x74, 0x12, 0x24,
	0x0a, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52, 0x61, 0x74, 0x65, 0x64, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x61, 0x70, 0x61, 0x63, 0x69, 0x74, 0x79, 0x52,
	0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x52,
	0x61, 0x74, 0x65, 0x64, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x76, 0x6f, 0x6c, 0x74,
	0x61, 0x67, 0x65, 0x52, 0x61, 0x74, 0x65, 0x64, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x61, 0x74, 0x50,
	0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x09, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0c,
	0x62, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x26, 0x0a, 0x0e,
	0x62, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65, 0x44, 0x61, 0x74, 0x65, 0x18, 0x0a,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x62, 0x61, 0x74, 0x50, 0x72, 0x6f, 0x64, 0x75, 0x63, 0x65,
	0x44, 0x61, 0x74, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x6d, 0x73, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x62, 0x6d, 0x73, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x16, 0x0a, 0x06, 0x62, 0x6d, 0x73, 0x56, 0x49, 0x4e, 0x18, 0x0c,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x06, 0x62, 0x6d, 0x73, 0x56, 0x49, 0x4e, 0x12, 0x20, 0x0a, 0x0b,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0b, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x72, 0x65, 0x61, 0x22, 0xef,
	0x03, 0x0a, 0x09, 0x42, 0x4d, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x2c, 0x0a, 0x11,
	0x6d, 0x6f, 0x6e, 0x6f, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65,
	0x64, 0x18, 0x01, 0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x56, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78,
	0x12, 0x2e, 0x0a, 0x12, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c,
	0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x12, 0x74, 0x6f,
	0x74, 0x61, 0x6c, 0x4e, 0x6f, 0x6d, 0x69, 0x6e, 0x61, 0x6c, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79,
	0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61,
	0x78, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x41, 0x6c, 0x6c, 0x6f,
	0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x74, 0x65, 0x6d, 0x70, 0x41, 0x6c,
	0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e,
	0x74, 0x65, 0x6d, 0x70, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x65, 0x64, 0x4d, 0x61, 0x78, 0x12, 0x1a,
	0x0a, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x4f, 0x43, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x08, 0x73, 0x74, 0x61, 0x72, 0x74, 0x53, 0x4f, 0x43, 0x12, 0x1c, 0x0a, 0x09, 0x76, 0x6f,
	0x6c, 0x42, 0x61, 0x74, 0x4e, 0x6f, 0x77, 0x18, 0x07, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x76,
	0x6f, 0x6c, 0x42, 0x61, 0x74, 0x4e, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x08, 0x20, 0x01, 0x28, 0x02, 0x52,
	0x0d, 0x76, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x24,
	0x0a, 0x0d, 0x76, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18,
	0x09, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x76, 0x6f, 0x6c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x4d, 0x69, 0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x4d, 0x61, 0x78, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x63, 0x75, 0x72,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x63, 0x75,
	0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x69, 0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0d, 0x63, 0x75, 0x72, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x4d, 0x69, 0x6e,
	0x12, 0x1a, 0x0a, 0x08, 0x62, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0c, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x62, 0x6d, 0x73, 0x52, 0x65, 0x61, 0x64, 0x79, 0x12, 0x22, 0x0a, 0x0c,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x18, 0x0d, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79,
	0x22, 0xb8, 0x03, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67,
	0x45, 0x6e, 0x64, 0x12, 0x16, 0x0a, 0x06, 0x65, 0x6e, 0x64, 0x53, 0x4f, 0x43, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x65, 0x6e, 0x64, 0x53, 0x4f, 0x43, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x02, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69,
	0x6e, 0x12, 0x24, 0x0a, 0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d,
	0x61, 0x78, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61,
	0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x54, 0x65,
	0x6d, 0x70, 0x4d, 0x61, 0x78, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x62, 0x61, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6d, 0x73, 0x53, 0x74,
	0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d,
	0x62, 0x6d, 0x73, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a,
	0x0e, 0x62, 0x6d, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62, 0x6d, 0x73, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52,
	0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x62, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f,
	0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x62,
	0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73,
	0x6f, 0x6e, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x53, 0x74, 0x6f, 0x70, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12, 0x2e, 0x0a, 0x12, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x45, 0x72, 0x72, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x22, 0x91, 0x08, 0x0a, 0x0b,
	0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x42, 0x0a, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d,
	0x6f, 0x64, 0x65, 0x52, 0x0a, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x4d, 0x6f, 0x64, 0x65, 0x12,
	0x20, 0x0a, 0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x48, 0x65, 0x61, 0x74, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64,
	0x65, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68, 0x67, 0x54, 0x69, 0x6d,
	0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74, 0x6f, 0x74, 0x61, 0x6c, 0x43, 0x68,
	0x67, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74,
	0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x43,
	0x6f, 0x64, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d, 0x61, 0x69,
	0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x74, 0x69, 0x6d, 0x65, 0x52, 0x65, 0x6d,
	0x61, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x76, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f,
	0x75, 0x70, 0x4e, 0x75, 0x6d, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x76, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x4e, 0x75, 0x6d, 0x12, 0x20, 0x0a, 0x0b, 0x74,
	0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a,
	0x0b, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12,
	0x2c, 0x0a, 0x11, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e,
	0x43, 0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x6d, 0x6f, 0x6e, 0x6f,
	0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x1c, 0x0a,
	0x09, 0x76, 0x6f, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0a, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x09, 0x76, 0x6f, 0x6c, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1c, 0x0a, 0x09, 0x63,
	0x75, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09,
	0x63, 0x75, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x76, 0x6f, 0x6c,
	0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x76, 0x6f, 0x6c, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x20, 0x0a, 0x0b, 0x63,
	0x75, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x63, 0x75, 0x72, 0x4d, 0x65, 0x61, 0x73, 0x75, 0x72, 0x65, 0x64, 0x12, 0x24, 0x0a,
	0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x0e,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c,
	0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x73, 0x6f, 0x63, 0x4e, 0x6f, 0x77, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x06, 0x73, 0x6f, 0x63, 0x4e, 0x6f, 0x77, 0x12, 0x24, 0x0a, 0x0d, 0x6d,
	0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x10, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0d, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4d, 0x69,
	0x6e, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x07, 0x74, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78, 0x12, 0x18, 0x0a, 0x07, 0x74,
	0x65, 0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x74, 0x65,
	0x6d, 0x70, 0x4d, 0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74,
	0x56, 0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x13, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6d,
	0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x28, 0x0a,
	0x0f, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72,
	0x18, 0x14, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x6d, 0x6f, 0x6e, 0x6f, 0x42, 0x61, 0x74, 0x56,
	0x6f, 0x6c, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x18, 0x0a, 0x07, 0x73, 0x6f, 0x63, 0x4f, 0x76,
	0x65, 0x72, 0x18, 0x15, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x73, 0x6f, 0x63, 0x4f, 0x76, 0x65,
	0x72, 0x12, 0x1a, 0x0a, 0x08, 0x73, 0x6f, 0x63, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x18, 0x16, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x08, 0x73, 0x6f, 0x63, 0x55, 0x6e, 0x64, 0x65, 0x72, 0x12, 0x1e, 0x0a,
	0x0a, 0x62, 0x61, 0x74, 0x43, 0x75, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x17, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0a, 0x62, 0x61, 0x74, 0x43, 0x75, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x12, 0x20, 0x0a,
	0x0b, 0x62, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x18, 0x18, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0b, 0x62, 0x61, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x4f, 0x76, 0x65, 0x72, 0x12,
	0x2e, 0x0a, 0x12, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6e,
	0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x19, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x69, 0x6e, 0x73,
	0x75, 0x6c, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x12,
	0x32, 0x0a, 0x14, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x18, 0x1a, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14, 0x6f,
	0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x65, 0x64, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x62, 0x6d, 0x73, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x63,
	0x68, 0x67, 0x18, 0x1b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x62, 0x6d, 0x73, 0x41, 0x6c, 0x6c,
	0x6f, 0x77, 0x63, 0x68, 0x67, 0x12, 0x28, 0x0a, 0x0f, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x67, 0x18, 0x1c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x63, 0x68, 0x67, 0x22,
	0x60, 0x0a, 0x0a, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6d, 0x73, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72,
	0x61, 0x6d, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x72,
	0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11,
	0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x45, 0x72, 0x72, 0x6f, 0x72, 0x46, 0x72, 0x61, 0x6d,
	0x65, 0x22, 0xc7, 0x01, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x74, 0x69, 0x6d, 0x65, 0x4f,
	0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x74,
	0x69, 0x6d, 0x65, 0x4f, 0x75, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x4c, 0x0a, 0x0e, 0x62,
	0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0e, 0x62, 0x6d, 0x73, 0x54, 0x69,
	0x6d, 0x65, 0x6f, 0x75, 0x74, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x63,
	0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x72, 0x65, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x1c, 0x0a,
	0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x09, 0x6e, 0x65, 0x78, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xca, 0x01, 0x0a, 0x0c,
	0x47, 0x75, 0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x26, 0x0a, 0x0e,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x41, 0x70, 0x70,
	0x6c, 0x69, 0x65, 0x64, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x41,
	0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0e, 0x63, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x12, 0x1e, 0x0a, 0x0a,
	0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x54, 0x50, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x76, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x50, 0x54, 0x50, 0x12, 0x1e, 0x0a, 0x0a,
	0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x54, 0x50, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x63, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x50, 0x54, 0x50, 0x12, 0x2a, 0x0a, 0x10,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x10, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f,
	0x72, 0x41, 0x70, 0x70, 0x6c, 0x69, 0x65, 0x64, 0x22, 0xa4, 0x01, 0x0a, 0x07, 0x47, 0x75, 0x6e,
	0x48, 0x61, 0x6c, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x73, 0x74, 0x6f, 0x70, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x12, 0x3c, 0x0a, 0x08, 0x68, 0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x48, 0x61, 0x6c, 0x74,
	0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x52, 0x08, 0x68, 0x61, 0x6c, 0x74, 0x54, 0x79, 0x70, 0x65,
	0x12, 0x3d, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x63, 0x6f, 0x64, 0x65, 0x22,
	0xfc, 0x01, 0x0a, 0x0c, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f,
	0x12, 0x1a, 0x0a, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x4f, 0x4b, 0x18, 0x01, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x08, 0x61, 0x6c, 0x6c, 0x6f, 0x63, 0x61, 0x4f, 0x4b, 0x12, 0x26, 0x0a, 0x0e,
	0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x46, 0x62, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0e, 0x6f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74,
	0x6f, 0x72, 0x46, 0x62, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0c,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x12, 0x1e, 0x0a, 0x0a,
	0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x1e, 0x0a, 0x0a,
	0x6d, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0a, 0x6d, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x12, 0x20, 0x0a, 0x0b,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x07, 0x20, 0x01, 0x28,
	0x01, 0x52, 0x0b, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x22, 0xe2,
	0x01, 0x0a, 0x11, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x12, 0x3d, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54, 0x79, 0x70,
	0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x1f, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x12, 0x40, 0x0a, 0x0a, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73,
	0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x0a, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x61,
	0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x52, 0x61, 0x69, 0x73, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x24, 0x0a,
	0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x44, 0x6f, 0x77, 0x6e, 0x54,
	0x69, 0x6d, 0x65, 0x22, 0xa3, 0x05, 0x0a, 0x0d, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52,
	0x65, 0x76, 0x69, 0x76, 0x65, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x73, 0x56, 0x49, 0x4e, 0x53, 0x74,
	0x61, 0x72, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x69, 0x73, 0x56, 0x49, 0x4e,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x49, 0x44, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x31, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x31, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x32, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x32, 0x12, 0x20, 0x0a, 0x0b, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x33, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x33, 0x12, 0x22, 0x0a, 0x0c, 0x62, 0x6d, 0x73,
	0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x62, 0x6d, 0x73, 0x43, 0x6f, 0x6d, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a,
	0x0c, 0x62, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x08, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x0c, 0x62, 0x6d, 0x73, 0x52, 0x65, 0x63, 0x76, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x18, 0x0a, 0x07, 0x62, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x07, 0x62, 0x6d, 0x73, 0x54, 0x79, 0x70, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x62,
	0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x0a, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0d, 0x62, 0x6d, 0x73, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x43, 0x6e,
	0x74, 0x12, 0x1e, 0x0a, 0x0a, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18,
	0x0b, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x24, 0x0a, 0x0d, 0x61, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x61, 0x75, 0x78, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x73, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x69, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x69, 0x6e, 0x73,
	0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x0e, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x12, 0x24, 0x0a,
	0x0d, 0x62, 0x6d, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x4d, 0x61, 0x78, 0x18, 0x0f,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x6d, 0x73, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74,
	0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x62, 0x6d, 0x73, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67,
	0x65, 0x4d, 0x61, 0x78, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x62, 0x6d, 0x73, 0x56,
	0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x12, 0x26, 0x0a, 0x0e, 0x63, 0x65, 0x6c,
	0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61, 0x78, 0x18, 0x11, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x0e, 0x63, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x4d, 0x61,
	0x78, 0x12, 0x20, 0x0a, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70, 0x4d, 0x61, 0x78,
	0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x63, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d, 0x70,
	0x4d, 0x61, 0x78, 0x12, 0x24, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x56, 0x6f, 0x6c,
	0x74, 0x61, 0x67, 0x65, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x69, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x22, 0xb0, 0x01, 0x0a, 0x16, 0x56, 0x43,
	0x49, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73, 0x74, 0x65, 0x72,
	0x49, 0x6e, 0x66, 0x6f, 0x12, 0x4e, 0x0a, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x52, 0x65, 0x73, 0x75, 0x6c, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x52, 0x0f, 0x73, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65,
	0x73, 0x75, 0x6c, 0x74, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c,
	0x56, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x12, 0x24, 0x0a, 0x0d, 0x65, 0x64, 0x69, 0x74, 0x69, 0x6f,
	0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x65,
	0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x22, 0xf7, 0x05, 0x0a,
	0x19, 0x56, 0x43, 0x49, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x52, 0x65, 0x67, 0x69, 0x73,
	0x74, 0x65, 0x72, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x67, 0x75,
	0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x67,
	0x75, 0x6e, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x56, 0x43,
	0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x56,
	0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x19, 0x72, 0x65, 0x56, 0x43, 0x49, 0x53,
	0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x6e, 0x67, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x19, 0x72, 0x65, 0x56, 0x43, 0x49,
	0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x38, 0x0a, 0x17, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65,
	0x72, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x17, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72,
	0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x52,
	0x0a, 0x11, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73,
	0x75, 0x6c, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66,
	0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52,
	0x11, 0x72, 0x65, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x65, 0x73, 0x75,
	0x6c, 0x74, 0x12, 0x4a, 0x0a, 0x0e, 0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65,
	0x72, 0x76, 0x65, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x0e,
	0x72, 0x65, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x24,
	0x0a, 0x0d, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x56, 0x65, 0x72, 0x18,
	0x07, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x72, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f,
	0x6c, 0x56, 0x65, 0x72, 0x12, 0x2e, 0x0a, 0x12, 0x72, 0x65, 0x46, 0x53, 0x4d, 0x45, 0x64, 0x69,
	0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75, 0x6d, 0x62, 0x65, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x12, 0x72, 0x65, 0x46, 0x53, 0x4d, 0x45, 0x64, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x4e, 0x75,
	0x6d, 0x62, 0x65, 0x72, 0x12, 0x5b, 0x0a, 0x15, 0x72, 0x65, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e,
	0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x09, 0x20,
	0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63,
	0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x47, 0x75,
	0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x72, 0x65, 0x56, 0x43,
	0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x5c, 0x0a, 0x15, 0x72, 0x65, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x0b,
	0x32, 0x26, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61,
	0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x52, 0x15, 0x72, 0x65, 0x56, 0x43, 0x49, 0x53,
	0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x55, 0x0a, 0x13, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0b, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x76,
	0x65, 0x52, 0x13, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69,
	0x76, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x91, 0x03, 0x0a, 0x17, 0x56, 0x43, 0x49, 0x4d, 0x61,
	0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x49, 0x6e,
	0x66, 0x6f, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x43,
	0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42,
	0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f,
	0x77, 0x18, 0x02, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77,
	0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72,
	0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x34, 0x0a, 0x15, 0x67, 0x75,
	0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c,
	0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x15, 0x67, 0x75, 0x6e, 0x42, 0x61,
	0x73, 0x69, 0x63, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67,
	0x12, 0x32, 0x0a, 0x14, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x14,
	0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x51, 0x0a, 0x11, 0x67, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53,
	0x74, 0x61, 0x74, 0x65, 0x52, 0x11, 0x67, 0x75, 0x6e, 0x42, 0x61, 0x73, 0x69, 0x63, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e,
	0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x43, 0x6f, 0x6e, 0x6e,
	0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x10, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63,
	0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xd0, 0x04, 0x0a, 0x1a, 0x56,
	0x43, 0x49, 0x4d, 0x61, 0x6e, 0x61, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65,
	0x61, 0x74, 0x52, 0x65, 0x70, 0x6f, 0x6e, 0x73, 0x65, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x0d, 0x52, 0x0e, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6e,
	0x74, 0x12, 0x1c, 0x0a, 0x09, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x12,
	0x2c, 0x0a, 0x11, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65,
	0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x3c, 0x0a,
	0x19, 0x72, 0x65, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x19, 0x72, 0x65, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x1a, 0x72,
	0x65, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x1a, 0x72, 0x65, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74,
	0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x2e, 0x0a, 0x12, 0x72,
	0x65, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x12, 0x72, 0x65, 0x53, 0x79, 0x73, 0x43, 0x74,
	0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x5d, 0x0a, 0x16, 0x72,
	0x65, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72,
	0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x16, 0x72, 0x65, 0x56, 0x43, 0x49, 0x47, 0x75, 0x6e, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x5e, 0x0a, 0x16, 0x72, 0x65,
	0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x73,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x08, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x65, 0x74, 0x65,
	0x72, 0x73, 0x52, 0x16, 0x72, 0x65, 0x56, 0x43, 0x49, 0x53, 0x79, 0x73, 0x50, 0x61, 0x72, 0x61,
	0x6d, 0x65, 0x74, 0x65, 0x72, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x51, 0x0a, 0x0e, 0x72, 0x65,
	0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72,
	0x6c, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x53, 0x74, 0x61, 0x67, 0x65, 0x52, 0x0e, 0x72,
	0x65, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xd3, 0x06,
	0x0a, 0x17, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1e, 0x0a, 0x0a, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x68, 0x65, 0x61,
	0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0c, 0x68, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x12, 0x18, 0x0a,
	0x07, 0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x07,
	0x74, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x28, 0x0a, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74,
	0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x0f, 0x68, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f,
	0x64, 0x12, 0x24, 0x0a, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f,
	0x6e, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x46, 0x0a, 0x0c, 0x67, 0x75, 0x6e, 0x48, 0x61,
	0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b,
	0x65, 0x52, 0x0c, 0x67, 0x75, 0x6e, 0x48, 0x61, 0x6e, 0x64, 0x53, 0x68, 0x61, 0x6b, 0x65, 0x12,
	0x47, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x18, 0x07,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x56,
	0x65, 0x72, 0x69, 0x66, 0x69, 0x63, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x52, 0x0b, 0x67, 0x75, 0x6e,
	0x56, 0x65, 0x72, 0x69, 0x66, 0x69, 0x65, 0x72, 0x12, 0x43, 0x0a, 0x0c, 0x67, 0x75, 0x6e, 0x42,
	0x4d, 0x53, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x18, 0x08, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x1f,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f,
	0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x43, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x52,
	0x0c, 0x67, 0x75, 0x6e, 0x42, 0x4d, 0x53, 0x63, 0x6f, 0x6e, 0x66, 0x69, 0x67, 0x12, 0x43, 0x0a,
	0x0b, 0x67, 0x75, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x18, 0x09, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x67, 0x75, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x12, 0x40, 0x0a, 0x0a, 0x67, 0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d,
	0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x52, 0x0a, 0x67, 0x75, 0x6e, 0x54, 0x69, 0x6d,
	0x65, 0x6f, 0x75, 0x74, 0x12, 0x4c, 0x0a, 0x0e, 0x67, 0x75, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x45, 0x6e, 0x64, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x64, 0x52, 0x0e, 0x67, 0x75, 0x6e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x45,
	0x6e, 0x64, 0x12, 0x45, 0x0a, 0x09, 0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x18,
	0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f,
	0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x42, 0x4d, 0x53,
	0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e, 0x74, 0x52, 0x09,
	0x72, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x12, 0x51, 0x0a, 0x11, 0x63, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x52, 0x11, 0x63, 0x68, 0x61, 0x72, 0x67,
	0x69, 0x6e, 0x67, 0x52, 0x65, 0x76, 0x69, 0x76, 0x65, 0x4d, 0x73, 0x67, 0x12, 0x45, 0x0a, 0x09,
	0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x0e, 0x20, 0x03, 0x28, 0x0b, 0x32,
	0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xff, 0x01, 0x0a, 0x1b, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61, 0x72, 0x67,
	0x65, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x52, 0x65, 0x73, 0x70, 0x6f,
	0x6e, 0x73, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x65, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e,
	0x67, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72, 0x65, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x49, 0x44, 0x12, 0x26, 0x0a, 0x0e, 0x72, 0x65, 0x48, 0x65, 0x61,
	0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52,
	0x0e, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x43, 0x6e, 0x74, 0x12,
	0x1c, 0x0a, 0x09, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x04, 0x52, 0x09, 0x72, 0x65, 0x54, 0x69, 0x6d, 0x65, 0x4e, 0x6f, 0x77, 0x12, 0x2c, 0x0a,
	0x11, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72, 0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69,
	0x6f, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x72, 0x65, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x42, 0x65, 0x61, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x48, 0x0a, 0x0d, 0x72,
	0x65, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72,
	0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x0d, 0x72, 0x65, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72,
	0x65, 0x64, 0x4d, 0x73, 0x67, 0x22, 0xe0, 0x02, 0x0a, 0x10, 0x56, 0x43, 0x49, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x52, 0x54, 0x49, 0x6e, 0x66, 0x6f, 0x12, 0x1c, 0x0a, 0x09, 0x63, 0x68,
	0x61, 0x72, 0x67, 0x65, 0x72, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x63,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x70, 0x75, 0x73, 0x68,
	0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x07, 0x70, 0x75, 0x73, 0x68, 0x43,
	0x6e, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x72, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x24,
	0x0a, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x18,
	0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x3e, 0x0a, 0x08, 0x61, 0x70, 0x70, 0x6c, 0x79, 0x4d, 0x73, 0x67,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d,
	0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75,
	0x6e, 0x41, 0x70, 0x70, 0x6c, 0x79, 0x49, 0x6e, 0x66, 0x6f, 0x52, 0x08, 0x61, 0x70, 0x70, 0x6c,
	0x79, 0x4d, 0x73, 0x67, 0x12, 0x4b, 0x0a, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45,
	0x76, 0x65, 0x6e, 0x74, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76,
	0x65, 0x6e, 0x74, 0x52, 0x0c, 0x63, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x45, 0x76, 0x65, 0x6e,
	0x74, 0x12, 0x45, 0x0a, 0x09, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76,
	0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x52, 0x09, 0x66,
	0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x85, 0x03, 0x0a, 0x13, 0x56, 0x43, 0x49,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x52, 0x54, 0x52, 0x73, 0x70, 0x6f, 0x6e, 0x73, 0x65,
	0x12, 0x24, 0x0a, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x65, 0x72, 0x49, 0x44, 0x12, 0x20, 0x0a, 0x0b, 0x65, 0x63, 0x68, 0x6f, 0x50, 0x75,
	0x73, 0x68, 0x43, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0b, 0x65, 0x63, 0x68,
	0x6f, 0x50, 0x75, 0x73, 0x68, 0x43, 0x6e, 0x74, 0x12, 0x22, 0x0a, 0x0c, 0x65, 0x63, 0x68, 0x6f,
	0x52, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x65, 0x63, 0x68, 0x6f, 0x52, 0x74, 0x50, 0x65, 0x72, 0x69, 0x6f, 0x64, 0x12, 0x2c, 0x0a, 0x11,
	0x65, 0x63, 0x68, 0x6f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e,
	0x67, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x11, 0x65, 0x63, 0x68, 0x6f, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74, 0x4c, 0x6f, 0x6e, 0x67, 0x12, 0x3c, 0x0a, 0x07, 0x68, 0x61,
	0x6c, 0x74, 0x4d, 0x73, 0x67, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x22, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x43, 0x61, 0x72, 0x65, 0x64, 0x49, 0x6e, 0x66, 0x6f, 0x52,
	0x07, 0x68, 0x61, 0x6c, 0x74, 0x4d, 0x73, 0x67, 0x12, 0x47, 0x0a, 0x0b, 0x65, 0x63, 0x68, 0x6f,
	0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x25, 0x2e,
	0x67, 0x63, 0x75, 0x5f, 0x66, 0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x68, 0x61, 0x72,
	0x67, 0x69, 0x6e, 0x67, 0x52, 0x0b, 0x65, 0x63, 0x68, 0x6f, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72,
	0x6c, 0x12, 0x4d, 0x0a, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69,
	0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x27, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x66,
	0x73, 0x6d, 0x5f, 0x76, 0x63, 0x69, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x68, 0x61, 0x72, 0x67, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x52, 0x0d, 0x65, 0x63, 0x68, 0x6f, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4c, 0x69, 0x73, 0x74,
	0x2a, 0xae, 0x0c, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10,
	0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x00,
	0x12, 0x13, 0x0a, 0x0f, 0x67, 0x75, 0x6e, 0x53, 0x68, 0x6f, 0x72, 0x74, 0x43, 0x69, 0x72, 0x63,
	0x75, 0x69, 0x74, 0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c,
	0x56, 0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x02, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x4d, 0x53,
	0x50, 0x61, 0x63, 0x6b, 0x56, 0x6f, 0x6c, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x42, 0x4d, 0x53, 0x50, 0x61, 0x63, 0x6b, 0x43, 0x75, 0x72, 0x72, 0x4f, 0x76, 0x65, 0x72,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x42, 0x4d, 0x53, 0x43, 0x65, 0x6c, 0x6c, 0x54, 0x65, 0x6d,
	0x70, 0x4f, 0x76, 0x65, 0x72, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x54, 0x65,
	0x6d, 0x70, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x72, 0x6f, 0x6c, 0x10, 0x06, 0x12, 0x14,
	0x0a, 0x10, 0x42, 0x4d, 0x53, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x41, 0x64, 0x68, 0x65, 0x73, 0x69,
	0x6f, 0x6e, 0x10, 0x07, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x4d, 0x53, 0x4f, 0x76, 0x65, 0x72, 0x43,
	0x68, 0x61, 0x72, 0x67, 0x65, 0x10, 0x08, 0x12, 0x17, 0x0a, 0x13, 0x42, 0x4d, 0x53, 0x41, 0x75,
	0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x09,
	0x12, 0x1c, 0x0a, 0x18, 0x42, 0x4d, 0x53, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x52, 0x65, 0x6c, 0x61,
	0x79, 0x4f, 0x70, 0x65, 0x6e, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x0a, 0x12, 0x19,
	0x0a, 0x15, 0x42, 0x4d, 0x53, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x43, 0x75, 0x72, 0x72, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0b, 0x12, 0x18, 0x0a, 0x14, 0x42, 0x4d, 0x53,
	0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x0c, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x4d, 0x53, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c,
	0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0d, 0x12, 0x0e, 0x0a, 0x0a, 0x46, 0x53,
	0x4d, 0x4f, 0x66, 0x66, 0x6c, 0x69, 0x6e, 0x65, 0x10, 0x10, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x43,
	0x31, 0x56, 0x6f, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x11, 0x12,
	0x14, 0x0a, 0x10, 0x67, 0x75, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x65, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x12, 0x12, 0x11, 0x0a, 0x0d, 0x65, 0x6c, 0x6f, 0x63, 0x6b, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x13, 0x12, 0x15, 0x0a, 0x11, 0x67, 0x75, 0x6e, 0x52,
	0x65, 0x73, 0x65, 0x72, 0x76, 0x65, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x10, 0x14, 0x12,
	0x14, 0x0a, 0x10, 0x61, 0x75, 0x78, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72,
	0x6d, 0x61, 0x6c, 0x10, 0x15, 0x12, 0x11, 0x0a, 0x0d, 0x69, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x56,
	0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x16, 0x12, 0x10, 0x0a, 0x0c, 0x69, 0x6e, 0x73, 0x75,
	0x6c, 0x74, 0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x17, 0x12, 0x0e, 0x0a, 0x0a, 0x69, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x18, 0x12, 0x12, 0x0a, 0x0e, 0x69, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x19, 0x12, 0x0e,
	0x0a, 0x0a, 0x64, 0x69, 0x73, 0x43, 0x68, 0x67, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x1a, 0x12, 0x10,
	0x0a, 0x0c, 0x73, 0x74, 0x61, 0x72, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x1b,
	0x12, 0x12, 0x0a, 0x0e, 0x62, 0x61, 0x74, 0x41, 0x6c, 0x6c, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x4c,
	0x6f, 0x77, 0x10, 0x1c, 0x12, 0x0e, 0x0a, 0x0a, 0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x48, 0x69,
	0x67, 0x68, 0x10, 0x20, 0x12, 0x0d, 0x0a, 0x09, 0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x4c, 0x6f,
	0x77, 0x10, 0x21, 0x12, 0x15, 0x0a, 0x11, 0x62, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x44, 0x69, 0x66,
	0x66, 0x46, 0x72, 0x6f, 0x6d, 0x42, 0x43, 0x50, 0x10, 0x22, 0x12, 0x11, 0x0a, 0x0d, 0x70, 0x72,
	0x65, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x23, 0x12, 0x10, 0x0a,
	0x0c, 0x70, 0x72, 0x65, 0x43, 0x68, 0x67, 0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x24, 0x12,
	0x12, 0x0a, 0x0e, 0x66, 0x75, 0x73, 0x65, 0x42, 0x72, 0x65, 0x61, 0x6b, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x10, 0x25, 0x12, 0x0f, 0x0a, 0x0b, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75,
	0x72, 0x72, 0x10, 0x26, 0x12, 0x0e, 0x0a, 0x0a, 0x6f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x10, 0x27, 0x12, 0x15, 0x0a, 0x11, 0x6d, 0x65, 0x74, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x28, 0x12, 0x14, 0x0a, 0x10, 0x6d,
	0x65, 0x74, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10,
	0x29, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e,
	0x10, 0x2a, 0x12, 0x0f, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x10, 0x2b, 0x12, 0x10, 0x0a, 0x0c, 0x6e, 0x6f, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x43,
	0x75, 0x72, 0x72, 0x10, 0x2c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x4f, 0x43, 0x46, 0x75, 0x6c, 0x6c,
	0x10, 0x2d, 0x12, 0x14, 0x0a, 0x10, 0x63, 0x68, 0x67, 0x46, 0x6f, 0x72, 0x62, 0x69, 0x64, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x2e, 0x12, 0x12, 0x0a, 0x0e, 0x63, 0x68, 0x67, 0x53,
	0x79, 0x73, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x2f, 0x12, 0x0f, 0x0a, 0x0b,
	0x42, 0x43, 0x53, 0x43, 0x75, 0x72, 0x72, 0x44, 0x69, 0x66, 0x66, 0x10, 0x30, 0x12, 0x0e, 0x0a,
	0x0a, 0x42, 0x43, 0x53, 0x56, 0x6f, 0x6c, 0x44, 0x69, 0x66, 0x66, 0x10, 0x31, 0x12, 0x10, 0x0a,
	0x0c, 0x67, 0x75, 0x6e, 0x4e, 0x6f, 0x74, 0x41, 0x74, 0x48, 0x6f, 0x6d, 0x65, 0x10, 0x32, 0x12,
	0x0f, 0x0a, 0x0b, 0x67, 0x75, 0x6e, 0x4c, 0x69, 0x66, 0x65, 0x57, 0x61, 0x72, 0x6e, 0x10, 0x33,
	0x12, 0x16, 0x0a, 0x12, 0x42, 0x4d, 0x53, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x55,
	0x6e, 0x4d, 0x61, 0x74, 0x63, 0x68, 0x10, 0x40, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52, 0x4d, 0x54,
	0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x41, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x52, 0x4d, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x42, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x43, 0x50,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x43, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x43, 0x50,
	0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x44, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x52,
	0x4f, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x45, 0x12, 0x10, 0x0a, 0x0c, 0x42, 0x52,
	0x4f, 0x61, 0x61, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x46, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x43, 0x4c, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x47, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x43, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x48, 0x12, 0x11, 0x0a, 0x0d,
	0x42, 0x53, 0x4d, 0x43, 0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x4c, 0x6f, 0x77, 0x10, 0x49, 0x12,
	0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x4d, 0x53, 0x6f, 0x63, 0x48, 0x69, 0x67, 0x68, 0x10, 0x4a, 0x12,
	0x0d, 0x0a, 0x09, 0x42, 0x53, 0x4d, 0x53, 0x6f, 0x63, 0x4c, 0x6f, 0x77, 0x10, 0x4b, 0x12, 0x13,
	0x0a, 0x0f, 0x42, 0x53, 0x4d, 0x50, 0x61, 0x63, 0x6b, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72,
	0x72, 0x10, 0x4c, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x4d, 0x42, 0x61, 0x74, 0x54, 0x65, 0x6d,
	0x70, 0x48, 0x69, 0x67, 0x68, 0x10, 0x4d, 0x12, 0x15, 0x0a, 0x11, 0x42, 0x53, 0x4d, 0x49, 0x6e,
	0x73, 0x75, 0x6c, 0x74, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x4e, 0x12, 0x18,
	0x0a, 0x14, 0x42, 0x53, 0x4d, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x62,
	0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x4f, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x4d, 0x43,
	0x65, 0x6c, 0x6c, 0x56, 0x6f, 0x6c, 0x48, 0x69, 0x67, 0x68, 0x10, 0x50, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x53, 0x54, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x51, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x53, 0x54, 0x4d, 0x65, 0x65, 0x74, 0x53, 0x4f, 0x43, 0x10, 0x52, 0x12, 0x0e, 0x0a, 0x0a,
	0x42, 0x53, 0x54, 0x4d, 0x65, 0x65, 0x74, 0x56, 0x6f, 0x6c, 0x10, 0x53, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x53, 0x54, 0x4d, 0x65, 0x65, 0x74, 0x43, 0x65, 0x6c, 0x6c, 0x76, 0x6f, 0x6c, 0x10, 0x54,
	0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x54, 0x49, 0x6e, 0x73, 0x75, 0x6c, 0x74, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x10, 0x55, 0x12, 0x1b, 0x0a, 0x17, 0x42, 0x53, 0x54, 0x4f, 0x75, 0x74, 0x43, 0x6f,
	0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10,
	0x56, 0x12, 0x19, 0x0a, 0x15, 0x42, 0x53, 0x54, 0x43, 0x6f, 0x6d, 0x6d, 0x70, 0x6f, 0x6e, 0x65,
	0x6e, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x57, 0x12, 0x1b, 0x0a, 0x17,
	0x42, 0x53, 0x54, 0x43, 0x68, 0x67, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x41,
	0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x58, 0x12, 0x12, 0x0a, 0x0e, 0x42, 0x53, 0x54,
	0x42, 0x61, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x10, 0x59, 0x12, 0x18, 0x0a,
	0x14, 0x42, 0x53, 0x54, 0x48, 0x69, 0x67, 0x68, 0x56, 0x6f, 0x6c, 0x52, 0x65, 0x6c, 0x61, 0x79,
	0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x5a, 0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x53, 0x54, 0x63, 0x63,
	0x32, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x5b, 0x12, 0x11, 0x0a, 0x0d, 0x42, 0x53, 0x54, 0x4f,
	0x74, 0x68, 0x65, 0x72, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x5c, 0x12, 0x0f, 0x0a, 0x0b, 0x42,
	0x53, 0x54, 0x4f, 0x76, 0x65, 0x72, 0x43, 0x75, 0x72, 0x72, 0x10, 0x5d, 0x12, 0x12, 0x0a, 0x0e,
	0x42, 0x53, 0x54, 0x56, 0x6f, 0x6c, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x5e,
	0x12, 0x0f, 0x0a, 0x0b, 0x42, 0x53, 0x54, 0x4e, 0x6f, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10,
	0x5f, 0x12, 0x0e, 0x0a, 0x0a, 0x42, 0x53, 0x44, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10,
	0x60, 0x2a, 0x3e, 0x0a, 0x0a, 0x48, 0x61, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e,
	0x10, 0x00, 0x12, 0x0e, 0x0a, 0x0a, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x6f, 0x70,
	0x10, 0x01, 0x12, 0x0d, 0x0a, 0x09, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x10,
	0x02, 0x2a, 0x43, 0x0a, 0x0a, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12,
	0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x61, 0x74, 0x65, 0x10,
	0x00, 0x12, 0x0f, 0x0a, 0x0b, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x53, 0x74, 0x61, 0x74, 0x65,
	0x10, 0x01, 0x12, 0x12, 0x0a, 0x0e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x75, 0x73, 0x74, 0x61,
	0x69, 0x6e, 0x65, 0x64, 0x10, 0x02, 0x2a, 0x4d, 0x0a, 0x0c, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69,
	0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x17, 0x0a, 0x13, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x43, 0x68, 0x61, 0x72, 0x67, 0x69, 0x6e, 0x67, 0x4d, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12,
	0x11, 0x0a, 0x0d, 0x56, 0x6f, 0x6c, 0x74, 0x61, 0x67, 0x65, 0x53, 0x74, 0x61, 0x62, 0x6c, 0x65,
	0x10, 0x01, 0x12, 0x11, 0x0a, 0x0d, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x53, 0x74, 0x61,
	0x62, 0x6c, 0x65, 0x10, 0x02, 0x2a, 0x5b, 0x0a, 0x0b, 0x47, 0x75, 0x6e, 0x54, 0x79, 0x70, 0x65,
	0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x54,
	0x79, 0x70, 0x65, 0x10, 0x00, 0x12, 0x09, 0x0a, 0x05, 0x47, 0x42, 0x54, 0x31, 0x31, 0x10, 0x01,
	0x12, 0x09, 0x0a, 0x05, 0x47, 0x42, 0x54, 0x31, 0x35, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x43,
	0x43, 0x53, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x68, 0x61, 0x6f, 0x6a, 0x69, 0x10, 0x04,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x6f, 0x77, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03, 0x53, 0x43, 0x44,
	0x10, 0x06, 0x2a, 0x84, 0x01, 0x0a, 0x0e, 0x42, 0x4d, 0x53, 0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75,
	0x74, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74,
	0x54, 0x69, 0x6d, 0x65, 0x6f, 0x75, 0x74, 0x10, 0x00, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x48, 0x4d,
	0x10, 0x01, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x52, 0x4d, 0x10, 0x02, 0x12, 0x07, 0x0a, 0x03, 0x42,
	0x43, 0x50, 0x10, 0x03, 0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x5f, 0x30, 0x30, 0x10, 0x04,
	0x12, 0x0a, 0x0a, 0x06, 0x42, 0x52, 0x4f, 0x5f, 0x41, 0x41, 0x10, 0x05, 0x12, 0x07, 0x0a, 0x03,
	0x42, 0x43, 0x4c, 0x10, 0x06, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x43, 0x53, 0x10, 0x07, 0x12, 0x07,
	0x0a, 0x03, 0x42, 0x53, 0x4d, 0x10, 0x08, 0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x54, 0x10, 0x09,
	0x12, 0x07, 0x0a, 0x03, 0x42, 0x53, 0x44, 0x10, 0x0a, 0x2a, 0x4d, 0x0a, 0x0e, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x53, 0x74, 0x61, 0x74, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44,
	0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a,
	0x07, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x68,
	0x65, 0x63, 0x6b, 0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x03, 0x42, 0x12, 0x5a, 0x10, 0x2e, 0x2e, 0x2f, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x63, 0x2f, 0x66, 0x73, 0x6d, 0x76, 0x63, 0x69, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GCU_FSM_VCI_v0_8_proto_rawDescOnce sync.Once
	file_GCU_FSM_VCI_v0_8_proto_rawDescData = file_GCU_FSM_VCI_v0_8_proto_rawDesc
)

func file_GCU_FSM_VCI_v0_8_proto_rawDescGZIP() []byte {
	file_GCU_FSM_VCI_v0_8_proto_rawDescOnce.Do(func() {
		file_GCU_FSM_VCI_v0_8_proto_rawDescData = protoimpl.X.CompressGZIP(file_GCU_FSM_VCI_v0_8_proto_rawDescData)
	})
	return file_GCU_FSM_VCI_v0_8_proto_rawDescData
}

var file_GCU_FSM_VCI_v0_8_proto_enumTypes = make([]protoimpl.EnumInfo, 7)
var file_GCU_FSM_VCI_v0_8_proto_msgTypes = make([]protoimpl.MessageInfo, 28)
var file_GCU_FSM_VCI_v0_8_proto_goTypes = []interface{}{
	(FaultEnum)(0),                      // 0: gcu_fsm_vci.protobuf.FaultEnum
	(HaltReason)(0),                     // 1: gcu_fsm_vci.protobuf.HaltReason
	(FaultState)(0),                     // 2: gcu_fsm_vci.protobuf.FaultState
	(ChargingMode)(0),                   // 3: gcu_fsm_vci.protobuf.ChargingMode
	(GunTypeEnum)(0),                    // 4: gcu_fsm_vci.protobuf.GunTypeEnum
	(BMSTimeoutEnum)(0),                 // 5: gcu_fsm_vci.protobuf.BMSTimeoutEnum
	(SelfCheckState)(0),                 // 6: gcu_fsm_vci.protobuf.SelfCheckState
	(*EnableServer)(nil),                // 7: gcu_fsm_vci.protobuf.EnableServer
	(*VCIGunPrameters)(nil),             // 8: gcu_fsm_vci.protobuf.VCIGunPrameters
	(*VCISysParameters)(nil),            // 9: gcu_fsm_vci.protobuf.VCISysParameters
	(*SysCtrlConnectStage)(nil),         // 10: gcu_fsm_vci.protobuf.SysCtrlConnectStage
	(*SysCtrlCharging)(nil),             // 11: gcu_fsm_vci.protobuf.SysCtrlCharging
	(*GunBasicState)(nil),               // 12: gcu_fsm_vci.protobuf.GunBasicState
	(*GunConnectState)(nil),             // 13: gcu_fsm_vci.protobuf.GunConnectState
	(*BMSVinMsg)(nil),                   // 14: gcu_fsm_vci.protobuf.BMSVinMsg
	(*BMSHandShake)(nil),                // 15: gcu_fsm_vci.protobuf.BMSHandShake
	(*BMSVerification)(nil),             // 16: gcu_fsm_vci.protobuf.BMSVerification
	(*BMSConfig)(nil),                   // 17: gcu_fsm_vci.protobuf.BMSConfig
	(*BMSChargingEnd)(nil),              // 18: gcu_fsm_vci.protobuf.BMSChargingEnd
	(*BMSCharging)(nil),                 // 19: gcu_fsm_vci.protobuf.BMSCharging
	(*BMSTimeout)(nil),                  // 20: gcu_fsm_vci.protobuf.BMSTimeout
	(*BMSReConnectEvent)(nil),           // 21: gcu_fsm_vci.protobuf.BMSReConnectEvent
	(*GunApplyInfo)(nil),                // 22: gcu_fsm_vci.protobuf.GunApplyInfo
	(*GunHalt)(nil),                     // 23: gcu_fsm_vci.protobuf.GunHalt
	(*GunCaredInfo)(nil),                // 24: gcu_fsm_vci.protobuf.GunCaredInfo
	(*ChargerFaultState)(nil),           // 25: gcu_fsm_vci.protobuf.ChargerFaultState
	(*ChargerRevive)(nil),               // 26: gcu_fsm_vci.protobuf.ChargerRevive
	(*VCIManagerRegisterInfo)(nil),      // 27: gcu_fsm_vci.protobuf.VCIManagerRegisterInfo
	(*VCIManagerRegisterReponse)(nil),   // 28: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse
	(*VCIManagerHeartBeatInfo)(nil),     // 29: gcu_fsm_vci.protobuf.VCIManagerHeartBeatInfo
	(*VCIManagerHeartBeatReponse)(nil),  // 30: gcu_fsm_vci.protobuf.VCIManagerHeartBeatReponse
	(*VCIChargerHeartBeatInfo)(nil),     // 31: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo
	(*VCIChargerHeartBeatResponse)(nil), // 32: gcu_fsm_vci.protobuf.VCIChargerHeartBeatResponse
	(*VCIChargerRTInfo)(nil),            // 33: gcu_fsm_vci.protobuf.VCIChargerRTInfo
	(*VCIChargerRTRsponse)(nil),         // 34: gcu_fsm_vci.protobuf.VCIChargerRTRsponse
}
var file_GCU_FSM_VCI_v0_8_proto_depIdxs = []int32{
	4,  // 0: gcu_fsm_vci.protobuf.VCIGunPrameters.gunType:type_name -> gcu_fsm_vci.protobuf.GunTypeEnum
	14, // 1: gcu_fsm_vci.protobuf.GunConnectState.bmsVIN:type_name -> gcu_fsm_vci.protobuf.BMSVinMsg
	3,  // 2: gcu_fsm_vci.protobuf.BMSCharging.chargeMode:type_name -> gcu_fsm_vci.protobuf.ChargingMode
	5,  // 3: gcu_fsm_vci.protobuf.BMSReConnectEvent.bmsTimeoutType:type_name -> gcu_fsm_vci.protobuf.BMSTimeoutEnum
	1,  // 4: gcu_fsm_vci.protobuf.GunHalt.haltType:type_name -> gcu_fsm_vci.protobuf.HaltReason
	0,  // 5: gcu_fsm_vci.protobuf.GunHalt.faultcode:type_name -> gcu_fsm_vci.protobuf.FaultEnum
	0,  // 6: gcu_fsm_vci.protobuf.ChargerFaultState.faultType:type_name -> gcu_fsm_vci.protobuf.FaultEnum
	2,  // 7: gcu_fsm_vci.protobuf.ChargerFaultState.faultState:type_name -> gcu_fsm_vci.protobuf.FaultState
	6,  // 8: gcu_fsm_vci.protobuf.VCIManagerRegisterInfo.selfCheckResult:type_name -> gcu_fsm_vci.protobuf.SelfCheckState
	6,  // 9: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse.reSelfCheckResult:type_name -> gcu_fsm_vci.protobuf.SelfCheckState
	7,  // 10: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse.reEnableServer:type_name -> gcu_fsm_vci.protobuf.EnableServer
	8,  // 11: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse.reVCIGunPrametersList:type_name -> gcu_fsm_vci.protobuf.VCIGunPrameters
	9,  // 12: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse.reVCISysParameterList:type_name -> gcu_fsm_vci.protobuf.VCISysParameters
	26, // 13: gcu_fsm_vci.protobuf.VCIManagerRegisterReponse.reChargerReviveList:type_name -> gcu_fsm_vci.protobuf.ChargerRevive
	12, // 14: gcu_fsm_vci.protobuf.VCIManagerHeartBeatInfo.gunBasicStateList:type_name -> gcu_fsm_vci.protobuf.GunBasicState
	13, // 15: gcu_fsm_vci.protobuf.VCIManagerHeartBeatInfo.ConnectStateList:type_name -> gcu_fsm_vci.protobuf.GunConnectState
	8,  // 16: gcu_fsm_vci.protobuf.VCIManagerHeartBeatReponse.reVCIGunParametersList:type_name -> gcu_fsm_vci.protobuf.VCIGunPrameters
	9,  // 17: gcu_fsm_vci.protobuf.VCIManagerHeartBeatReponse.reVCISysParametersList:type_name -> gcu_fsm_vci.protobuf.VCISysParameters
	10, // 18: gcu_fsm_vci.protobuf.VCIManagerHeartBeatReponse.reSysCtrlState:type_name -> gcu_fsm_vci.protobuf.SysCtrlConnectStage
	15, // 19: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunHandShake:type_name -> gcu_fsm_vci.protobuf.BMSHandShake
	16, // 20: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunVerifier:type_name -> gcu_fsm_vci.protobuf.BMSVerification
	17, // 21: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunBMSconfig:type_name -> gcu_fsm_vci.protobuf.BMSConfig
	19, // 22: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunCharging:type_name -> gcu_fsm_vci.protobuf.BMSCharging
	20, // 23: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunTimeout:type_name -> gcu_fsm_vci.protobuf.BMSTimeout
	18, // 24: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.gunChargingEnd:type_name -> gcu_fsm_vci.protobuf.BMSChargingEnd
	21, // 25: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.reConnect:type_name -> gcu_fsm_vci.protobuf.BMSReConnectEvent
	26, // 26: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.chargingReviveMsg:type_name -> gcu_fsm_vci.protobuf.ChargerRevive
	25, // 27: gcu_fsm_vci.protobuf.VCIChargerHeartBeatInfo.faultList:type_name -> gcu_fsm_vci.protobuf.ChargerFaultState
	24, // 28: gcu_fsm_vci.protobuf.VCIChargerHeartBeatResponse.reGunCaredMsg:type_name -> gcu_fsm_vci.protobuf.GunCaredInfo
	22, // 29: gcu_fsm_vci.protobuf.VCIChargerRTInfo.applyMsg:type_name -> gcu_fsm_vci.protobuf.GunApplyInfo
	21, // 30: gcu_fsm_vci.protobuf.VCIChargerRTInfo.connectEvent:type_name -> gcu_fsm_vci.protobuf.BMSReConnectEvent
	25, // 31: gcu_fsm_vci.protobuf.VCIChargerRTInfo.faultList:type_name -> gcu_fsm_vci.protobuf.ChargerFaultState
	24, // 32: gcu_fsm_vci.protobuf.VCIChargerRTRsponse.haltMsg:type_name -> gcu_fsm_vci.protobuf.GunCaredInfo
	11, // 33: gcu_fsm_vci.protobuf.VCIChargerRTRsponse.echoSysCtrl:type_name -> gcu_fsm_vci.protobuf.SysCtrlCharging
	25, // 34: gcu_fsm_vci.protobuf.VCIChargerRTRsponse.echoFaultList:type_name -> gcu_fsm_vci.protobuf.ChargerFaultState
	35, // [35:35] is the sub-list for method output_type
	35, // [35:35] is the sub-list for method input_type
	35, // [35:35] is the sub-list for extension type_name
	35, // [35:35] is the sub-list for extension extendee
	0,  // [0:35] is the sub-list for field type_name
}

func init() { file_GCU_FSM_VCI_v0_8_proto_init() }
func file_GCU_FSM_VCI_v0_8_proto_init() {
	if File_GCU_FSM_VCI_v0_8_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIGunPrameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCISysParameters); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlConnectStage); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlCharging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunBasicState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunConnectState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSVinMsg); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSHandShake); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSVerification); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSConfig); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSChargingEnd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSCharging); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSTimeout); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*BMSReConnectEvent); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunApplyInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunHalt); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunCaredInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargerFaultState); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ChargerRevive); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIManagerRegisterInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[21].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIManagerRegisterReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[22].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIManagerHeartBeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[23].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIManagerHeartBeatReponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[24].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargerHeartBeatInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[25].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargerHeartBeatResponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[26].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargerRTInfo); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_VCI_v0_8_proto_msgTypes[27].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*VCIChargerRTRsponse); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GCU_FSM_VCI_v0_8_proto_rawDesc,
			NumEnums:      7,
			NumMessages:   28,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GCU_FSM_VCI_v0_8_proto_goTypes,
		DependencyIndexes: file_GCU_FSM_VCI_v0_8_proto_depIdxs,
		EnumInfos:         file_GCU_FSM_VCI_v0_8_proto_enumTypes,
		MessageInfos:      file_GCU_FSM_VCI_v0_8_proto_msgTypes,
	}.Build()
	File_GCU_FSM_VCI_v0_8_proto = out.File
	file_GCU_FSM_VCI_v0_8_proto_rawDesc = nil
	file_GCU_FSM_VCI_v0_8_proto_goTypes = nil
	file_GCU_FSM_VCI_v0_8_proto_depIdxs = nil
}

*/
