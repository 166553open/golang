// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.10.0
// source: GCU_FSM_PMM_v0.4.proto

package fsmpmm
/*
import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

//自检状态描述枚举
type SelfCheckType int32

const (
	SelfCheckType_DefaultCheck SelfCheckType = 0 //	缺省值
	SelfCheckType_Standby      SelfCheckType = 1 //	已完成，状态可用
	SelfCheckType_Checking     SelfCheckType = 2 //	自检中，稍后上报
	SelfCheckType_CheckFault   SelfCheckType = 3 //	自检失败，自愈中
)

// Enum value maps for SelfCheckType.
var (
	SelfCheckType_name = map[int32]string{
		0: "DefaultCheck",
		1: "Standby",
		2: "Checking",
		3: "CheckFault",
	}
	SelfCheckType_value = map[string]int32{
		"DefaultCheck": 0,
		"Standby":      1,
		"Checking":     2,
		"CheckFault":   3,
	}
)

func (x SelfCheckType) Enum() *SelfCheckType {
	p := new(SelfCheckType)
	*p = x
	return p
}

func (x SelfCheckType) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (SelfCheckType) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[0].Descriptor()
}

func (SelfCheckType) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[0]
}

func (x SelfCheckType) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use SelfCheckType.Descriptor instead.
func (SelfCheckType) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{0}
}

//接触器状态枚举 ：
type ContactorStateEnum int32

const (
	ContactorStateEnum_UnKown            ContactorStateEnum = 0 //	未自检，未知状态缺省值
	ContactorStateEnum_DriveFailure      ContactorStateEnum = 1 //	故障，驱动失效
	ContactorStateEnum_ContactorAdhesion ContactorStateEnum = 2 //	故障，触点粘连
	ContactorStateEnum_ContactorStandby  ContactorStateEnum = 3 //	可抢占，阵列接触器专用
	ContactorStateEnum_ContactorLocked   ContactorStateEnum = 4 //	已被抢占，不可操作
	ContactorStateEnum_ContactorReady    ContactorStateEnum = 5 //	已被抢占，可操作，未吸合
	ContactorStateEnum_ContactorCharging ContactorStateEnum = 6 //	已被抢占，可操作，已吸合
	ContactorStateEnum_Aggregation       ContactorStateEnum = 7 //	汇聚模式，主接触器专用
)

// Enum value maps for ContactorStateEnum.
var (
	ContactorStateEnum_name = map[int32]string{
		0: "UnKown",
		1: "DriveFailure",
		2: "ContactorAdhesion",
		3: "ContactorStandby",
		4: "ContactorLocked",
		5: "ContactorReady",
		6: "ContactorCharging",
		7: "Aggregation",
	}
	ContactorStateEnum_value = map[string]int32{
		"UnKown":            0,
		"DriveFailure":      1,
		"ContactorAdhesion": 2,
		"ContactorStandby":  3,
		"ContactorLocked":   4,
		"ContactorReady":    5,
		"ContactorCharging": 6,
		"Aggregation":       7,
	}
)

func (x ContactorStateEnum) Enum() *ContactorStateEnum {
	p := new(ContactorStateEnum)
	*p = x
	return p
}

func (x ContactorStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ContactorStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[1].Descriptor()
}

func (ContactorStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[1]
}

func (x ContactorStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ContactorStateEnum.Descriptor instead.
func (ContactorStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{1}
}

//充电模块状态枚举
type ADModuleOnOffStateEnum int32

const (
	ADModuleOnOffStateEnum_ADModuleOffing       ADModuleOnOffStateEnum = 0 //  关机
	ADModuleOnOffStateEnum_ADModuleStandby      ADModuleOnOffStateEnum = 1 //	待机
	ADModuleOnOffStateEnum_ADModuleStartACON    ADModuleOnOffStateEnum = 2 //	开AC
	ADModuleOnOffStateEnum_ADModuleStartParaSet ADModuleOnOffStateEnum = 3 //	开机参数设置
	ADModuleOnOffStateEnum_ADModuleStartDCON    ADModuleOnOffStateEnum = 4 //	开DC
	ADModuleOnOffStateEnum_ADModuleActive       ADModuleOnOffStateEnum = 5 //  模块开机成功
	ADModuleOnOffStateEnum_ADModuleBroadCast    ADModuleOnOffStateEnum = 6 //	广播调压中
	ADModuleOnOffStateEnum_ADModuleInactive     ADModuleOnOffStateEnum = 7 //	开关机告警
)

// Enum value maps for ADModuleOnOffStateEnum.
var (
	ADModuleOnOffStateEnum_name = map[int32]string{
		0: "ADModuleOffing",
		1: "ADModuleStandby",
		2: "ADModuleStartACON",
		3: "ADModuleStartParaSet",
		4: "ADModuleStartDCON",
		5: "ADModuleActive",
		6: "ADModuleBroadCast",
		7: "ADModuleInactive",
	}
	ADModuleOnOffStateEnum_value = map[string]int32{
		"ADModuleOffing":       0,
		"ADModuleStandby":      1,
		"ADModuleStartACON":    2,
		"ADModuleStartParaSet": 3,
		"ADModuleStartDCON":    4,
		"ADModuleActive":       5,
		"ADModuleBroadCast":    6,
		"ADModuleInactive":     7,
	}
)

func (x ADModuleOnOffStateEnum) Enum() *ADModuleOnOffStateEnum {
	p := new(ADModuleOnOffStateEnum)
	*p = x
	return p
}

func (x ADModuleOnOffStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (ADModuleOnOffStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[2].Descriptor()
}

func (ADModuleOnOffStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[2]
}

func (x ADModuleOnOffStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use ADModuleOnOffStateEnum.Descriptor instead.
func (ADModuleOnOffStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{2}
}

//故障告警类型枚举
type AlarmTypeEnum int32

const (
	AlarmTypeEnum_DefaultEndReason AlarmTypeEnum = 0 //	缺省值
	//监控加工的故障
	AlarmTypeEnum_HvdcStartFail AlarmTypeEnum = 1 //	充电模块开机超时 *
	AlarmTypeEnum_HvdcGroupFail AlarmTypeEnum = 2 //	模块响应配组失败 *
	AlarmTypeEnum_HvdcOffline   AlarmTypeEnum = 3 //	模块离线 *
	//40帧故障告警状态
	AlarmTypeEnum_OutOverVolt       AlarmTypeEnum = 16 //	输出过压 *
	AlarmTypeEnum_OverTemp          AlarmTypeEnum = 17 //	过温 *
	AlarmTypeEnum_FanFault          AlarmTypeEnum = 18 //	风扇故障 *
	AlarmTypeEnum_EEPROMFault       AlarmTypeEnum = 19 //	模块EEPROM故障（校准失败）
	AlarmTypeEnum_CANErr            AlarmTypeEnum = 20 //	模块CAN错误状态
	AlarmTypeEnum_ACLowVolt         AlarmTypeEnum = 21 //	模块交流欠压告警 *
	AlarmTypeEnum_ACLackPhase       AlarmTypeEnum = 22 //	模块交流缺相告警 *
	AlarmTypeEnum_SerUnblncdCurr    AlarmTypeEnum = 23 //	模块严重不均流 *
	AlarmTypeEnum_IDRepeat          AlarmTypeEnum = 24 //	模块ID重复 *
	AlarmTypeEnum_ACOverVolt        AlarmTypeEnum = 25 //	模块交流过压 *
	AlarmTypeEnum_PFCProtect        AlarmTypeEnum = 26 //	模块PFC保护 *
	AlarmTypeEnum_SlightUnblncdCurr AlarmTypeEnum = 27 //	模块轻微不均流
	AlarmTypeEnum_DischgAlarm       AlarmTypeEnum = 28 //	模块放电电路故障 *
	AlarmTypeEnum_SCFault           AlarmTypeEnum = 29 //	模块短路锁死告警 *
	AlarmTypeEnum_InnerComAlarm     AlarmTypeEnum = 30 //	模块内部通信异常告警
	//43帧故障告警状态
	AlarmTypeEnum_ElectGridAbnor   AlarmTypeEnum = 32 //	电网异常检测预告警
	AlarmTypeEnum_ModRelayFault    AlarmTypeEnum = 33 //	模块继电器故障（安规故障）
	AlarmTypeEnum_OutCaplifeWarn   AlarmTypeEnum = 34 //	输出电解电容寿命预告警 *
	AlarmTypeEnum_ACCut            AlarmTypeEnum = 35 //	ACCUT输入掉电告警 *
	AlarmTypeEnum_DCOCP            AlarmTypeEnum = 36 //	DCOCP
	AlarmTypeEnum_BoardcorrectFail AlarmTypeEnum = 37 //	单板校准失败
	AlarmTypeEnum_DiodeTempWarn    AlarmTypeEnum = 38 //	DC 二极管散热器温度预告警
	AlarmTypeEnum_MOSTempWarn      AlarmTypeEnum = 39 //	DC MOS管散热器温度预告警
	AlarmTypeEnum_PFCTempWarn      AlarmTypeEnum = 40 //	PFC散热器温度预告警
)

// Enum value maps for AlarmTypeEnum.
var (
	AlarmTypeEnum_name = map[int32]string{
		0:  "DefaultEndReason",
		1:  "HvdcStartFail",
		2:  "HvdcGroupFail",
		3:  "HvdcOffline",
		16: "OutOverVolt",
		17: "OverTemp",
		18: "FanFault",
		19: "EEPROMFault",
		20: "CANErr",
		21: "ACLowVolt",
		22: "ACLackPhase",
		23: "SerUnblncdCurr",
		24: "IDRepeat",
		25: "ACOverVolt",
		26: "PFCProtect",
		27: "SlightUnblncdCurr",
		28: "DischgAlarm",
		29: "SCFault",
		30: "InnerComAlarm",
		32: "ElectGridAbnor",
		33: "ModRelayFault",
		34: "OutCaplifeWarn",
		35: "ACCut",
		36: "DCOCP",
		37: "BoardcorrectFail",
		38: "DiodeTempWarn",
		39: "MOSTempWarn",
		40: "PFCTempWarn",
	}
	AlarmTypeEnum_value = map[string]int32{
		"DefaultEndReason":  0,
		"HvdcStartFail":     1,
		"HvdcGroupFail":     2,
		"HvdcOffline":       3,
		"OutOverVolt":       16,
		"OverTemp":          17,
		"FanFault":          18,
		"EEPROMFault":       19,
		"CANErr":            20,
		"ACLowVolt":         21,
		"ACLackPhase":       22,
		"SerUnblncdCurr":    23,
		"IDRepeat":          24,
		"ACOverVolt":        25,
		"PFCProtect":        26,
		"SlightUnblncdCurr": 27,
		"DischgAlarm":       28,
		"SCFault":           29,
		"InnerComAlarm":     30,
		"ElectGridAbnor":    32,
		"ModRelayFault":     33,
		"OutCaplifeWarn":    34,
		"ACCut":             35,
		"DCOCP":             36,
		"BoardcorrectFail":  37,
		"DiodeTempWarn":     38,
		"MOSTempWarn":       39,
		"PFCTempWarn":       40,
	}
)

func (x AlarmTypeEnum) Enum() *AlarmTypeEnum {
	p := new(AlarmTypeEnum)
	*p = x
	return p
}

func (x AlarmTypeEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmTypeEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[3].Descriptor()
}

func (AlarmTypeEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[3]
}

func (x AlarmTypeEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmTypeEnum.Descriptor instead.
func (AlarmTypeEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{3}
}

//故障告警发生状态枚举
type AlarmStateEnum int32

const (
	AlarmStateEnum_DefaultAlarm    AlarmStateEnum = 0 //	缺省
	AlarmStateEnum_ADModuleNormal  AlarmStateEnum = 1 //	故障告警恢复
	AlarmStateEnum_ADModuleFaultNo AlarmStateEnum = 2 //	故障告警发生,故障
)

// Enum value maps for AlarmStateEnum.
var (
	AlarmStateEnum_name = map[int32]string{
		0: "DefaultAlarm",
		1: "ADModuleNormal",
		2: "ADModuleFaultNo",
	}
	AlarmStateEnum_value = map[string]int32{
		"DefaultAlarm":    0,
		"ADModuleNormal":  1,
		"ADModuleFaultNo": 2,
	}
)

func (x AlarmStateEnum) Enum() *AlarmStateEnum {
	p := new(AlarmStateEnum)
	*p = x
	return p
}

func (x AlarmStateEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (AlarmStateEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[4].Descriptor()
}

func (AlarmStateEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[4]
}

func (x AlarmStateEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use AlarmStateEnum.Descriptor instead.
func (AlarmStateEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{4}
}

//故障终止列表
type FaultStopEnum int32

const (
	FaultStopEnum_DefaultStopCode           FaultStopEnum = 0  //	正常中止
	FaultStopEnum_NoChgMod                  FaultStopEnum = 1  //	无模块可用
	FaultStopEnum_ModStartFail              FaultStopEnum = 2  //	模块开机超时
	FaultStopEnum_OutShortCircuit           FaultStopEnum = 3  //  输出短路
	FaultStopEnum_ContactPosStick           FaultStopEnum = 4  //	输出接触器正极粘连故障
	FaultStopEnum_ContactNegStick           FaultStopEnum = 5  //	输出接触器负极粘连故障
	FaultStopEnum_ContactPosDiscnct         FaultStopEnum = 6  //	输出接触器正极驱动失效故障
	FaultStopEnum_ContactNegDiscnct         FaultStopEnum = 7  //	输出接触器负极驱动失效故障
	FaultStopEnum_InputACOverVolt           FaultStopEnum = 8  //  输入过压
	FaultStopEnum_InputACLowVolt            FaultStopEnum = 9  //  输入欠压
	FaultStopEnum_InputACLakePhase          FaultStopEnum = 10 //  输入缺相
	FaultStopEnum_ArrayContactorCmdAbnormal FaultStopEnum = 11 //  阵列接触器指令异常
	FaultStopEnum_OutContactorCmdAbnormal   FaultStopEnum = 12 //  输出接触器指令异常
	FaultStopEnum_ArrayContactorStick       FaultStopEnum = 13 //  阵列接触器粘连
	FaultStopEnum_ArrayContactorDiscnct     FaultStopEnum = 14 //  阵列接触器驱动失效
)

// Enum value maps for FaultStopEnum.
var (
	FaultStopEnum_name = map[int32]string{
		0:  "DefaultStopCode",
		1:  "NoChgMod",
		2:  "ModStartFail",
		3:  "OutShortCircuit",
		4:  "ContactPosStick",
		5:  "ContactNegStick",
		6:  "ContactPosDiscnct",
		7:  "ContactNegDiscnct",
		8:  "InputACOverVolt",
		9:  "InputACLowVolt",
		10: "InputACLakePhase",
		11: "ArrayContactorCmdAbnormal",
		12: "OutContactorCmdAbnormal",
		13: "ArrayContactorStick",
		14: "ArrayContactorDiscnct",
	}
	FaultStopEnum_value = map[string]int32{
		"DefaultStopCode":           0,
		"NoChgMod":                  1,
		"ModStartFail":              2,
		"OutShortCircuit":           3,
		"ContactPosStick":           4,
		"ContactNegStick":           5,
		"ContactPosDiscnct":         6,
		"ContactNegDiscnct":         7,
		"InputACOverVolt":           8,
		"InputACLowVolt":            9,
		"InputACLakePhase":          10,
		"ArrayContactorCmdAbnormal": 11,
		"OutContactorCmdAbnormal":   12,
		"ArrayContactorStick":       13,
		"ArrayContactorDiscnct":     14,
	}
)

func (x FaultStopEnum) Enum() *FaultStopEnum {
	p := new(FaultStopEnum)
	*p = x
	return p
}

func (x FaultStopEnum) String() string {
	return protoimpl.X.EnumStringOf(x.Descriptor(), protoreflect.EnumNumber(x))
}

func (FaultStopEnum) Descriptor() protoreflect.EnumDescriptor {
	return file_GCU_FSM_PMM_v0_4_proto_enumTypes[5].Descriptor()
}

func (FaultStopEnum) Type() protoreflect.EnumType {
	return &file_GCU_FSM_PMM_v0_4_proto_enumTypes[5]
}

func (x FaultStopEnum) Number() protoreflect.EnumNumber {
	return protoreflect.EnumNumber(x)
}

// Deprecated: Use FaultStopEnum.Descriptor instead.
func (FaultStopEnum) EnumDescriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{5}
}

//可用服务列表
type EnableServer struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	VCIServer bool `protobuf:"varint,1,opt,name=VCIServer,proto3" json:"VCIServer,omitempty"` //	VCI模块状态，0表示不可用，1表示可用
	PMMServer bool `protobuf:"varint,2,opt,name=PMMServer,proto3" json:"PMMServer,omitempty"` //	PMM模块状态，0表示不可用，1表示可用
	DMCServer bool `protobuf:"varint,3,opt,name=DMCServer,proto3" json:"DMCServer,omitempty"` //	DMC模块状态，0表示不可用，1表示可用
	OHPServer bool `protobuf:"varint,4,opt,name=OHPServer,proto3" json:"OHPServer,omitempty"` //	OHP模块状态，0表示不可用，1表示可用
	LCRServer bool `protobuf:"varint,5,opt,name=LCRServer,proto3" json:"LCRServer,omitempty"` //	LCR模块状态，0表示不可用，1表示可用
}

func (x *EnableServer) Reset() {
	*x = EnableServer{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *EnableServer) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*EnableServer) ProtoMessage() {}

func (x *EnableServer) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use EnableServer.ProtoReflect.Descriptor instead.
func (*EnableServer) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{0}
}

func (x *EnableServer) GetVCIServer() bool {
	if x != nil {
		return x.VCIServer
	}
	return false
}

func (x *EnableServer) GetPMMServer() bool {
	if x != nil {
		return x.PMMServer
	}
	return false
}

func (x *EnableServer) GetDMCServer() bool {
	if x != nil {
		return x.DMCServer
	}
	return false
}

func (x *EnableServer) GetOHPServer() bool {
	if x != nil {
		return x.OHPServer
	}
	return false
}

func (x *EnableServer) GetLCRServer() bool {
	if x != nil {
		return x.LCRServer
	}
	return false
}

//主接触器状态描述
type MainStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                     //	对应枪头编号
	BatVol       float32            `protobuf:"fixed32,2,opt,name=BatVol,proto3" json:"BatVol,omitempty"`                                                            //	主接触器后级电压
	ModVol       float32            `protobuf:"fixed32,3,opt,name=ModVol,proto3" json:"ModVol,omitempty"`                                                            //	主接触器前级电压
	MainMode     ContactorStateEnum `protobuf:"varint,4,opt,name=MainMode,proto3,enum=gcu_main_pmm.protobuf.ContactorStateEnum" json:"MainMode,omitempty"`           //	主接触器当前状态
	MatrixID     []int32            `protobuf:"varint,5,rep,packed,name=MatrixID,proto3" json:"MatrixID,omitempty"`                                                  //	当前分配阵列接触器ID队列
	ADModuleID   []int32            `protobuf:"varint,6,rep,packed,name=ADModuleID,proto3" json:"ADModuleID,omitempty"`                                              //	当前分配模块ID队列
	AlarmAnsList []FaultStopEnum    `protobuf:"varint,7,rep,packed,name=AlarmAnsList,proto3,enum=gcu_main_pmm.protobuf.FaultStopEnum" json:"AlarmAnsList,omitempty"` //	故障告警属性
}

func (x *MainStatus) Reset() {
	*x = MainStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainStatus) ProtoMessage() {}

func (x *MainStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainStatus.ProtoReflect.Descriptor instead.
func (*MainStatus) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{1}
}

func (x *MainStatus) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MainStatus) GetBatVol() float32 {
	if x != nil {
		return x.BatVol
	}
	return 0
}

func (x *MainStatus) GetModVol() float32 {
	if x != nil {
		return x.ModVol
	}
	return 0
}

func (x *MainStatus) GetMainMode() ContactorStateEnum {
	if x != nil {
		return x.MainMode
	}
	return ContactorStateEnum_UnKown
}

func (x *MainStatus) GetMatrixID() []int32 {
	if x != nil {
		return x.MatrixID
	}
	return nil
}

func (x *MainStatus) GetADModuleID() []int32 {
	if x != nil {
		return x.ADModuleID
	}
	return nil
}

func (x *MainStatus) GetAlarmAnsList() []FaultStopEnum {
	if x != nil {
		return x.AlarmAnsList
	}
	return nil
}

//阵列接触器状态描述
type MatrixStatus struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32              `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                     //	编号，0枪视角
	MatrixMode   ContactorStateEnum `protobuf:"varint,2,opt,name=MatrixMode,proto3,enum=gcu_main_pmm.protobuf.ContactorStateEnum" json:"MatrixMode,omitempty"`       //	阵列接触器当前状态
	AlarmAnsList []FaultStopEnum    `protobuf:"varint,3,rep,packed,name=AlarmAnsList,proto3,enum=gcu_main_pmm.protobuf.FaultStopEnum" json:"AlarmAnsList,omitempty"` //	故障告警属性
}

func (x *MatrixStatus) Reset() {
	*x = MatrixStatus{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MatrixStatus) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MatrixStatus) ProtoMessage() {}

func (x *MatrixStatus) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MatrixStatus.ProtoReflect.Descriptor instead.
func (*MatrixStatus) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{2}
}

func (x *MatrixStatus) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MatrixStatus) GetMatrixMode() ContactorStateEnum {
	if x != nil {
		return x.MatrixMode
	}
	return ContactorStateEnum_UnKown
}

func (x *MatrixStatus) GetAlarmAnsList() []FaultStopEnum {
	if x != nil {
		return x.AlarmAnsList
	}
	return nil
}

//接触器配置描述
type ContactorPara struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID        int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                //	对应枪头编号或接触器编号
	LimitCurr float32 `protobuf:"fixed32,2,opt,name=LimitCurr,proto3" json:"LimitCurr,omitempty"` //	主接触器最大电流
}

func (x *ContactorPara) Reset() {
	*x = ContactorPara{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[3]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ContactorPara) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ContactorPara) ProtoMessage() {}

func (x *ContactorPara) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[3]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ContactorPara.ProtoReflect.Descriptor instead.
func (*ContactorPara) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{3}
}

func (x *ContactorPara) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ContactorPara) GetLimitCurr() float32 {
	if x != nil {
		return x.LimitCurr
	}
	return 0
}

//模块注册参数描述
type ADModuleAttr struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                        //	模块编号/位号
	CurrMax       float32 `protobuf:"fixed32,2,opt,name=currMax,proto3" json:"currMax,omitempty"`             //	模块最大输出电流
	LimitPower    float32 `protobuf:"fixed32,3,opt,name=limitPower,proto3" json:"limitPower,omitempty"`       //	模块限功率点
	VolMax        float32 `protobuf:"fixed32,4,opt,name=volMax,proto3" json:"volMax,omitempty"`               //	模块最大输出电压
	VolMin        float32 `protobuf:"fixed32,5,opt,name=volMin,proto3" json:"volMin,omitempty"`               //	模块限流输出最低电压
	RatedVol      float32 `protobuf:"fixed32,6,opt,name=ratedVol,proto3" json:"ratedVol,omitempty"`           //	模块额定/缺省输出电压
	RatedPower    float32 `protobuf:"fixed32,7,opt,name=ratedPower,proto3" json:"ratedPower,omitempty"`       //  模块额定输出功率
	RatedCurr     float32 `protobuf:"fixed32,8,opt,name=ratedCurr,proto3" json:"ratedCurr,omitempty"`         //	模块额定输出电流
	RatedInputVol float32 `protobuf:"fixed32,9,opt,name=ratedInputVol,proto3" json:"ratedInputVol,omitempty"` //	模块额定输入电压
	DCModuleSN    string  `protobuf:"bytes,10,opt,name=DCModuleSN,proto3" json:"DCModuleSN,omitempty"`        //	直流模块SN码(32位条码)
	SoftVersion   string  `protobuf:"bytes,11,opt,name=softVersion,proto3" json:"softVersion,omitempty"`      //	直流模块软件版本号
	HardVersion   string  `protobuf:"bytes,12,opt,name=hardVersion,proto3" json:"hardVersion,omitempty"`      //	直流模块硬件版本号
}

func (x *ADModuleAttr) Reset() {
	*x = ADModuleAttr{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[4]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADModuleAttr) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADModuleAttr) ProtoMessage() {}

func (x *ADModuleAttr) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[4]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADModuleAttr.ProtoReflect.Descriptor instead.
func (*ADModuleAttr) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{4}
}

func (x *ADModuleAttr) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ADModuleAttr) GetCurrMax() float32 {
	if x != nil {
		return x.CurrMax
	}
	return 0
}

func (x *ADModuleAttr) GetLimitPower() float32 {
	if x != nil {
		return x.LimitPower
	}
	return 0
}

func (x *ADModuleAttr) GetVolMax() float32 {
	if x != nil {
		return x.VolMax
	}
	return 0
}

func (x *ADModuleAttr) GetVolMin() float32 {
	if x != nil {
		return x.VolMin
	}
	return 0
}

func (x *ADModuleAttr) GetRatedVol() float32 {
	if x != nil {
		return x.RatedVol
	}
	return 0
}

func (x *ADModuleAttr) GetRatedPower() float32 {
	if x != nil {
		return x.RatedPower
	}
	return 0
}

func (x *ADModuleAttr) GetRatedCurr() float32 {
	if x != nil {
		return x.RatedCurr
	}
	return 0
}

func (x *ADModuleAttr) GetRatedInputVol() float32 {
	if x != nil {
		return x.RatedInputVol
	}
	return 0
}

func (x *ADModuleAttr) GetDCModuleSN() string {
	if x != nil {
		return x.DCModuleSN
	}
	return ""
}

func (x *ADModuleAttr) GetSoftVersion() string {
	if x != nil {
		return x.SoftVersion
	}
	return ""
}

func (x *ADModuleAttr) GetHardVersion() string {
	if x != nil {
		return x.HardVersion
	}
	return ""
}

//复活告警信号描述
type AlarmDataType struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           int32  `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                     //	模块编号/位号
	AlarmState40 uint32 `protobuf:"varint,2,opt,name=AlarmState40,proto3" json:"AlarmState40,omitempty"` //	40告警原始值
	AlarmState42 uint32 `protobuf:"varint,3,opt,name=AlarmState42,proto3" json:"AlarmState42,omitempty"` //	42告警原始值
	AlarmState43 uint32 `protobuf:"varint,4,opt,name=AlarmState43,proto3" json:"AlarmState43,omitempty"` //	43告警原始值
}

func (x *AlarmDataType) Reset() {
	*x = AlarmDataType{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[5]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *AlarmDataType) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*AlarmDataType) ProtoMessage() {}

func (x *AlarmDataType) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[5]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use AlarmDataType.ProtoReflect.Descriptor instead.
func (*AlarmDataType) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{5}
}

func (x *AlarmDataType) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *AlarmDataType) GetAlarmState40() uint32 {
	if x != nil {
		return x.AlarmState40
	}
	return 0
}

func (x *AlarmDataType) GetAlarmState42() uint32 {
	if x != nil {
		return x.AlarmState42
	}
	return 0
}

func (x *AlarmDataType) GetAlarmState43() uint32 {
	if x != nil {
		return x.AlarmState43
	}
	return 0
}

//故障告警描述
type ADModuleAlarm struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	AlarmType     AlarmTypeEnum  `protobuf:"varint,1,opt,name=AlarmType,proto3,enum=gcu_main_pmm.protobuf.AlarmTypeEnum" json:"AlarmType,omitempty"`    //	故障告警类型
	AlarmState    AlarmStateEnum `protobuf:"varint,2,opt,name=AlarmState,proto3,enum=gcu_main_pmm.protobuf.AlarmStateEnum" json:"AlarmState,omitempty"` //	故障告警状态
	AlarmTime     uint32         `protobuf:"varint,3,opt,name=AlarmTime,proto3" json:"AlarmTime,omitempty"`                                             //	故障告警发生时间
	AlarmDownTime uint32         `protobuf:"varint,4,opt,name=AlarmDownTime,proto3" json:"AlarmDownTime,omitempty"`                                     //	故障告警恢复时间
}

func (x *ADModuleAlarm) Reset() {
	*x = ADModuleAlarm{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[6]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADModuleAlarm) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADModuleAlarm) ProtoMessage() {}

func (x *ADModuleAlarm) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[6]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADModuleAlarm.ProtoReflect.Descriptor instead.
func (*ADModuleAlarm) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{6}
}

func (x *ADModuleAlarm) GetAlarmType() AlarmTypeEnum {
	if x != nil {
		return x.AlarmType
	}
	return AlarmTypeEnum_DefaultEndReason
}

func (x *ADModuleAlarm) GetAlarmState() AlarmStateEnum {
	if x != nil {
		return x.AlarmState
	}
	return AlarmStateEnum_DefaultAlarm
}

func (x *ADModuleAlarm) GetAlarmTime() uint32 {
	if x != nil {
		return x.AlarmTime
	}
	return 0
}

func (x *ADModuleAlarm) GetAlarmDownTime() uint32 {
	if x != nil {
		return x.AlarmDownTime
	}
	return 0
}

//模块运行实时参数（设备管理用）
type ADModuleParam struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                    int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                         //	模块编号/位号
	OutVol                float32 `protobuf:"fixed32,2,opt,name=outVol,proto3" json:"outVol,omitempty"`                                //	直流电压，普通电压
	OutCurr               float32 `protobuf:"fixed32,3,opt,name=outCurr,proto3" json:"outCurr,omitempty"`                              //	直流电流，普通电流
	LimitCurr             float32 `protobuf:"fixed32,4,opt,name=limitCurr,proto3" json:"limitCurr,omitempty"`                          //	限制电流
	IntputVolA            float32 `protobuf:"fixed32,16,opt,name=intputVolA,proto3" json:"intputVolA,omitempty"`                       //	A相电压
	IntputVolB            float32 `protobuf:"fixed32,17,opt,name=intputVolB,proto3" json:"intputVolB,omitempty"`                       //	B相电压
	IntputVolC            float32 `protobuf:"fixed32,18,opt,name=intputVolC,proto3" json:"intputVolC,omitempty"`                       //	C相电压
	IntputCurrA           float32 `protobuf:"fixed32,19,opt,name=intputCurrA,proto3" json:"intputCurrA,omitempty"`                     //	A相电流
	IntputCurrB           float32 `protobuf:"fixed32,20,opt,name=intputCurrB,proto3" json:"intputCurrB,omitempty"`                     //	B相电流
	IntputCurrC           float32 `protobuf:"fixed32,21,opt,name=intputCurrC,proto3" json:"intputCurrC,omitempty"`                     //	C相电流
	IntputCurrN           float32 `protobuf:"fixed32,22,opt,name=intputCurrN,proto3" json:"intputCurrN,omitempty"`                     //	零线电流
	ActivePower           float32 `protobuf:"fixed32,33,opt,name=activePower,proto3" json:"activePower,omitempty"`                     //	总有功功率，普通功率
	ReactivePower         float32 `protobuf:"fixed32,34,opt,name=reactivePower,proto3" json:"reactivePower,omitempty"`                 //	总无功功率
	PowerFactor           float32 `protobuf:"fixed32,35,opt,name=powerFactor,proto3" json:"powerFactor,omitempty"`                     //	总功率因数
	VoltUnbalanceRate     float32 `protobuf:"fixed32,36,opt,name=voltUnbalanceRate,proto3" json:"voltUnbalanceRate,omitempty"`         //	电压不平衡率
	CurrUnbalanceRate     float32 `protobuf:"fixed32,37,opt,name=currUnbalanceRate,proto3" json:"currUnbalanceRate,omitempty"`         //	电流不平衡率
	ForwardActiveEnergy   float32 `protobuf:"fixed32,49,opt,name=forwardActiveEnergy,proto3" json:"forwardActiveEnergy,omitempty"`     //	正向有功电能
	ReverseActiveEnergy   float32 `protobuf:"fixed32,50,opt,name=reverseActiveEnergy,proto3" json:"reverseActiveEnergy,omitempty"`     //	反向有功电能
	ForwardReactiveEnergy float32 `protobuf:"fixed32,51,opt,name=forwardReactiveEnergy,proto3" json:"forwardReactiveEnergy,omitempty"` //	正向无功电能
	ReverseReactiveEnergy float32 `protobuf:"fixed32,52,opt,name=reverseReactiveEnergy,proto3" json:"reverseReactiveEnergy,omitempty"` //	反向无功电能
	AmbientTemp           float32 `protobuf:"fixed32,64,opt,name=ambientTemp,proto3" json:"ambientTemp,omitempty"`                     //	进风口/环境温度
	SensorTemp            float32 `protobuf:"fixed32,65,opt,name=sensorTemp,proto3" json:"sensorTemp,omitempty"`                       //	传感器/散热温度
	SystemType            uint32  `protobuf:"varint,71,opt,name=systemType,proto3" json:"systemType,omitempty"`                        //	机型
	RunTimeCount          uint32  `protobuf:"varint,72,opt,name=runTimeCount,proto3" json:"runTimeCount,omitempty"`                    //	运行时长计数
	OnOffCunt             uint32  `protobuf:"varint,73,opt,name=onOffCunt,proto3" json:"onOffCunt,omitempty"`                          //	开关计数
	PositionStatus        bool    `protobuf:"varint,74,opt,name=positionStatus,proto3" json:"positionStatus,omitempty"`                //	在位状态
}

func (x *ADModuleParam) Reset() {
	*x = ADModuleParam{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[7]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADModuleParam) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADModuleParam) ProtoMessage() {}

func (x *ADModuleParam) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[7]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADModuleParam.ProtoReflect.Descriptor instead.
func (*ADModuleParam) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{7}
}

func (x *ADModuleParam) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *ADModuleParam) GetOutVol() float32 {
	if x != nil {
		return x.OutVol
	}
	return 0
}

func (x *ADModuleParam) GetOutCurr() float32 {
	if x != nil {
		return x.OutCurr
	}
	return 0
}

func (x *ADModuleParam) GetLimitCurr() float32 {
	if x != nil {
		return x.LimitCurr
	}
	return 0
}

func (x *ADModuleParam) GetIntputVolA() float32 {
	if x != nil {
		return x.IntputVolA
	}
	return 0
}

func (x *ADModuleParam) GetIntputVolB() float32 {
	if x != nil {
		return x.IntputVolB
	}
	return 0
}

func (x *ADModuleParam) GetIntputVolC() float32 {
	if x != nil {
		return x.IntputVolC
	}
	return 0
}

func (x *ADModuleParam) GetIntputCurrA() float32 {
	if x != nil {
		return x.IntputCurrA
	}
	return 0
}

func (x *ADModuleParam) GetIntputCurrB() float32 {
	if x != nil {
		return x.IntputCurrB
	}
	return 0
}

func (x *ADModuleParam) GetIntputCurrC() float32 {
	if x != nil {
		return x.IntputCurrC
	}
	return 0
}

func (x *ADModuleParam) GetIntputCurrN() float32 {
	if x != nil {
		return x.IntputCurrN
	}
	return 0
}

func (x *ADModuleParam) GetActivePower() float32 {
	if x != nil {
		return x.ActivePower
	}
	return 0
}

func (x *ADModuleParam) GetReactivePower() float32 {
	if x != nil {
		return x.ReactivePower
	}
	return 0
}

func (x *ADModuleParam) GetPowerFactor() float32 {
	if x != nil {
		return x.PowerFactor
	}
	return 0
}

func (x *ADModuleParam) GetVoltUnbalanceRate() float32 {
	if x != nil {
		return x.VoltUnbalanceRate
	}
	return 0
}

func (x *ADModuleParam) GetCurrUnbalanceRate() float32 {
	if x != nil {
		return x.CurrUnbalanceRate
	}
	return 0
}

func (x *ADModuleParam) GetForwardActiveEnergy() float32 {
	if x != nil {
		return x.ForwardActiveEnergy
	}
	return 0
}

func (x *ADModuleParam) GetReverseActiveEnergy() float32 {
	if x != nil {
		return x.ReverseActiveEnergy
	}
	return 0
}

func (x *ADModuleParam) GetForwardReactiveEnergy() float32 {
	if x != nil {
		return x.ForwardReactiveEnergy
	}
	return 0
}

func (x *ADModuleParam) GetReverseReactiveEnergy() float32 {
	if x != nil {
		return x.ReverseReactiveEnergy
	}
	return 0
}

func (x *ADModuleParam) GetAmbientTemp() float32 {
	if x != nil {
		return x.AmbientTemp
	}
	return 0
}

func (x *ADModuleParam) GetSensorTemp() float32 {
	if x != nil {
		return x.SensorTemp
	}
	return 0
}

func (x *ADModuleParam) GetSystemType() uint32 {
	if x != nil {
		return x.SystemType
	}
	return 0
}

func (x *ADModuleParam) GetRunTimeCount() uint32 {
	if x != nil {
		return x.RunTimeCount
	}
	return 0
}

func (x *ADModuleParam) GetOnOffCunt() uint32 {
	if x != nil {
		return x.OnOffCunt
	}
	return 0
}

func (x *ADModuleParam) GetPositionStatus() bool {
	if x != nil {
		return x.PositionStatus
	}
	return false
}

//PMM模块配置参数
type PowerMatrixPram struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainAttrList     []*ContactorPara `protobuf:"bytes,1,rep,name=MainAttrList,proto3" json:"MainAttrList,omitempty"`         //	主接触器配置
	MatrixAttrList   []*ContactorPara `protobuf:"bytes,2,rep,name=MatrixAttrList,proto3" json:"MatrixAttrList,omitempty"`     //	阵列接触器配置
	ADModuleAttrList []*ADModuleAttr  `protobuf:"bytes,3,rep,name=ADModuleAttrList,proto3" json:"ADModuleAttrList,omitempty"` //	直流模块配置
}

func (x *PowerMatrixPram) Reset() {
	*x = PowerMatrixPram{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[8]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerMatrixPram) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMatrixPram) ProtoMessage() {}

func (x *PowerMatrixPram) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[8]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMatrixPram.ProtoReflect.Descriptor instead.
func (*PowerMatrixPram) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{8}
}

func (x *PowerMatrixPram) GetMainAttrList() []*ContactorPara {
	if x != nil {
		return x.MainAttrList
	}
	return nil
}

func (x *PowerMatrixPram) GetMatrixAttrList() []*ContactorPara {
	if x != nil {
		return x.MatrixAttrList
	}
	return nil
}

func (x *PowerMatrixPram) GetADModuleAttrList() []*ADModuleAttr {
	if x != nil {
		return x.ADModuleAttrList
	}
	return nil
}

//PMM模块系统操作指令
type SysCtrlCmd struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID       int32 `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`             //	主输出接触器编号
	StartCmd bool  `protobuf:"varint,2,opt,name=StartCmd,proto3" json:"StartCmd,omitempty"` //	开机指令(0表示不操作，1表示开机)
	StopCmd  bool  `protobuf:"varint,3,opt,name=StopCmd,proto3" json:"StopCmd,omitempty"`   //	关机指令(0表示不操作，1表示关机)
}

func (x *SysCtrlCmd) Reset() {
	*x = SysCtrlCmd{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[9]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *SysCtrlCmd) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*SysCtrlCmd) ProtoMessage() {}

func (x *SysCtrlCmd) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[9]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use SysCtrlCmd.ProtoReflect.Descriptor instead.
func (*SysCtrlCmd) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{9}
}

func (x *SysCtrlCmd) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *SysCtrlCmd) GetStartCmd() bool {
	if x != nil {
		return x.StartCmd
	}
	return false
}

func (x *SysCtrlCmd) GetStopCmd() bool {
	if x != nil {
		return x.StopCmd
	}
	return false
}

//VCI需求变化消息
type GunDesire struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID                 int32   `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                 //	主输出接触器编号
	VDemand            float32 `protobuf:"fixed32,2,opt,name=VDemand,proto3" json:"VDemand,omitempty"`                      //	需求电压
	IDemand            float32 `protobuf:"fixed32,3,opt,name=IDemand,proto3" json:"IDemand,omitempty"`                      //	需求电流
	VPTPDemand         float32 `protobuf:"fixed32,4,opt,name=VPTPDemand,proto3" json:"VPTPDemand,omitempty"`                //	模块PTP开机电压
	IPTPDemand         float32 `protobuf:"fixed32,5,opt,name=IPTPDemand,proto3" json:"IPTPDemand,omitempty"`                //	模块PTP开机电流
	OutConnectorDemand int32   `protobuf:"varint,6,opt,name=OutConnectorDemand,proto3" json:"OutConnectorDemand,omitempty"` //	输出接触器期望状态（吸合/断开）
}

func (x *GunDesire) Reset() {
	*x = GunDesire{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[10]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GunDesire) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GunDesire) ProtoMessage() {}

func (x *GunDesire) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[10]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GunDesire.ProtoReflect.Descriptor instead.
func (*GunDesire) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{10}
}

func (x *GunDesire) GetID() int32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *GunDesire) GetVDemand() float32 {
	if x != nil {
		return x.VDemand
	}
	return 0
}

func (x *GunDesire) GetIDemand() float32 {
	if x != nil {
		return x.IDemand
	}
	return 0
}

func (x *GunDesire) GetVPTPDemand() float32 {
	if x != nil {
		return x.VPTPDemand
	}
	return 0
}

func (x *GunDesire) GetIPTPDemand() float32 {
	if x != nil {
		return x.IPTPDemand
	}
	return 0
}

func (x *GunDesire) GetOutConnectorDemand() int32 {
	if x != nil {
		return x.OutConnectorDemand
	}
	return 0
}

//功率矩阵注册信息帧(0x00)
type PowerMatrixLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainContactorAmount     int32         `protobuf:"varint,1,opt,name=MainContactorAmount,proto3" json:"MainContactorAmount,omitempty"`                            //	主输出接触器计数
	MatrixContactorAmount   int32         `protobuf:"varint,2,opt,name=MatrixContactorAmount,proto3" json:"MatrixContactorAmount,omitempty"`                        //	阵列接触器计数
	ADModuleAmount          int32         `protobuf:"varint,3,opt,name=ADModuleAmount,proto3" json:"ADModuleAmount,omitempty"`                                      //	直流模块计数
	SelfCheckRul            SelfCheckType `protobuf:"varint,4,opt,name=SelfCheckRul,proto3,enum=gcu_main_pmm.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"` //	功率矩阵模块自检状态
	PowerModuleProtoVersion string        `protobuf:"bytes,5,opt,name=PowerModuleProtoVersion,proto3" json:"PowerModuleProtoVersion,omitempty"`                     //	功率矩阵协议版本号
	PowerModuleVendor       string        `protobuf:"bytes,6,opt,name=PowerModuleVendor,proto3" json:"PowerModuleVendor,omitempty"`                                 //	功率矩阵模块版本号
}

func (x *PowerMatrixLogin) Reset() {
	*x = PowerMatrixLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[11]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerMatrixLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMatrixLogin) ProtoMessage() {}

func (x *PowerMatrixLogin) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[11]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMatrixLogin.ProtoReflect.Descriptor instead.
func (*PowerMatrixLogin) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{11}
}

func (x *PowerMatrixLogin) GetMainContactorAmount() int32 {
	if x != nil {
		return x.MainContactorAmount
	}
	return 0
}

func (x *PowerMatrixLogin) GetMatrixContactorAmount() int32 {
	if x != nil {
		return x.MatrixContactorAmount
	}
	return 0
}

func (x *PowerMatrixLogin) GetADModuleAmount() int32 {
	if x != nil {
		return x.ADModuleAmount
	}
	return 0
}

func (x *PowerMatrixLogin) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

func (x *PowerMatrixLogin) GetPowerModuleProtoVersion() string {
	if x != nil {
		return x.PowerModuleProtoVersion
	}
	return ""
}

func (x *PowerMatrixLogin) GetPowerModuleVendor() string {
	if x != nil {
		return x.PowerModuleVendor
	}
	return ""
}

//功率矩阵注册信息帧.响应(0x80)
type PowerMatrixLoginAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	Interval                int32            `protobuf:"varint,1,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                  //	心跳信息间隔（毫秒）
	SelfCheckRul            SelfCheckType    `protobuf:"varint,2,opt,name=SelfCheckRul,proto3,enum=gcu_main_pmm.protobuf.SelfCheckType" json:"SelfCheckRul,omitempty"` //	主状态机模块自检状态
	EnableServerList        *EnableServer    `protobuf:"bytes,3,opt,name=EnableServerList,proto3" json:"EnableServerList,omitempty"`                                   //	主状态机可用服务列表
	PramList                *PowerMatrixPram `protobuf:"bytes,4,opt,name=PramList,proto3" json:"PramList,omitempty"`                                                   //	功率矩阵模块当前配置
	PowerModuleProtoVersion string           `protobuf:"bytes,5,opt,name=PowerModuleProtoVersion,proto3" json:"PowerModuleProtoVersion,omitempty"`                     //	功率矩阵协议版本号
	MainStateMachineVendor  string           `protobuf:"bytes,6,opt,name=MainStateMachineVendor,proto3" json:"MainStateMachineVendor,omitempty"`                       //	主状态机模块版本号
}

func (x *PowerMatrixLoginAns) Reset() {
	*x = PowerMatrixLoginAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[12]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PowerMatrixLoginAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PowerMatrixLoginAns) ProtoMessage() {}

func (x *PowerMatrixLoginAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[12]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PowerMatrixLoginAns.ProtoReflect.Descriptor instead.
func (*PowerMatrixLoginAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{12}
}

func (x *PowerMatrixLoginAns) GetInterval() int32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PowerMatrixLoginAns) GetSelfCheckRul() SelfCheckType {
	if x != nil {
		return x.SelfCheckRul
	}
	return SelfCheckType_DefaultCheck
}

func (x *PowerMatrixLoginAns) GetEnableServerList() *EnableServer {
	if x != nil {
		return x.EnableServerList
	}
	return nil
}

func (x *PowerMatrixLoginAns) GetPramList() *PowerMatrixPram {
	if x != nil {
		return x.PramList
	}
	return nil
}

func (x *PowerMatrixLoginAns) GetPowerModuleProtoVersion() string {
	if x != nil {
		return x.PowerModuleProtoVersion
	}
	return ""
}

func (x *PowerMatrixLoginAns) GetMainStateMachineVendor() string {
	if x != nil {
		return x.MainStateMachineVendor
	}
	return ""
}

//模块注册信息(0x02)
type ADModuleLogin struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ADModuleAmount int32            `protobuf:"varint,1,opt,name=ADModuleAmount,proto3" json:"ADModuleAmount,omitempty"` //	直流模块计数
	ADModuleAList  []*ADModuleAttr  `protobuf:"bytes,2,rep,name=ADModuleAList,proto3" json:"ADModuleAList,omitempty"`    //	模块注册参数队列
	ADModulePList  []*ADModuleParam `protobuf:"bytes,3,rep,name=ADModulePList,proto3" json:"ADModulePList,omitempty"`    //	模块实时参数队列
	AlarmList      []*ADModuleAlarm `protobuf:"bytes,4,rep,name=AlarmList,proto3" json:"AlarmList,omitempty"`            //	模块故障/告警队列
	AlarmDataList  []*AlarmDataType `protobuf:"bytes,5,rep,name=AlarmDataList,proto3" json:"AlarmDataList,omitempty"`    //	模块故障/告警原始值
}

func (x *ADModuleLogin) Reset() {
	*x = ADModuleLogin{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[13]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADModuleLogin) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADModuleLogin) ProtoMessage() {}

func (x *ADModuleLogin) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[13]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADModuleLogin.ProtoReflect.Descriptor instead.
func (*ADModuleLogin) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{13}
}

func (x *ADModuleLogin) GetADModuleAmount() int32 {
	if x != nil {
		return x.ADModuleAmount
	}
	return 0
}

func (x *ADModuleLogin) GetADModuleAList() []*ADModuleAttr {
	if x != nil {
		return x.ADModuleAList
	}
	return nil
}

func (x *ADModuleLogin) GetADModulePList() []*ADModuleParam {
	if x != nil {
		return x.ADModulePList
	}
	return nil
}

func (x *ADModuleLogin) GetAlarmList() []*ADModuleAlarm {
	if x != nil {
		return x.AlarmList
	}
	return nil
}

func (x *ADModuleLogin) GetAlarmDataList() []*AlarmDataType {
	if x != nil {
		return x.AlarmDataList
	}
	return nil
}

//模块注册信息.响应(0x82)
type ADModuleLoginAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	MainContactorAmount   int32  `protobuf:"varint,1,opt,name=MainContactorAmount,proto3" json:"MainContactorAmount,omitempty"`     //	主输出接触器接触器计数
	MatrixContactorAmount int32  `protobuf:"varint,2,opt,name=MatrixContactorAmount,proto3" json:"MatrixContactorAmount,omitempty"` //	阵列接触器计数
	DCModuleAmount        int32  `protobuf:"varint,3,opt,name=DCModuleAmount,proto3" json:"DCModuleAmount,omitempty"`               //	直流模块计数
	CtrlProtoVersion      string `protobuf:"bytes,4,opt,name=CtrlProtoVersion,proto3" json:"CtrlProtoVersion,omitempty"`            //	协议版本号
	CtrlVendor            string `protobuf:"bytes,5,opt,name=CtrlVendor,proto3" json:"CtrlVendor,omitempty"`                        //	模块版本号
}

func (x *ADModuleLoginAns) Reset() {
	*x = ADModuleLoginAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[14]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *ADModuleLoginAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*ADModuleLoginAns) ProtoMessage() {}

func (x *ADModuleLoginAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[14]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use ADModuleLoginAns.ProtoReflect.Descriptor instead.
func (*ADModuleLoginAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{14}
}

func (x *ADModuleLoginAns) GetMainContactorAmount() int32 {
	if x != nil {
		return x.MainContactorAmount
	}
	return 0
}

func (x *ADModuleLoginAns) GetMatrixContactorAmount() int32 {
	if x != nil {
		return x.MatrixContactorAmount
	}
	return 0
}

func (x *ADModuleLoginAns) GetDCModuleAmount() int32 {
	if x != nil {
		return x.DCModuleAmount
	}
	return 0
}

func (x *ADModuleLoginAns) GetCtrlProtoVersion() string {
	if x != nil {
		return x.CtrlProtoVersion
	}
	return ""
}

func (x *ADModuleLoginAns) GetCtrlVendor() string {
	if x != nil {
		return x.CtrlVendor
	}
	return ""
}

//心跳状态同步(0x04)
type PMMHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr  uint32                   `protobuf:"varint,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`                                                            //	心跳计数
	Interval      uint32                   `protobuf:"varint,2,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                                    //	心跳信息间隔（毫秒）
	CurrentTime   uint64                   `protobuf:"varint,3,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`                                                              //	心跳时间戳
	MainList      []*MainStatus            `protobuf:"bytes,4,rep,name=MainList,proto3" json:"MainList,omitempty"`                                                                     //	主接触器队列
	MatrixList    []*MatrixStatus          `protobuf:"bytes,5,rep,name=MatrixList,proto3" json:"MatrixList,omitempty"`                                                                 //	阵列接触器队列
	ADModuleList  []*ADModuleAttr          `protobuf:"bytes,6,rep,name=ADModuleList,proto3" json:"ADModuleList,omitempty"`                                                             //	模块参数队列
	ADModulePList []*ADModuleParam         `protobuf:"bytes,7,rep,name=ADModulePList,proto3" json:"ADModulePList,omitempty"`                                                           //	模块实时参数队列
	AlarmList     []*ADModuleAlarm         `protobuf:"bytes,8,rep,name=AlarmList,proto3" json:"AlarmList,omitempty"`                                                                   //	模块故障/告警队列
	ModOnOffState []ADModuleOnOffStateEnum `protobuf:"varint,9,rep,packed,name=modOnOffState,proto3,enum=gcu_main_pmm.protobuf.ADModuleOnOffStateEnum" json:"modOnOffState,omitempty"` //  ACDC模块开关机状态(复活用)
}

func (x *PMMHeartbeatReq) Reset() {
	*x = PMMHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[15]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMMHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMMHeartbeatReq) ProtoMessage() {}

func (x *PMMHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[15]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMMHeartbeatReq.ProtoReflect.Descriptor instead.
func (*PMMHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{15}
}

func (x *PMMHeartbeatReq) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *PMMHeartbeatReq) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PMMHeartbeatReq) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *PMMHeartbeatReq) GetMainList() []*MainStatus {
	if x != nil {
		return x.MainList
	}
	return nil
}

func (x *PMMHeartbeatReq) GetMatrixList() []*MatrixStatus {
	if x != nil {
		return x.MatrixList
	}
	return nil
}

func (x *PMMHeartbeatReq) GetADModuleList() []*ADModuleAttr {
	if x != nil {
		return x.ADModuleList
	}
	return nil
}

func (x *PMMHeartbeatReq) GetADModulePList() []*ADModuleParam {
	if x != nil {
		return x.ADModulePList
	}
	return nil
}

func (x *PMMHeartbeatReq) GetAlarmList() []*ADModuleAlarm {
	if x != nil {
		return x.AlarmList
	}
	return nil
}

func (x *PMMHeartbeatReq) GetModOnOffState() []ADModuleOnOffStateEnum {
	if x != nil {
		return x.ModOnOffState
	}
	return nil
}

//心跳状态同步.响应(0x84)
type PMMHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	HeartbeatCtr uint32           `protobuf:"varint,1,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"` //	心跳计数
	Interval     uint32           `protobuf:"varint,2,opt,name=Interval,proto3" json:"Interval,omitempty"`         //	心跳信息间隔（毫秒）
	CurrentTime  uint64           `protobuf:"varint,3,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`   //	心跳时间戳
	PramList     *PowerMatrixPram `protobuf:"bytes,4,opt,name=PramList,proto3" json:"PramList,omitempty"`          //	功率矩阵模块更新配置
	SysCtrlList  []*SysCtrlCmd    `protobuf:"bytes,5,rep,name=SysCtrlList,proto3" json:"SysCtrlList,omitempty"`    //	系统指令列表
}

func (x *PMMHeartbeatAns) Reset() {
	*x = PMMHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[16]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *PMMHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*PMMHeartbeatAns) ProtoMessage() {}

func (x *PMMHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[16]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use PMMHeartbeatAns.ProtoReflect.Descriptor instead.
func (*PMMHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{16}
}

func (x *PMMHeartbeatAns) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *PMMHeartbeatAns) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *PMMHeartbeatAns) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *PMMHeartbeatAns) GetPramList() *PowerMatrixPram {
	if x != nil {
		return x.PramList
	}
	return nil
}

func (x *PMMHeartbeatAns) GetSysCtrlList() []*SysCtrlCmd {
	if x != nil {
		return x.SysCtrlList
	}
	return nil
}

//主接触器线程心跳周期信息帧(0x06)
type MainContactorHeartbeatReq struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID           uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                              //	主接触器编号
	HeartbeatCtr uint32             `protobuf:"varint,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`                                          //	心跳计数
	Interval     uint32             `protobuf:"varint,3,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                  //	心跳信息间隔（毫秒）
	CurrentTime  uint64             `protobuf:"varint,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`                                            //	心跳时间戳
	BatVol       float32            `protobuf:"fixed32,5,opt,name=BatVol,proto3" json:"BatVol,omitempty"`                                                     //	主接触器后级电压
	ModVol       float32            `protobuf:"fixed32,6,opt,name=ModVol,proto3" json:"ModVol,omitempty"`                                                     //	主接触器前级电压
	MainMode     ContactorStateEnum `protobuf:"varint,7,opt,name=MainMode,proto3,enum=gcu_main_pmm.protobuf.ContactorStateEnum" json:"MainMode,omitempty"`    //	主接触器当前状态
	AlarmAnsList FaultStopEnum      `protobuf:"varint,8,opt,name=AlarmAnsList,proto3,enum=gcu_main_pmm.protobuf.FaultStopEnum" json:"AlarmAnsList,omitempty"` //	PMM系统故障告警
	MatrixID     []int32            `protobuf:"varint,9,rep,packed,name=MatrixID,proto3" json:"MatrixID,omitempty"`                                           //	当前分配阵列接触器ID队列
	ADModuleID   []int32            `protobuf:"varint,10,rep,packed,name=ADModuleID,proto3" json:"ADModuleID,omitempty"`                                      //	当前分配模块ID队列
}

func (x *MainContactorHeartbeatReq) Reset() {
	*x = MainContactorHeartbeatReq{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[17]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainContactorHeartbeatReq) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainContactorHeartbeatReq) ProtoMessage() {}

func (x *MainContactorHeartbeatReq) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[17]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainContactorHeartbeatReq.ProtoReflect.Descriptor instead.
func (*MainContactorHeartbeatReq) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{17}
}

func (x *MainContactorHeartbeatReq) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetBatVol() float32 {
	if x != nil {
		return x.BatVol
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetModVol() float32 {
	if x != nil {
		return x.ModVol
	}
	return 0
}

func (x *MainContactorHeartbeatReq) GetMainMode() ContactorStateEnum {
	if x != nil {
		return x.MainMode
	}
	return ContactorStateEnum_UnKown
}

func (x *MainContactorHeartbeatReq) GetAlarmAnsList() FaultStopEnum {
	if x != nil {
		return x.AlarmAnsList
	}
	return FaultStopEnum_DefaultStopCode
}

func (x *MainContactorHeartbeatReq) GetMatrixID() []int32 {
	if x != nil {
		return x.MatrixID
	}
	return nil
}

func (x *MainContactorHeartbeatReq) GetADModuleID() []int32 {
	if x != nil {
		return x.ADModuleID
	}
	return nil
}

//主接触器线程心跳周期信息帧.响应(0x86)
type MainContactorHeartbeatAns struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                      //	主接触器编号
	HeartbeatCtr  uint32      `protobuf:"varint,2,opt,name=HeartbeatCtr,proto3" json:"HeartbeatCtr,omitempty"`  //	心跳计数
	Interval      uint32      `protobuf:"varint,3,opt,name=Interval,proto3" json:"Interval,omitempty"`          //	心跳信息间隔（毫秒）
	CurrentTime   uint64      `protobuf:"varint,4,opt,name=CurrentTime,proto3" json:"CurrentTime,omitempty"`    //	心跳时间戳
	SysCtrlList   *SysCtrlCmd `protobuf:"bytes,5,opt,name=SysCtrlList,proto3" json:"SysCtrlList,omitempty"`     //	系统指令
	GunDesireList *GunDesire  `protobuf:"bytes,6,opt,name=GunDesireList,proto3" json:"GunDesireList,omitempty"` //	需求参数
}

func (x *MainContactorHeartbeatAns) Reset() {
	*x = MainContactorHeartbeatAns{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[18]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainContactorHeartbeatAns) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainContactorHeartbeatAns) ProtoMessage() {}

func (x *MainContactorHeartbeatAns) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[18]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainContactorHeartbeatAns.ProtoReflect.Descriptor instead.
func (*MainContactorHeartbeatAns) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{18}
}

func (x *MainContactorHeartbeatAns) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MainContactorHeartbeatAns) GetHeartbeatCtr() uint32 {
	if x != nil {
		return x.HeartbeatCtr
	}
	return 0
}

func (x *MainContactorHeartbeatAns) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MainContactorHeartbeatAns) GetCurrentTime() uint64 {
	if x != nil {
		return x.CurrentTime
	}
	return 0
}

func (x *MainContactorHeartbeatAns) GetSysCtrlList() *SysCtrlCmd {
	if x != nil {
		return x.SysCtrlList
	}
	return nil
}

func (x *MainContactorHeartbeatAns) GetGunDesireList() *GunDesire {
	if x != nil {
		return x.GunDesireList
	}
	return nil
}

//主接触器线程realtimepush
//主接触器线程突发上传信息帧(0x08)
type MainContactorRTpush struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32             `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                                                                //	主接触器编号
	RTpushCtr     uint32             `protobuf:"varint,2,opt,name=RTpushCtr,proto3" json:"RTpushCtr,omitempty"`                                                  //	推送计数
	Interval      uint32             `protobuf:"varint,3,opt,name=Interval,proto3" json:"Interval,omitempty"`                                                    //	反馈超时预期（毫秒）
	MainMode      ContactorStateEnum `protobuf:"varint,4,opt,name=MainMode,proto3,enum=gcu_main_pmm.protobuf.ContactorStateEnum" json:"MainMode,omitempty"`      //	主接触器当前状态
	MainAlarmList FaultStopEnum      `protobuf:"varint,5,opt,name=MainAlarmList,proto3,enum=gcu_main_pmm.protobuf.FaultStopEnum" json:"MainAlarmList,omitempty"` //	PMM系统故障告警属性
}

func (x *MainContactorRTpush) Reset() {
	*x = MainContactorRTpush{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[19]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainContactorRTpush) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainContactorRTpush) ProtoMessage() {}

func (x *MainContactorRTpush) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[19]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainContactorRTpush.ProtoReflect.Descriptor instead.
func (*MainContactorRTpush) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{19}
}

func (x *MainContactorRTpush) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MainContactorRTpush) GetRTpushCtr() uint32 {
	if x != nil {
		return x.RTpushCtr
	}
	return 0
}

func (x *MainContactorRTpush) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MainContactorRTpush) GetMainMode() ContactorStateEnum {
	if x != nil {
		return x.MainMode
	}
	return ContactorStateEnum_UnKown
}

func (x *MainContactorRTpush) GetMainAlarmList() FaultStopEnum {
	if x != nil {
		return x.MainAlarmList
	}
	return FaultStopEnum_DefaultStopCode
}

//主接触器线程realtimepull
//主接触器线程突发接收信息帧(0x88)
type MainContactorRTpull struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	ID            uint32      `protobuf:"varint,1,opt,name=ID,proto3" json:"ID,omitempty"`                      //	主接触器编号
	RTpullCtr     uint32      `protobuf:"varint,2,opt,name=RTpullCtr,proto3" json:"RTpullCtr,omitempty"`        //	推送计数
	Interval      uint32      `protobuf:"varint,3,opt,name=Interval,proto3" json:"Interval,omitempty"`          //	反馈超时预期（毫秒）
	SysCtrlList   *SysCtrlCmd `protobuf:"bytes,4,opt,name=SysCtrlList,proto3" json:"SysCtrlList,omitempty"`     //	系统指令
	GunDesireList *GunDesire  `protobuf:"bytes,5,opt,name=GunDesireList,proto3" json:"GunDesireList,omitempty"` //	需求参数
}

func (x *MainContactorRTpull) Reset() {
	*x = MainContactorRTpull{}
	if protoimpl.UnsafeEnabled {
		mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[20]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *MainContactorRTpull) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*MainContactorRTpull) ProtoMessage() {}

func (x *MainContactorRTpull) ProtoReflect() protoreflect.Message {
	mi := &file_GCU_FSM_PMM_v0_4_proto_msgTypes[20]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use MainContactorRTpull.ProtoReflect.Descriptor instead.
func (*MainContactorRTpull) Descriptor() ([]byte, []int) {
	return file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP(), []int{20}
}

func (x *MainContactorRTpull) GetID() uint32 {
	if x != nil {
		return x.ID
	}
	return 0
}

func (x *MainContactorRTpull) GetRTpullCtr() uint32 {
	if x != nil {
		return x.RTpullCtr
	}
	return 0
}

func (x *MainContactorRTpull) GetInterval() uint32 {
	if x != nil {
		return x.Interval
	}
	return 0
}

func (x *MainContactorRTpull) GetSysCtrlList() *SysCtrlCmd {
	if x != nil {
		return x.SysCtrlList
	}
	return nil
}

func (x *MainContactorRTpull) GetGunDesireList() *GunDesire {
	if x != nil {
		return x.GunDesireList
	}
	return nil
}

var File_GCU_FSM_PMM_v0_4_proto protoreflect.FileDescriptor

var file_GCU_FSM_PMM_v0_4_proto_rawDesc = []byte{
	0x0a, 0x16, 0x47, 0x43, 0x55, 0x5f, 0x46, 0x53, 0x4d, 0x5f, 0x50, 0x4d, 0x4d, 0x5f, 0x76, 0x30,
	0x2e, 0x34, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x15, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x22,
	0xa4, 0x01, 0x0a, 0x0c, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72,
	0x12, 0x1c, 0x0a, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x09, 0x56, 0x43, 0x49, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x09, 0x50, 0x4d, 0x4d, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09,
	0x44, 0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x09, 0x44, 0x4d, 0x43, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4f, 0x48,
	0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4f,
	0x48, 0x50, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x43, 0x52, 0x53,
	0x65, 0x72, 0x76, 0x65, 0x72, 0x18, 0x05, 0x20, 0x01, 0x28, 0x08, 0x52, 0x09, 0x4c, 0x43, 0x52,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x22, 0x99, 0x02, 0x0a, 0x0a, 0x4d, 0x61, 0x69, 0x6e, 0x53,
	0x74, 0x61, 0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28,
	0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x42, 0x61, 0x74, 0x56, 0x6f, 0x6c, 0x12, 0x16, 0x0a,
	0x06, 0x4d, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x4d,
	0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x44, 0x18, 0x05, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x18, 0x06, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x44,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x12, 0x48, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x24,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70,
	0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69,
	0x73, 0x74, 0x22, 0xb3, 0x01, 0x0a, 0x0c, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x53, 0x74, 0x61,
	0x74, 0x75, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52,
	0x02, 0x49, 0x44, 0x12, 0x49, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x0a, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x48,
	0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03,
	0x20, 0x03, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75,
	0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x3d, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x4c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x22, 0xec, 0x02, 0x0a, 0x0c, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x18, 0x0a, 0x07, 0x63, 0x75, 0x72, 0x72,
	0x4d, 0x61, 0x78, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x63, 0x75, 0x72, 0x72, 0x4d,
	0x61, 0x78, 0x12, 0x1e, 0x0a, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x6c, 0x69, 0x6d, 0x69, 0x74, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x4d, 0x61, 0x78, 0x12, 0x16, 0x0a, 0x06, 0x76, 0x6f,
	0x6c, 0x4d, 0x69, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x76, 0x6f, 0x6c, 0x4d,
	0x69, 0x6e, 0x12, 0x1a, 0x0a, 0x08, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x06,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x08, 0x72, 0x61, 0x74, 0x65, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x1e,
	0x0a, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x07, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0a, 0x72, 0x61, 0x74, 0x65, 0x64, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x1c,
	0x0a, 0x09, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x18, 0x08, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x09, 0x72, 0x61, 0x74, 0x65, 0x64, 0x43, 0x75, 0x72, 0x72, 0x12, 0x24, 0x0a, 0x0d,
	0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x61, 0x74, 0x65, 0x64, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x56,
	0x6f, 0x6c, 0x12, 0x1e, 0x0a, 0x0a, 0x44, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x4e,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x44, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x53, 0x4e, 0x12, 0x20, 0x0a, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f,
	0x6e, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x73, 0x6f, 0x66, 0x74, 0x56, 0x65, 0x72,
	0x73, 0x69, 0x6f, 0x6e, 0x12, 0x20, 0x0a, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x56, 0x65, 0x72, 0x73,
	0x69, 0x6f, 0x6e, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x68, 0x61, 0x72, 0x64, 0x56,
	0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x22, 0x8b, 0x01, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d,
	0x44, 0x61, 0x74, 0x61, 0x54, 0x79, 0x70, 0x65, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x34, 0x30, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x34, 0x30, 0x12, 0x22, 0x0a, 0x0c,
	0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x34, 0x32, 0x18, 0x03, 0x20, 0x01,
	0x28, 0x0d, 0x52, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x34, 0x32,
	0x12, 0x22, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x34, 0x33,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x34, 0x33, 0x22, 0xde, 0x01, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52,
	0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x45, 0x0a, 0x0a, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x25,
	0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0a, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61, 0x74,
	0x65, 0x12, 0x1c, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54, 0x69, 0x6d, 0x65, 0x12,
	0x24, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x6f, 0x77, 0x6e, 0x54, 0x69, 0x6d, 0x65,
	0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x6f, 0x77,
	0x6e, 0x54, 0x69, 0x6d, 0x65, 0x22, 0xb9, 0x07, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x61, 0x72, 0x61, 0x6d, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x16, 0x0a, 0x06, 0x6f, 0x75, 0x74, 0x56, 0x6f,
	0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x6f, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x12,
	0x18, 0x0a, 0x07, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x07, 0x6f, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x12, 0x1c, 0x0a, 0x09, 0x6c, 0x69, 0x6d,
	0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x09, 0x6c, 0x69,
	0x6d, 0x69, 0x74, 0x43, 0x75, 0x72, 0x72, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x6f, 0x6c, 0x41, 0x18, 0x10, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x41, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x6f, 0x6c, 0x42, 0x18, 0x11, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x42, 0x12, 0x1e, 0x0a, 0x0a, 0x69, 0x6e, 0x74, 0x70, 0x75,
	0x74, 0x56, 0x6f, 0x6c, 0x43, 0x18, 0x12, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x69, 0x6e, 0x74,
	0x70, 0x75, 0x74, 0x56, 0x6f, 0x6c, 0x43, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74, 0x70, 0x75,
	0x74, 0x43, 0x75, 0x72, 0x72, 0x41, 0x18, 0x13, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x69, 0x6e,
	0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x41, 0x12, 0x20, 0x0a, 0x0b, 0x69, 0x6e, 0x74,
	0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x42, 0x18, 0x14, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b,
	0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x42, 0x12, 0x20, 0x0a, 0x0b, 0x69,
	0x6e, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x43, 0x18, 0x15, 0x20, 0x01, 0x28, 0x02,
	0x52, 0x0b, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x43, 0x12, 0x20, 0x0a,
	0x0b, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x4e, 0x18, 0x16, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x0b, 0x69, 0x6e, 0x74, 0x70, 0x75, 0x74, 0x43, 0x75, 0x72, 0x72, 0x4e, 0x12,
	0x20, 0x0a, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x18, 0x21,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77, 0x65,
	0x72, 0x12, 0x24, 0x0a, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x50, 0x6f, 0x77,
	0x65, 0x72, 0x18, 0x22, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0d, 0x72, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x12, 0x20, 0x0a, 0x0b, 0x70, 0x6f, 0x77, 0x65, 0x72,
	0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x18, 0x23, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x70, 0x6f,
	0x77, 0x65, 0x72, 0x46, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x12, 0x2c, 0x0a, 0x11, 0x76, 0x6f, 0x6c,
	0x74, 0x55, 0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x24,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x11, 0x76, 0x6f, 0x6c, 0x74, 0x55, 0x6e, 0x62, 0x61, 0x6c, 0x61,
	0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x2c, 0x0a, 0x11, 0x63, 0x75, 0x72, 0x72, 0x55,
	0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63, 0x65, 0x52, 0x61, 0x74, 0x65, 0x18, 0x25, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x11, 0x63, 0x75, 0x72, 0x72, 0x55, 0x6e, 0x62, 0x61, 0x6c, 0x61, 0x6e, 0x63,
	0x65, 0x52, 0x61, 0x74, 0x65, 0x12, 0x30, 0x0a, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x31, 0x20, 0x01,
	0x28, 0x02, 0x52, 0x13, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72, 0x64, 0x41, 0x63, 0x74, 0x69, 0x76,
	0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72,
	0x73, 0x65, 0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x32,
	0x20, 0x01, 0x28, 0x02, 0x52, 0x13, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x41, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x34, 0x0a, 0x15, 0x66, 0x6f, 0x72,
	0x77, 0x61, 0x72, 0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x65, 0x72,
	0x67, 0x79, 0x18, 0x33, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15, 0x66, 0x6f, 0x72, 0x77, 0x61, 0x72,
	0x64, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x12,
	0x34, 0x0a, 0x15, 0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69,
	0x76, 0x65, 0x45, 0x6e, 0x65, 0x72, 0x67, 0x79, 0x18, 0x34, 0x20, 0x01, 0x28, 0x02, 0x52, 0x15,
	0x72, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x52, 0x65, 0x61, 0x63, 0x74, 0x69, 0x76, 0x65, 0x45,
	0x6e, 0x65, 0x72, 0x67, 0x79, 0x12, 0x20, 0x0a, 0x0b, 0x61, 0x6d, 0x62, 0x69, 0x65, 0x6e, 0x74,
	0x54, 0x65, 0x6d, 0x70, 0x18, 0x40, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0b, 0x61, 0x6d, 0x62, 0x69,
	0x65, 0x6e, 0x74, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x65, 0x6e, 0x73, 0x6f,
	0x72, 0x54, 0x65, 0x6d, 0x70, 0x18, 0x41, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x73, 0x65, 0x6e,
	0x73, 0x6f, 0x72, 0x54, 0x65, 0x6d, 0x70, 0x12, 0x1e, 0x0a, 0x0a, 0x73, 0x79, 0x73, 0x74, 0x65,
	0x6d, 0x54, 0x79, 0x70, 0x65, 0x18, 0x47, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x73, 0x79, 0x73,
	0x74, 0x65, 0x6d, 0x54, 0x79, 0x70, 0x65, 0x12, 0x22, 0x0a, 0x0c, 0x72, 0x75, 0x6e, 0x54, 0x69,
	0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x48, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x72,
	0x75, 0x6e, 0x54, 0x69, 0x6d, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x1c, 0x0a, 0x09, 0x6f,
	0x6e, 0x4f, 0x66, 0x66, 0x43, 0x75, 0x6e, 0x74, 0x18, 0x49, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x6f, 0x6e, 0x4f, 0x66, 0x66, 0x43, 0x75, 0x6e, 0x74, 0x12, 0x26, 0x0a, 0x0e, 0x70, 0x6f, 0x73,
	0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x18, 0x4a, 0x20, 0x01, 0x28,
	0x08, 0x52, 0x0e, 0x70, 0x6f, 0x73, 0x69, 0x74, 0x69, 0x6f, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75,
	0x73, 0x22, 0xfa, 0x01, 0x0a, 0x0f, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x50, 0x72, 0x61, 0x6d, 0x12, 0x48, 0x0a, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74,
	0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x01, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72,
	0x61, 0x52, 0x0c, 0x4d, 0x61, 0x69, 0x6e, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x4c, 0x0a, 0x0e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x02, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x50, 0x61, 0x72, 0x61, 0x52, 0x0e, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4f, 0x0a,
	0x10, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73,
	0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x10, 0x41, 0x44,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x52,
	0x0a, 0x0a, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6d, 0x64, 0x12, 0x0e, 0x0a, 0x02,
	0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1a, 0x0a, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28, 0x08, 0x52, 0x08,
	0x53, 0x74, 0x61, 0x72, 0x74, 0x43, 0x6d, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x53, 0x74, 0x6f, 0x70,
	0x43, 0x6d, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x08, 0x52, 0x07, 0x53, 0x74, 0x6f, 0x70, 0x43,
	0x6d, 0x64, 0x22, 0xbf, 0x01, 0x0a, 0x09, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x18, 0x0a, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x02, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x07, 0x56, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x44,
	0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x03, 0x20, 0x01, 0x28, 0x02, 0x52, 0x07, 0x49, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x04, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x56, 0x50, 0x54, 0x50, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x1e, 0x0a, 0x0a, 0x49, 0x50, 0x54, 0x50, 0x44, 0x65, 0x6d, 0x61,
	0x6e, 0x64, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x0a, 0x49, 0x50, 0x54, 0x50, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x12, 0x2e, 0x0a, 0x12, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65,
	0x63, 0x74, 0x6f, 0x72, 0x44, 0x65, 0x6d, 0x61, 0x6e, 0x64, 0x18, 0x06, 0x20, 0x01, 0x28, 0x05,
	0x52, 0x12, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x6e, 0x65, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x65,
	0x6d, 0x61, 0x6e, 0x64, 0x22, 0xd4, 0x02, 0x0a, 0x10, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d,
	0x61, 0x74, 0x72, 0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6d, 0x6f,
	0x75, 0x6e, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x44, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32,
	0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63,
	0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x52, 0x75, 0x6c, 0x12, 0x38, 0x0a, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x2c, 0x0a,
	0x11, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x11, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72, 0x22, 0x82, 0x03, 0x0a, 0x13,
	0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4c, 0x6f, 0x67, 0x69, 0x6e,
	0x41, 0x6e, 0x73, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18,
	0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12,
	0x48, 0x0a, 0x0c, 0x53, 0x65, 0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x18,
	0x02, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e,
	0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x65,
	0x6c, 0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x52, 0x0c, 0x53, 0x65, 0x6c,
	0x66, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x52, 0x75, 0x6c, 0x12, 0x4f, 0x0a, 0x10, 0x45, 0x6e, 0x61,
	0x62, 0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x45, 0x6e, 0x61, 0x62,
	0x6c, 0x65, 0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x52, 0x10, 0x45, 0x6e, 0x61, 0x62, 0x6c, 0x65,
	0x53, 0x65, 0x72, 0x76, 0x65, 0x72, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x42, 0x0a, 0x08, 0x50, 0x72,
	0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78,
	0x50, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x38,
	0x0a, 0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f,
	0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x17, 0x50, 0x6f, 0x77, 0x65, 0x72, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x72, 0x6f, 0x74,
	0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x36, 0x0a, 0x16, 0x4d, 0x61, 0x69, 0x6e,
	0x53, 0x74, 0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x18, 0x06, 0x20, 0x01, 0x28, 0x09, 0x52, 0x16, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74,
	0x61, 0x74, 0x65, 0x4d, 0x61, 0x63, 0x68, 0x69, 0x6e, 0x65, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x22, 0xde, 0x02, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f, 0x67,
	0x69, 0x6e, 0x12, 0x26, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6d,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x49, 0x0a, 0x0d, 0x41, 0x44,
	0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x02, 0x20, 0x03, 0x28,
	0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d,
	0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x03, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x61,
	0x74, 0x61, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x54, 0x79,
	0x70, 0x65, 0x52, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x44, 0x61, 0x74, 0x61, 0x4c, 0x69, 0x73,
	0x74, 0x22, 0xee, 0x01, 0x0a, 0x10, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x6f,
	0x67, 0x69, 0x6e, 0x41, 0x6e, 0x73, 0x12, 0x30, 0x0a, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x05, 0x52, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x4d, 0x61, 0x74, 0x72,
	0x69, 0x78, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e,
	0x74, 0x18, 0x02, 0x20, 0x01, 0x28, 0x05, 0x52, 0x15, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x26,
	0x0a, 0x0e, 0x44, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74,
	0x18, 0x03, 0x20, 0x01, 0x28, 0x05, 0x52, 0x0e, 0x44, 0x43, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x6d, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x2a, 0x0a, 0x10, 0x43, 0x74, 0x72, 0x6c, 0x50, 0x72,
	0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69, 0x6f, 0x6e, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09,
	0x52, 0x10, 0x43, 0x74, 0x72, 0x6c, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x56, 0x65, 0x72, 0x73, 0x69,
	0x6f, 0x6e, 0x12, 0x1e, 0x0a, 0x0a, 0x43, 0x74, 0x72, 0x6c, 0x56, 0x65, 0x6e, 0x64, 0x6f, 0x72,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x43, 0x74, 0x72, 0x6c, 0x56, 0x65, 0x6e, 0x64,
	0x6f, 0x72, 0x22, 0xa5, 0x04, 0x0a, 0x0f, 0x50, 0x4d, 0x4d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62,
	0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x65,
	0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e,
	0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e,
	0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x75, 0x72,
	0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x3d, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e,
	0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75,
	0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62,
	0x75, 0x66, 0x2e, 0x4d, 0x61, 0x69, 0x6e, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73, 0x52, 0x08, 0x4d,
	0x61, 0x69, 0x6e, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0a, 0x4d, 0x61, 0x74, 0x72, 0x69,
	0x78, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x53, 0x74, 0x61, 0x74, 0x75, 0x73,
	0x52, 0x0a, 0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x47, 0x0a, 0x0c,
	0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x03,
	0x28, 0x0b, 0x32, 0x23, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x41, 0x74, 0x74, 0x72, 0x52, 0x0c, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x4a, 0x0a, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c,
	0x65, 0x50, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x07, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x61, 0x72,
	0x61, 0x6d, 0x52, 0x0d, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x50, 0x4c, 0x69, 0x73,
	0x74, 0x12, 0x42, 0x0a, 0x09, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x08,
	0x20, 0x03, 0x28, 0x0b, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f,
	0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x52, 0x09, 0x41, 0x6c, 0x61, 0x72,
	0x6d, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x53, 0x0a, 0x0d, 0x6d, 0x6f, 0x64, 0x4f, 0x6e, 0x4f, 0x66,
	0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x18, 0x09, 0x20, 0x03, 0x28, 0x0e, 0x32, 0x2d, 0x2e, 0x67,
	0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74,
	0x6f, 0x62, 0x75, 0x66, 0x2e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x4f,
	0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x6d, 0x6f, 0x64,
	0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x22, 0xfc, 0x01, 0x0a, 0x0f, 0x50,
	0x4d, 0x4d, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x41, 0x6e, 0x73, 0x12, 0x22,
	0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x01,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43,
	0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x02,
	0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20,
	0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x03, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65,
	0x12, 0x42, 0x0a, 0x08, 0x50, 0x72, 0x61, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x26, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x50, 0x6f, 0x77, 0x65, 0x72,
	0x4d, 0x61, 0x74, 0x72, 0x69, 0x78, 0x50, 0x72, 0x61, 0x6d, 0x52, 0x08, 0x50, 0x72, 0x61, 0x6d,
	0x4c, 0x69, 0x73, 0x74, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c,
	0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f,
	0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75,
	0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6d, 0x64, 0x52, 0x0b, 0x53, 0x79,
	0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x22, 0x8a, 0x03, 0x0a, 0x19, 0x4d, 0x61,
	0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x52, 0x65, 0x71, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74,
	0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48,
	0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49,
	0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x75,
	0x72, 0x72, 0x65, 0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x16, 0x0a, 0x06, 0x42, 0x61, 0x74,
	0x56, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x02, 0x52, 0x06, 0x42, 0x61, 0x74, 0x56, 0x6f,
	0x6c, 0x12, 0x16, 0x0a, 0x06, 0x4d, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x18, 0x06, 0x20, 0x01, 0x28,
	0x02, 0x52, 0x06, 0x4d, 0x6f, 0x64, 0x56, 0x6f, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x4d, 0x61, 0x69,
	0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65,
	0x12, 0x48, 0x0a, 0x0c, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x08, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46,
	0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0c, 0x41, 0x6c,
	0x61, 0x72, 0x6d, 0x41, 0x6e, 0x73, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x1a, 0x0a, 0x08, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x49, 0x44, 0x18, 0x09, 0x20, 0x03, 0x28, 0x05, 0x52, 0x08, 0x4d, 0x61,
	0x74, 0x72, 0x69, 0x78, 0x49, 0x44, 0x12, 0x1e, 0x0a, 0x0a, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75,
	0x6c, 0x65, 0x49, 0x44, 0x18, 0x0a, 0x20, 0x03, 0x28, 0x05, 0x52, 0x0a, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x49, 0x44, 0x22, 0x9a, 0x02, 0x0a, 0x19, 0x4d, 0x61, 0x69, 0x6e, 0x43,
	0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x41, 0x6e, 0x73, 0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x02, 0x49, 0x44, 0x12, 0x22, 0x0a, 0x0c, 0x48, 0x65, 0x61, 0x72, 0x74, 0x62, 0x65, 0x61,
	0x74, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0c, 0x48, 0x65, 0x61, 0x72,
	0x74, 0x62, 0x65, 0x61, 0x74, 0x43, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x74, 0x65,
	0x72, 0x76, 0x61, 0x6c, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65, 0x6e, 0x74, 0x54,
	0x69, 0x6d, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0b, 0x43, 0x75, 0x72, 0x72, 0x65,
	0x6e, 0x74, 0x54, 0x69, 0x6d, 0x65, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72,
	0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x21, 0x2e, 0x67, 0x63,
	0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f,
	0x62, 0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43, 0x6d, 0x64, 0x52, 0x0b,
	0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12, 0x46, 0x0a, 0x0d, 0x47,
	0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x06, 0x20, 0x01,
	0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d,
	0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47, 0x75, 0x6e, 0x44, 0x65,
	0x73, 0x69, 0x72, 0x65, 0x52, 0x0d, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x4c,
	0x69, 0x73, 0x74, 0x22, 0xf2, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x69, 0x6e, 0x43, 0x6f, 0x6e, 0x74,
	0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x54, 0x70, 0x75, 0x73, 0x68, 0x12, 0x0e, 0x0a, 0x02, 0x49,
	0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44, 0x12, 0x1c, 0x0a, 0x09, 0x52,
	0x54, 0x70, 0x75, 0x73, 0x68, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09,
	0x52, 0x54, 0x70, 0x75, 0x73, 0x68, 0x43, 0x74, 0x72, 0x12, 0x1a, 0x0a, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x08, 0x49, 0x6e, 0x74,
	0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x45, 0x0a, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64,
	0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0e, 0x32, 0x29, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61,
	0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e,
	0x75, 0x6d, 0x52, 0x08, 0x4d, 0x61, 0x69, 0x6e, 0x4d, 0x6f, 0x64, 0x65, 0x12, 0x4a, 0x0a, 0x0d,
	0x4d, 0x61, 0x69, 0x6e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x05, 0x20,
	0x01, 0x28, 0x0e, 0x32, 0x24, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70,
	0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x46, 0x61, 0x75, 0x6c,
	0x74, 0x53, 0x74, 0x6f, 0x70, 0x45, 0x6e, 0x75, 0x6d, 0x52, 0x0d, 0x4d, 0x61, 0x69, 0x6e, 0x41,
	0x6c, 0x61, 0x72, 0x6d, 0x4c, 0x69, 0x73, 0x74, 0x22, 0xec, 0x01, 0x0a, 0x13, 0x4d, 0x61, 0x69,
	0x6e, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c,
	0x12, 0x0e, 0x0a, 0x02, 0x49, 0x44, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x02, 0x49, 0x44,
	0x12, 0x1c, 0x0a, 0x09, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x18, 0x02, 0x20,
	0x01, 0x28, 0x0d, 0x52, 0x09, 0x52, 0x54, 0x70, 0x75, 0x6c, 0x6c, 0x43, 0x74, 0x72, 0x12, 0x1a,
	0x0a, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x49, 0x6e, 0x74, 0x65, 0x72, 0x76, 0x61, 0x6c, 0x12, 0x43, 0x0a, 0x0b, 0x53, 0x79,
	0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0b, 0x32,
	0x21, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69, 0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70,
	0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x43,
	0x6d, 0x64, 0x52, 0x0b, 0x53, 0x79, 0x73, 0x43, 0x74, 0x72, 0x6c, 0x4c, 0x69, 0x73, 0x74, 0x12,
	0x46, 0x0a, 0x0d, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74,
	0x18, 0x05, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x20, 0x2e, 0x67, 0x63, 0x75, 0x5f, 0x6d, 0x61, 0x69,
	0x6e, 0x5f, 0x70, 0x6d, 0x6d, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x62, 0x75, 0x66, 0x2e, 0x47,
	0x75, 0x6e, 0x44, 0x65, 0x73, 0x69, 0x72, 0x65, 0x52, 0x0d, 0x47, 0x75, 0x6e, 0x44, 0x65, 0x73,
	0x69, 0x72, 0x65, 0x4c, 0x69, 0x73, 0x74, 0x2a, 0x4c, 0x0a, 0x0d, 0x53, 0x65, 0x6c, 0x66, 0x43,
	0x68, 0x65, 0x63, 0x6b, 0x54, 0x79, 0x70, 0x65, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61,
	0x75, 0x6c, 0x74, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x10, 0x00, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x01, 0x12, 0x0c, 0x0a, 0x08, 0x43, 0x68, 0x65, 0x63, 0x6b,
	0x69, 0x6e, 0x67, 0x10, 0x02, 0x12, 0x0e, 0x0a, 0x0a, 0x43, 0x68, 0x65, 0x63, 0x6b, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x03, 0x2a, 0xb0, 0x01, 0x0a, 0x12, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x0a, 0x0a, 0x06,
	0x55, 0x6e, 0x4b, 0x6f, 0x77, 0x6e, 0x10, 0x00, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x72, 0x69, 0x76,
	0x65, 0x46, 0x61, 0x69, 0x6c, 0x75, 0x72, 0x65, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f,
	0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x41, 0x64, 0x68, 0x65, 0x73, 0x69, 0x6f, 0x6e, 0x10,
	0x02, 0x12, 0x14, 0x0a, 0x10, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x53, 0x74,
	0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x03, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x6f, 0x72, 0x4c, 0x6f, 0x63, 0x6b, 0x65, 0x64, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e,
	0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x52, 0x65, 0x61, 0x64, 0x79, 0x10, 0x05,
	0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x68, 0x61,
	0x72, 0x67, 0x69, 0x6e, 0x67, 0x10, 0x06, 0x12, 0x0f, 0x0a, 0x0b, 0x41, 0x67, 0x67, 0x72, 0x65,
	0x67, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x10, 0x07, 0x2a, 0xca, 0x01, 0x0a, 0x16, 0x41, 0x44, 0x4d,
	0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f, 0x6e, 0x4f, 0x66, 0x66, 0x53, 0x74, 0x61, 0x74, 0x65, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x4f,
	0x66, 0x66, 0x69, 0x6e, 0x67, 0x10, 0x00, 0x12, 0x13, 0x0a, 0x0f, 0x41, 0x44, 0x4d, 0x6f, 0x64,
	0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x6e, 0x64, 0x62, 0x79, 0x10, 0x01, 0x12, 0x15, 0x0a, 0x11,
	0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x41, 0x43, 0x4f,
	0x4e, 0x10, 0x02, 0x12, 0x18, 0x0a, 0x14, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x50, 0x61, 0x72, 0x61, 0x53, 0x65, 0x74, 0x10, 0x03, 0x12, 0x15, 0x0a,
	0x11, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x53, 0x74, 0x61, 0x72, 0x74, 0x44, 0x43,
	0x4f, 0x4e, 0x10, 0x04, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65,
	0x41, 0x63, 0x74, 0x69, 0x76, 0x65, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x42, 0x72, 0x6f, 0x61, 0x64, 0x43, 0x61, 0x73, 0x74, 0x10, 0x06, 0x12,
	0x14, 0x0a, 0x10, 0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x49, 0x6e, 0x61, 0x63, 0x74,
	0x69, 0x76, 0x65, 0x10, 0x07, 0x2a, 0xec, 0x03, 0x0a, 0x0d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x54,
	0x79, 0x70, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x14, 0x0a, 0x10, 0x44, 0x65, 0x66, 0x61, 0x75,
	0x6c, 0x74, 0x45, 0x6e, 0x64, 0x52, 0x65, 0x61, 0x73, 0x6f, 0x6e, 0x10, 0x00, 0x12, 0x11, 0x0a,
	0x0d, 0x48, 0x76, 0x64, 0x63, 0x53, 0x74, 0x61, 0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x01,
	0x12, 0x11, 0x0a, 0x0d, 0x48, 0x76, 0x64, 0x63, 0x47, 0x72, 0x6f, 0x75, 0x70, 0x46, 0x61, 0x69,
	0x6c, 0x10, 0x02, 0x12, 0x0f, 0x0a, 0x0b, 0x48, 0x76, 0x64, 0x63, 0x4f, 0x66, 0x66, 0x6c, 0x69,
	0x6e, 0x65, 0x10, 0x03, 0x12, 0x0f, 0x0a, 0x0b, 0x4f, 0x75, 0x74, 0x4f, 0x76, 0x65, 0x72, 0x56,
	0x6f, 0x6c, 0x74, 0x10, 0x10, 0x12, 0x0c, 0x0a, 0x08, 0x4f, 0x76, 0x65, 0x72, 0x54, 0x65, 0x6d,
	0x70, 0x10, 0x11, 0x12, 0x0c, 0x0a, 0x08, 0x46, 0x61, 0x6e, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10,
	0x12, 0x12, 0x0f, 0x0a, 0x0b, 0x45, 0x45, 0x50, 0x52, 0x4f, 0x4d, 0x46, 0x61, 0x75, 0x6c, 0x74,
	0x10, 0x13, 0x12, 0x0a, 0x0a, 0x06, 0x43, 0x41, 0x4e, 0x45, 0x72, 0x72, 0x10, 0x14, 0x12, 0x0d,
	0x0a, 0x09, 0x41, 0x43, 0x4c, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x15, 0x12, 0x0f, 0x0a,
	0x0b, 0x41, 0x43, 0x4c, 0x61, 0x63, 0x6b, 0x50, 0x68, 0x61, 0x73, 0x65, 0x10, 0x16, 0x12, 0x12,
	0x0a, 0x0e, 0x53, 0x65, 0x72, 0x55, 0x6e, 0x62, 0x6c, 0x6e, 0x63, 0x64, 0x43, 0x75, 0x72, 0x72,
	0x10, 0x17, 0x12, 0x0c, 0x0a, 0x08, 0x49, 0x44, 0x52, 0x65, 0x70, 0x65, 0x61, 0x74, 0x10, 0x18,
	0x12, 0x0e, 0x0a, 0x0a, 0x41, 0x43, 0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x19,
	0x12, 0x0e, 0x0a, 0x0a, 0x50, 0x46, 0x43, 0x50, 0x72, 0x6f, 0x74, 0x65, 0x63, 0x74, 0x10, 0x1a,
	0x12, 0x15, 0x0a, 0x11, 0x53, 0x6c, 0x69, 0x67, 0x68, 0x74, 0x55, 0x6e, 0x62, 0x6c, 0x6e, 0x63,
	0x64, 0x43, 0x75, 0x72, 0x72, 0x10, 0x1b, 0x12, 0x0f, 0x0a, 0x0b, 0x44, 0x69, 0x73, 0x63, 0x68,
	0x67, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x1c, 0x12, 0x0b, 0x0a, 0x07, 0x53, 0x43, 0x46, 0x61,
	0x75, 0x6c, 0x74, 0x10, 0x1d, 0x12, 0x11, 0x0a, 0x0d, 0x49, 0x6e, 0x6e, 0x65, 0x72, 0x43, 0x6f,
	0x6d, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x1e, 0x12, 0x12, 0x0a, 0x0e, 0x45, 0x6c, 0x65, 0x63,
	0x74, 0x47, 0x72, 0x69, 0x64, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x10, 0x20, 0x12, 0x11, 0x0a, 0x0d,
	0x4d, 0x6f, 0x64, 0x52, 0x65, 0x6c, 0x61, 0x79, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x10, 0x21, 0x12,
	0x12, 0x0a, 0x0e, 0x4f, 0x75, 0x74, 0x43, 0x61, 0x70, 0x6c, 0x69, 0x66, 0x65, 0x57, 0x61, 0x72,
	0x6e, 0x10, 0x22, 0x12, 0x09, 0x0a, 0x05, 0x41, 0x43, 0x43, 0x75, 0x74, 0x10, 0x23, 0x12, 0x09,
	0x0a, 0x05, 0x44, 0x43, 0x4f, 0x43, 0x50, 0x10, 0x24, 0x12, 0x14, 0x0a, 0x10, 0x42, 0x6f, 0x61,
	0x72, 0x64, 0x63, 0x6f, 0x72, 0x72, 0x65, 0x63, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x25, 0x12,
	0x11, 0x0a, 0x0d, 0x44, 0x69, 0x6f, 0x64, 0x65, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72, 0x6e,
	0x10, 0x26, 0x12, 0x0f, 0x0a, 0x0b, 0x4d, 0x4f, 0x53, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61, 0x72,
	0x6e, 0x10, 0x27, 0x12, 0x0f, 0x0a, 0x0b, 0x50, 0x46, 0x43, 0x54, 0x65, 0x6d, 0x70, 0x57, 0x61,
	0x72, 0x6e, 0x10, 0x28, 0x2a, 0x4b, 0x0a, 0x0e, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x53, 0x74, 0x61,
	0x74, 0x65, 0x45, 0x6e, 0x75, 0x6d, 0x12, 0x10, 0x0a, 0x0c, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c,
	0x74, 0x41, 0x6c, 0x61, 0x72, 0x6d, 0x10, 0x00, 0x12, 0x12, 0x0a, 0x0e, 0x41, 0x44, 0x4d, 0x6f,
	0x64, 0x75, 0x6c, 0x65, 0x4e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x01, 0x12, 0x13, 0x0a, 0x0f,
	0x41, 0x44, 0x4d, 0x6f, 0x64, 0x75, 0x6c, 0x65, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x4e, 0x6f, 0x10,
	0x02, 0x2a, 0xe0, 0x02, 0x0a, 0x0d, 0x46, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74, 0x6f, 0x70, 0x45,
	0x6e, 0x75, 0x6d, 0x12, 0x13, 0x0a, 0x0f, 0x44, 0x65, 0x66, 0x61, 0x75, 0x6c, 0x74, 0x53, 0x74,
	0x6f, 0x70, 0x43, 0x6f, 0x64, 0x65, 0x10, 0x00, 0x12, 0x0c, 0x0a, 0x08, 0x4e, 0x6f, 0x43, 0x68,
	0x67, 0x4d, 0x6f, 0x64, 0x10, 0x01, 0x12, 0x10, 0x0a, 0x0c, 0x4d, 0x6f, 0x64, 0x53, 0x74, 0x61,
	0x72, 0x74, 0x46, 0x61, 0x69, 0x6c, 0x10, 0x02, 0x12, 0x13, 0x0a, 0x0f, 0x4f, 0x75, 0x74, 0x53,
	0x68, 0x6f, 0x72, 0x74, 0x43, 0x69, 0x72, 0x63, 0x75, 0x69, 0x74, 0x10, 0x03, 0x12, 0x13, 0x0a,
	0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x50, 0x6f, 0x73, 0x53, 0x74, 0x69, 0x63, 0x6b,
	0x10, 0x04, 0x12, 0x13, 0x0a, 0x0f, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x65, 0x67,
	0x53, 0x74, 0x69, 0x63, 0x6b, 0x10, 0x05, 0x12, 0x15, 0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61,
	0x63, 0x74, 0x50, 0x6f, 0x73, 0x44, 0x69, 0x73, 0x63, 0x6e, 0x63, 0x74, 0x10, 0x06, 0x12, 0x15,
	0x0a, 0x11, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x4e, 0x65, 0x67, 0x44, 0x69, 0x73, 0x63,
	0x6e, 0x63, 0x74, 0x10, 0x07, 0x12, 0x13, 0x0a, 0x0f, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x43,
	0x4f, 0x76, 0x65, 0x72, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x08, 0x12, 0x12, 0x0a, 0x0e, 0x49, 0x6e,
	0x70, 0x75, 0x74, 0x41, 0x43, 0x4c, 0x6f, 0x77, 0x56, 0x6f, 0x6c, 0x74, 0x10, 0x09, 0x12, 0x14,
	0x0a, 0x10, 0x49, 0x6e, 0x70, 0x75, 0x74, 0x41, 0x43, 0x4c, 0x61, 0x6b, 0x65, 0x50, 0x68, 0x61,
	0x73, 0x65, 0x10, 0x0a, 0x12, 0x1d, 0x0a, 0x19, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e,
	0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61,
	0x6c, 0x10, 0x0b, 0x12, 0x1b, 0x0a, 0x17, 0x4f, 0x75, 0x74, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63,
	0x74, 0x6f, 0x72, 0x43, 0x6d, 0x64, 0x41, 0x62, 0x6e, 0x6f, 0x72, 0x6d, 0x61, 0x6c, 0x10, 0x0c,
	0x12, 0x17, 0x0a, 0x13, 0x41, 0x72, 0x72, 0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74,
	0x6f, 0x72, 0x53, 0x74, 0x69, 0x63, 0x6b, 0x10, 0x0d, 0x12, 0x19, 0x0a, 0x15, 0x41, 0x72, 0x72,
	0x61, 0x79, 0x43, 0x6f, 0x6e, 0x74, 0x61, 0x63, 0x74, 0x6f, 0x72, 0x44, 0x69, 0x73, 0x63, 0x6e,
	0x63, 0x74, 0x10, 0x0e, 0x42, 0x11, 0x5a, 0x0f, 0x2e, 0x2f, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x63,
	0x2f, 0x66, 0x73, 0x6d, 0x70, 0x6d, 0x6d, 0x62, 0x06, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_GCU_FSM_PMM_v0_4_proto_rawDescOnce sync.Once
	file_GCU_FSM_PMM_v0_4_proto_rawDescData = file_GCU_FSM_PMM_v0_4_proto_rawDesc
)

func file_GCU_FSM_PMM_v0_4_proto_rawDescGZIP() []byte {
	file_GCU_FSM_PMM_v0_4_proto_rawDescOnce.Do(func() {
		file_GCU_FSM_PMM_v0_4_proto_rawDescData = protoimpl.X.CompressGZIP(file_GCU_FSM_PMM_v0_4_proto_rawDescData)
	})
	return file_GCU_FSM_PMM_v0_4_proto_rawDescData
}

var file_GCU_FSM_PMM_v0_4_proto_enumTypes = make([]protoimpl.EnumInfo, 6)
var file_GCU_FSM_PMM_v0_4_proto_msgTypes = make([]protoimpl.MessageInfo, 21)
var file_GCU_FSM_PMM_v0_4_proto_goTypes = []interface{}{
	(SelfCheckType)(0),                // 0: gcu_main_pmm.protobuf.SelfCheckType
	(ContactorStateEnum)(0),           // 1: gcu_main_pmm.protobuf.ContactorStateEnum
	(ADModuleOnOffStateEnum)(0),       // 2: gcu_main_pmm.protobuf.ADModuleOnOffStateEnum
	(AlarmTypeEnum)(0),                // 3: gcu_main_pmm.protobuf.AlarmTypeEnum
	(AlarmStateEnum)(0),               // 4: gcu_main_pmm.protobuf.AlarmStateEnum
	(FaultStopEnum)(0),                // 5: gcu_main_pmm.protobuf.FaultStopEnum
	(*EnableServer)(nil),              // 6: gcu_main_pmm.protobuf.EnableServer
	(*MainStatus)(nil),                // 7: gcu_main_pmm.protobuf.MainStatus
	(*MatrixStatus)(nil),              // 8: gcu_main_pmm.protobuf.MatrixStatus
	(*ContactorPara)(nil),             // 9: gcu_main_pmm.protobuf.ContactorPara
	(*ADModuleAttr)(nil),              // 10: gcu_main_pmm.protobuf.ADModuleAttr
	(*AlarmDataType)(nil),             // 11: gcu_main_pmm.protobuf.AlarmDataType
	(*ADModuleAlarm)(nil),             // 12: gcu_main_pmm.protobuf.ADModuleAlarm
	(*ADModuleParam)(nil),             // 13: gcu_main_pmm.protobuf.ADModuleParam
	(*PowerMatrixPram)(nil),           // 14: gcu_main_pmm.protobuf.PowerMatrixPram
	(*SysCtrlCmd)(nil),                // 15: gcu_main_pmm.protobuf.SysCtrlCmd
	(*GunDesire)(nil),                 // 16: gcu_main_pmm.protobuf.GunDesire
	(*PowerMatrixLogin)(nil),          // 17: gcu_main_pmm.protobuf.PowerMatrixLogin
	(*PowerMatrixLoginAns)(nil),       // 18: gcu_main_pmm.protobuf.PowerMatrixLoginAns
	(*ADModuleLogin)(nil),             // 19: gcu_main_pmm.protobuf.ADModuleLogin
	(*ADModuleLoginAns)(nil),          // 20: gcu_main_pmm.protobuf.ADModuleLoginAns
	(*PMMHeartbeatReq)(nil),           // 21: gcu_main_pmm.protobuf.PMMHeartbeatReq
	(*PMMHeartbeatAns)(nil),           // 22: gcu_main_pmm.protobuf.PMMHeartbeatAns
	(*MainContactorHeartbeatReq)(nil), // 23: gcu_main_pmm.protobuf.MainContactorHeartbeatReq
	(*MainContactorHeartbeatAns)(nil), // 24: gcu_main_pmm.protobuf.MainContactorHeartbeatAns
	(*MainContactorRTpush)(nil),       // 25: gcu_main_pmm.protobuf.MainContactorRTpush
	(*MainContactorRTpull)(nil),       // 26: gcu_main_pmm.protobuf.MainContactorRTpull
}
var file_GCU_FSM_PMM_v0_4_proto_depIdxs = []int32{
	1,  // 0: gcu_main_pmm.protobuf.MainStatus.MainMode:type_name -> gcu_main_pmm.protobuf.ContactorStateEnum
	5,  // 1: gcu_main_pmm.protobuf.MainStatus.AlarmAnsList:type_name -> gcu_main_pmm.protobuf.FaultStopEnum
	1,  // 2: gcu_main_pmm.protobuf.MatrixStatus.MatrixMode:type_name -> gcu_main_pmm.protobuf.ContactorStateEnum
	5,  // 3: gcu_main_pmm.protobuf.MatrixStatus.AlarmAnsList:type_name -> gcu_main_pmm.protobuf.FaultStopEnum
	3,  // 4: gcu_main_pmm.protobuf.ADModuleAlarm.AlarmType:type_name -> gcu_main_pmm.protobuf.AlarmTypeEnum
	4,  // 5: gcu_main_pmm.protobuf.ADModuleAlarm.AlarmState:type_name -> gcu_main_pmm.protobuf.AlarmStateEnum
	9,  // 6: gcu_main_pmm.protobuf.PowerMatrixPram.MainAttrList:type_name -> gcu_main_pmm.protobuf.ContactorPara
	9,  // 7: gcu_main_pmm.protobuf.PowerMatrixPram.MatrixAttrList:type_name -> gcu_main_pmm.protobuf.ContactorPara
	10, // 8: gcu_main_pmm.protobuf.PowerMatrixPram.ADModuleAttrList:type_name -> gcu_main_pmm.protobuf.ADModuleAttr
	0,  // 9: gcu_main_pmm.protobuf.PowerMatrixLogin.SelfCheckRul:type_name -> gcu_main_pmm.protobuf.SelfCheckType
	0,  // 10: gcu_main_pmm.protobuf.PowerMatrixLoginAns.SelfCheckRul:type_name -> gcu_main_pmm.protobuf.SelfCheckType
	6,  // 11: gcu_main_pmm.protobuf.PowerMatrixLoginAns.EnableServerList:type_name -> gcu_main_pmm.protobuf.EnableServer
	14, // 12: gcu_main_pmm.protobuf.PowerMatrixLoginAns.PramList:type_name -> gcu_main_pmm.protobuf.PowerMatrixPram
	10, // 13: gcu_main_pmm.protobuf.ADModuleLogin.ADModuleAList:type_name -> gcu_main_pmm.protobuf.ADModuleAttr
	13, // 14: gcu_main_pmm.protobuf.ADModuleLogin.ADModulePList:type_name -> gcu_main_pmm.protobuf.ADModuleParam
	12, // 15: gcu_main_pmm.protobuf.ADModuleLogin.AlarmList:type_name -> gcu_main_pmm.protobuf.ADModuleAlarm
	11, // 16: gcu_main_pmm.protobuf.ADModuleLogin.AlarmDataList:type_name -> gcu_main_pmm.protobuf.AlarmDataType
	7,  // 17: gcu_main_pmm.protobuf.PMMHeartbeatReq.MainList:type_name -> gcu_main_pmm.protobuf.MainStatus
	8,  // 18: gcu_main_pmm.protobuf.PMMHeartbeatReq.MatrixList:type_name -> gcu_main_pmm.protobuf.MatrixStatus
	10, // 19: gcu_main_pmm.protobuf.PMMHeartbeatReq.ADModuleList:type_name -> gcu_main_pmm.protobuf.ADModuleAttr
	13, // 20: gcu_main_pmm.protobuf.PMMHeartbeatReq.ADModulePList:type_name -> gcu_main_pmm.protobuf.ADModuleParam
	12, // 21: gcu_main_pmm.protobuf.PMMHeartbeatReq.AlarmList:type_name -> gcu_main_pmm.protobuf.ADModuleAlarm
	2,  // 22: gcu_main_pmm.protobuf.PMMHeartbeatReq.modOnOffState:type_name -> gcu_main_pmm.protobuf.ADModuleOnOffStateEnum
	14, // 23: gcu_main_pmm.protobuf.PMMHeartbeatAns.PramList:type_name -> gcu_main_pmm.protobuf.PowerMatrixPram
	15, // 24: gcu_main_pmm.protobuf.PMMHeartbeatAns.SysCtrlList:type_name -> gcu_main_pmm.protobuf.SysCtrlCmd
	1,  // 25: gcu_main_pmm.protobuf.MainContactorHeartbeatReq.MainMode:type_name -> gcu_main_pmm.protobuf.ContactorStateEnum
	5,  // 26: gcu_main_pmm.protobuf.MainContactorHeartbeatReq.AlarmAnsList:type_name -> gcu_main_pmm.protobuf.FaultStopEnum
	15, // 27: gcu_main_pmm.protobuf.MainContactorHeartbeatAns.SysCtrlList:type_name -> gcu_main_pmm.protobuf.SysCtrlCmd
	16, // 28: gcu_main_pmm.protobuf.MainContactorHeartbeatAns.GunDesireList:type_name -> gcu_main_pmm.protobuf.GunDesire
	1,  // 29: gcu_main_pmm.protobuf.MainContactorRTpush.MainMode:type_name -> gcu_main_pmm.protobuf.ContactorStateEnum
	5,  // 30: gcu_main_pmm.protobuf.MainContactorRTpush.MainAlarmList:type_name -> gcu_main_pmm.protobuf.FaultStopEnum
	15, // 31: gcu_main_pmm.protobuf.MainContactorRTpull.SysCtrlList:type_name -> gcu_main_pmm.protobuf.SysCtrlCmd
	16, // 32: gcu_main_pmm.protobuf.MainContactorRTpull.GunDesireList:type_name -> gcu_main_pmm.protobuf.GunDesire
	33, // [33:33] is the sub-list for method output_type
	33, // [33:33] is the sub-list for method input_type
	33, // [33:33] is the sub-list for extension type_name
	33, // [33:33] is the sub-list for extension extendee
	0,  // [0:33] is the sub-list for field type_name
}

func init() { file_GCU_FSM_PMM_v0_4_proto_init() }
func file_GCU_FSM_PMM_v0_4_proto_init() {
	if File_GCU_FSM_PMM_v0_4_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*EnableServer); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MatrixStatus); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[3].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ContactorPara); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[4].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADModuleAttr); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[5].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*AlarmDataType); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[6].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADModuleAlarm); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[7].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADModuleParam); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[8].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerMatrixPram); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[9].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*SysCtrlCmd); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[10].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GunDesire); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[11].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerMatrixLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[12].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PowerMatrixLoginAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[13].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADModuleLogin); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[14].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*ADModuleLoginAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[15].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMMHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[16].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*PMMHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[17].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainContactorHeartbeatReq); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[18].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainContactorHeartbeatAns); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[19].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainContactorRTpush); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_GCU_FSM_PMM_v0_4_proto_msgTypes[20].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*MainContactorRTpull); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_GCU_FSM_PMM_v0_4_proto_rawDesc,
			NumEnums:      6,
			NumMessages:   21,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_GCU_FSM_PMM_v0_4_proto_goTypes,
		DependencyIndexes: file_GCU_FSM_PMM_v0_4_proto_depIdxs,
		EnumInfos:         file_GCU_FSM_PMM_v0_4_proto_enumTypes,
		MessageInfos:      file_GCU_FSM_PMM_v0_4_proto_msgTypes,
	}.Build()
	File_GCU_FSM_PMM_v0_4_proto = out.File
	file_GCU_FSM_PMM_v0_4_proto_rawDesc = nil
	file_GCU_FSM_PMM_v0_4_proto_goTypes = nil
	file_GCU_FSM_PMM_v0_4_proto_depIdxs = nil
}
 */
